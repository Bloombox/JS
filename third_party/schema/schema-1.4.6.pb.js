
/*
 * Copyright 2018, Bloombox, LLC. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Bloombox, a California Limited Liability Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.bloombox.schema.analytics.Context');
goog.provide('proto.bloombox.schema.analytics.EventActors');
goog.provide('proto.bloombox.schema.analytics.EventPosition');
goog.provide('proto.bloombox.schema.analytics.Scope');
goog.provide('proto.bloombox.schema.analytics.context.APIClient');
goog.provide('proto.bloombox.schema.analytics.context.ApplicationType');
goog.provide('proto.bloombox.schema.analytics.context.BrowserDeviceContext');
goog.provide('proto.bloombox.schema.analytics.context.BrowserType');
goog.provide('proto.bloombox.schema.analytics.context.Collection');
goog.provide('proto.bloombox.schema.analytics.context.DeviceApplication');
goog.provide('proto.bloombox.schema.analytics.context.DeviceLibrary');
goog.provide('proto.bloombox.schema.analytics.context.DeviceOS');
goog.provide('proto.bloombox.schema.analytics.context.DeviceRole');
goog.provide('proto.bloombox.schema.analytics.context.DeviceScreen');
goog.provide('proto.bloombox.schema.analytics.context.EventType');
goog.provide('proto.bloombox.schema.analytics.context.NativeDeviceContext');
goog.provide('proto.bloombox.schema.analytics.context.OSType');
goog.provide('proto.bloombox.schema.analytics.context.PixelSize');
goog.provide('proto.bloombox.schema.analytics.context.ScreenOrientation');
goog.provide('proto.bloombox.schema.analytics.context.WebApplication');
goog.provide('proto.bloombox.schema.analytics.generic.Event');
goog.provide('proto.bloombox.schema.analytics.generic.Exception');
goog.provide('proto.bloombox.schema.analytics.generic.SourceLineReference');
goog.provide('proto.bloombox.schema.analytics.generic.SourceLocation');
goog.provide('proto.bloombox.schema.analytics.identity.Action');
goog.provide('proto.bloombox.schema.analytics.identity.UserAction');
goog.provide('proto.bloombox.schema.analytics.order.Action');
goog.provide('proto.bloombox.schema.analytics.order.OrderAction');
goog.provide('proto.bloombox.schema.analytics.product.Action');
goog.provide('proto.bloombox.schema.analytics.product.Impression');
goog.provide('proto.bloombox.schema.analytics.product.ProductAction');
goog.provide('proto.bloombox.schema.analytics.product.View');
goog.provide('proto.bloombox.schema.analytics.section.Action');
goog.provide('proto.bloombox.schema.analytics.section.Impression');
goog.provide('proto.bloombox.schema.analytics.section.SectionAction');
goog.provide('proto.bloombox.schema.analytics.section.View');
goog.provide('proto.bloombox.schema.analytics.shop.Action');
goog.provide('proto.bloombox.schema.analytics.shop.Impression');
goog.provide('proto.bloombox.schema.analytics.shop.ShopAction');
goog.provide('proto.bloombox.schema.analytics.shop.View');
goog.provide('proto.bloombox.schema.commerce.pos.Purchase');
goog.provide('proto.bloombox.schema.commerce.pos.PurchaseEvent');
goog.provide('proto.bloombox.schema.commerce.pos.PurchaseStatus');
goog.provide('proto.bloombox.schema.commerce.pos.Receipt');
goog.provide('proto.bloombox.schema.identity.ConsumerMembership');
goog.provide('proto.bloombox.schema.identity.ConsumerPreferences');
goog.provide('proto.bloombox.schema.identity.ConsumerProfile');
goog.provide('proto.bloombox.schema.identity.ConsumerType');
goog.provide('proto.bloombox.schema.identity.EnrollmentSource');
goog.provide('proto.bloombox.schema.identity.ID');
goog.provide('proto.bloombox.schema.identity.IDMedia');
goog.provide('proto.bloombox.schema.identity.IDMediaAttachment');
goog.provide('proto.bloombox.schema.identity.IDType');
goog.provide('proto.bloombox.schema.identity.IdentityProvider');
goog.provide('proto.bloombox.schema.identity.IndustryProfile');
goog.provide('proto.bloombox.schema.identity.MenuPreferences');
goog.provide('proto.bloombox.schema.identity.User');
goog.provide('proto.bloombox.schema.identity.UserFlags');
goog.provide('proto.bloombox.schema.identity.UserIdentity');
goog.provide('proto.bloombox.schema.identity.UserKey');
goog.provide('proto.bloombox.schema.identity.UserMediaType');
goog.provide('proto.bloombox.schema.identity.ids.Passport');
goog.provide('proto.bloombox.schema.identity.ids.USDL');
goog.provide('proto.bloombox.schema.identity.ids.USDLField');
goog.provide('proto.bloombox.schema.identity.ids.USDLFieldValue');
goog.provide('proto.bloombox.schema.identity.ids.UserDoctorRec');
goog.provide('proto.bloombox.schema.identity.pass.Pass');
goog.provide('proto.bloombox.schema.identity.pass.PassKey');
goog.provide('proto.bloombox.schema.partner.Partner');
goog.provide('proto.bloombox.schema.partner.PartnerChannel');
goog.provide('proto.bloombox.schema.partner.PartnerDevice');
goog.provide('proto.bloombox.schema.partner.PartnerDeviceFlags');
goog.provide('proto.bloombox.schema.partner.PartnerDeviceKey');
goog.provide('proto.bloombox.schema.partner.PartnerDeviceType');
goog.provide('proto.bloombox.schema.partner.PartnerFlags');
goog.provide('proto.bloombox.schema.partner.PartnerKey');
goog.provide('proto.bloombox.schema.partner.PartnerLocation');
goog.provide('proto.bloombox.schema.partner.PartnerLocationKey');
goog.provide('proto.bloombox.schema.partner.PartnerScope');
goog.provide('proto.bloombox.schema.partner.integrations.GenericIntegrationSettings');
goog.provide('proto.bloombox.schema.partner.integrations.IntegrationPartner');
goog.provide('proto.bloombox.schema.partner.integrations.LocationIntegrationSettings');
goog.provide('proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings');
goog.provide('proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings');
goog.provide('proto.bloombox.schema.partner.settings.APISettings');
goog.provide('proto.bloombox.schema.partner.settings.BetaSettings');
goog.provide('proto.bloombox.schema.partner.settings.CommsSenderSettings');
goog.provide('proto.bloombox.schema.partner.settings.CommsSettingsPayload');
goog.provide('proto.bloombox.schema.partner.settings.CustomSectionSettings');
goog.provide('proto.bloombox.schema.partner.settings.CustomSettingsType');
goog.provide('proto.bloombox.schema.partner.settings.DeliverySettings');
goog.provide('proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings');
goog.provide('proto.bloombox.schema.partner.settings.FeatureStatus');
goog.provide('proto.bloombox.schema.partner.settings.FilteredSectionType');
goog.provide('proto.bloombox.schema.partner.settings.HoursBoundary');
goog.provide('proto.bloombox.schema.partner.settings.HoursSpan');
goog.provide('proto.bloombox.schema.partner.settings.HoursSpec');
goog.provide('proto.bloombox.schema.partner.settings.InHouseBrand');
goog.provide('proto.bloombox.schema.partner.settings.OnlineShopSettings');
goog.provide('proto.bloombox.schema.partner.settings.PartnerAlertSettings');
goog.provide('proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings');
goog.provide('proto.bloombox.schema.partner.settings.PartnerLocationSettings');
goog.provide('proto.bloombox.schema.partner.settings.PartnerNotificationTarget');
goog.provide('proto.bloombox.schema.partner.settings.PartnerSettings');
goog.provide('proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings');
goog.provide('proto.bloombox.schema.partner.settings.ProductBrandSettings');
goog.provide('proto.bloombox.schema.partner.settings.PublishSettings');
goog.provide('proto.bloombox.schema.partner.settings.RegularHoursSettings');
goog.provide('proto.bloombox.schema.partner.settings.SearchSettings');
goog.provide('proto.bloombox.schema.partner.settings.SectionSettings');
goog.provide('proto.bloombox.schema.partner.settings.SectionSettingsPayload');
goog.provide('proto.bloombox.schema.partner.settings.SectionSettingsType');
goog.provide('proto.bloombox.schema.partner.settings.ShopChannelSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopCommsSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopCommsType');
goog.provide('proto.bloombox.schema.partner.settings.ShopContactChannel');
goog.provide('proto.bloombox.schema.partner.settings.ShopContactChannelSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopContactTarget');
goog.provide('proto.bloombox.schema.partner.settings.ShopHoursSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopServiceSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopSettings');
goog.provide('proto.bloombox.schema.partner.settings.ShopStatus');
goog.provide('proto.bloombox.schema.partner.settings.SpecialHoursSettings');
goog.provide('proto.bloombox.schema.partner.settings.StorefrontSettings');
goog.provide('proto.bloombox.schema.partner.settings.TVBannerSettings');
goog.provide('proto.bloombox.schema.partner.settings.TVMenuSettings');
goog.provide('proto.bloombox.schema.partner.settings.TVSectionSettingsPayload');
goog.provide('proto.bloombox.schema.partner.settings.TVSettings');
goog.provide('proto.bloombox.schema.search.PartnerSearchResult');
goog.provide('proto.bloombox.schema.search.ProductResultBound');
goog.provide('proto.bloombox.schema.search.ProductResultMetadata');
goog.provide('proto.bloombox.schema.search.ProductSearchResult');
goog.provide('proto.bloombox.schema.search.ResultHighlightMode');
goog.provide('proto.bloombox.schema.search.ResultsetCategoricalCount');
goog.provide('proto.bloombox.schema.search.SearchBounds');
goog.provide('proto.bloombox.schema.search.SearchOptions');
goog.provide('proto.bloombox.schema.search.SearchResult');
goog.provide('proto.bloombox.schema.search.SearchResultExtension');
goog.provide('proto.bloombox.schema.search.SearchResultOptions');
goog.provide('proto.bloombox.schema.search.SearchResultset');
goog.provide('proto.bloombox.schema.search.SearchResultsetMetadata');
goog.provide('proto.bloombox.schema.search.SearchSortMode');
goog.provide('proto.bloombox.schema.search.SearchSpec');
goog.provide('proto.bloombox.schema.search.SearchableCollection');
goog.provide('proto.bloombox.schema.search.UserSearchResult');
goog.provide('proto.bloombox.schema.security.AuthToken');
goog.provide('proto.bloombox.schema.security.DeviceToken');
goog.provide('proto.bloombox.schema.security.IdentityToken');
goog.provide('proto.bloombox.schema.security.IdentityTokenIssuer');
goog.provide('proto.bloombox.schema.security.access.LocationAccess');
goog.provide('proto.bloombox.schema.security.access.PartnerAccess');
goog.provide('proto.bloombox.schema.security.access.PartnerPermission');
goog.provide('proto.bloombox.schema.services.ServiceStatus');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AccountAssertion');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthError');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthStatus');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.Ping');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.Ping.Request');
goog.provide('proto.bloombox.schema.services.auth.v1beta1.Ping.Response');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CardCheckin');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CheckinError');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.CheckinUser');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.IDCheckin');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.Ping');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.Ping.Request');
goog.provide('proto.bloombox.schema.services.checkin.v1beta1.Ping.Response');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Activation');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Activation.Operation');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Activation.Request');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Activation.Response');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.DeviceActivation');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.DeviceError');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.DeviceRole');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Ping');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Ping.Request');
goog.provide('proto.bloombox.schema.services.devices.v1beta1.Ping.Response');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetFeatured');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetMenu');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetProduct');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.MenuError');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.Ping');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.Ping.Request');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.Ping.Response');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.ProductKeyset');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.SearchMenu');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request');
goog.provide('proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response');
goog.provide('proto.bloombox.schema.services.pos.v1beta1.POSError');
goog.provide('proto.bloombox.schema.services.pos.v1beta1.Ping');
goog.provide('proto.bloombox.schema.services.pos.v1beta1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.pos.v1beta1.Ping.Request');
goog.provide('proto.bloombox.schema.services.pos.v1beta1.Ping.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.CheckZipcode');
goog.provide('proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.CheckZipcode.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.CheckZipcode.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.EnrollMember');
goog.provide('proto.bloombox.schema.services.shop.v1.EnrollMember.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.EnrollMember.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.EnrollMember.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.EnrollmentError');
goog.provide('proto.bloombox.schema.services.shop.v1.GetOrder');
goog.provide('proto.bloombox.schema.services.shop.v1.GetOrder.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.GetOrder.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.GetOrder.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.OrderError');
goog.provide('proto.bloombox.schema.services.shop.v1.Ping');
goog.provide('proto.bloombox.schema.services.shop.v1.Ping.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.Ping.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.Ping.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.ShopInfo');
goog.provide('proto.bloombox.schema.services.shop.v1.ShopInfo.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.ShopInfo.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.ShopInfo.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.SubmitOrder');
goog.provide('proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.SubmitOrder.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.SubmitOrder.Response');
goog.provide('proto.bloombox.schema.services.shop.v1.VerifyError');
goog.provide('proto.bloombox.schema.services.shop.v1.VerifyMember');
goog.provide('proto.bloombox.schema.services.shop.v1.VerifyMember.Operation');
goog.provide('proto.bloombox.schema.services.shop.v1.VerifyMember.Request');
goog.provide('proto.bloombox.schema.services.shop.v1.VerifyMember.Response');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.Event');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.Event.Request');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.Exception');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryError');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response');
goog.provide('proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse');
goog.provide('proto.opencannabis.base.Compression');
goog.provide('proto.opencannabis.base.Compression.Type');
goog.provide('proto.opencannabis.base.Language');
goog.provide('proto.opencannabis.base.ProductKey');
goog.provide('proto.opencannabis.base.ProductKind');
goog.provide('proto.opencannabis.base.ProductReference');
goog.provide('proto.opencannabis.base.ProductType');
goog.provide('proto.opencannabis.commerce.Customer');
goog.provide('proto.opencannabis.commerce.DeliveryDestination');
goog.provide('proto.opencannabis.commerce.Discount');
goog.provide('proto.opencannabis.commerce.DiscountBasis');
goog.provide('proto.opencannabis.commerce.DiscountSpec');
goog.provide('proto.opencannabis.commerce.DiscountType');
goog.provide('proto.opencannabis.commerce.Item');
goog.provide('proto.opencannabis.commerce.Order');
goog.provide('proto.opencannabis.commerce.OrderKey');
goog.provide('proto.opencannabis.commerce.OrderScheduling');
goog.provide('proto.opencannabis.commerce.OrderStatus');
goog.provide('proto.opencannabis.commerce.OrderType');
goog.provide('proto.opencannabis.commerce.ProductVariant');
goog.provide('proto.opencannabis.commerce.ProductWeight');
goog.provide('proto.opencannabis.commerce.SchedulingType');
goog.provide('proto.opencannabis.commerce.StatusCheckin');
goog.provide('proto.opencannabis.commerce.VariantSpec');
goog.provide('proto.opencannabis.contact.ContactInfo');
goog.provide('proto.opencannabis.contact.EmailAddress');
goog.provide('proto.opencannabis.contact.PhoneNumber');
goog.provide('proto.opencannabis.contact.Website');
goog.provide('proto.opencannabis.content.Brand');
goog.provide('proto.opencannabis.content.Content');
goog.provide('proto.opencannabis.content.Content.Encoding');
goog.provide('proto.opencannabis.content.Content.Type');
goog.provide('proto.opencannabis.content.MaterialsData');
goog.provide('proto.opencannabis.content.Name');
goog.provide('proto.opencannabis.content.ProductContent');
goog.provide('proto.opencannabis.content.ProductTimestamps');
goog.provide('proto.opencannabis.crypto.primitives.integrity.Hash');
goog.provide('proto.opencannabis.crypto.primitives.integrity.HashAlgorithm');
goog.provide('proto.opencannabis.crypto.primitives.integrity.HashedData');
goog.provide('proto.opencannabis.device.Device');
goog.provide('proto.opencannabis.device.DeviceCredentials');
goog.provide('proto.opencannabis.device.DeviceFlags');
goog.provide('proto.opencannabis.device.DeviceType');
goog.provide('proto.opencannabis.geo.Address');
goog.provide('proto.opencannabis.geo.Country');
goog.provide('proto.opencannabis.geo.Distance');
goog.provide('proto.opencannabis.geo.DistanceUnit');
goog.provide('proto.opencannabis.geo.DistanceValue');
goog.provide('proto.opencannabis.geo.Location');
goog.provide('proto.opencannabis.geo.LocationAccuracy');
goog.provide('proto.opencannabis.geo.Point');
goog.provide('proto.opencannabis.geo.Province');
goog.provide('proto.opencannabis.geo.usa.USState');
goog.provide('proto.opencannabis.media.DocumentType');
goog.provide('proto.opencannabis.media.DocumentType.DocumentKind');
goog.provide('proto.opencannabis.media.ImageType');
goog.provide('proto.opencannabis.media.ImageType.ImageKind');
goog.provide('proto.opencannabis.media.MediaItem');
goog.provide('proto.opencannabis.media.MediaKey');
goog.provide('proto.opencannabis.media.MediaOrientation');
goog.provide('proto.opencannabis.media.MediaType');
goog.provide('proto.opencannabis.media.MediaType.Kind');
goog.provide('proto.opencannabis.media.VideoType');
goog.provide('proto.opencannabis.media.VideoType.VideoKind');
goog.provide('proto.opencannabis.oauth.AuthorizationScope');
goog.provide('proto.opencannabis.oauth.Client');
goog.provide('proto.opencannabis.oauth.ClientID');
goog.provide('proto.opencannabis.oauth.ClientSecret');
goog.provide('proto.opencannabis.person.Name');
goog.provide('proto.opencannabis.person.Person');
goog.provide('proto.opencannabis.products.Apothecary');
goog.provide('proto.opencannabis.products.ApothecaryType');
goog.provide('proto.opencannabis.products.Cartridge');
goog.provide('proto.opencannabis.products.CartridgeType');
goog.provide('proto.opencannabis.products.Edible');
goog.provide('proto.opencannabis.products.EdibleFlag');
goog.provide('proto.opencannabis.products.EdibleIngredient');
goog.provide('proto.opencannabis.products.EdibleType');
goog.provide('proto.opencannabis.products.Extract');
goog.provide('proto.opencannabis.products.ExtractFlag');
goog.provide('proto.opencannabis.products.ExtractType');
goog.provide('proto.opencannabis.products.Flower');
goog.provide('proto.opencannabis.products.Merchandise');
goog.provide('proto.opencannabis.products.MerchandiseFlag');
goog.provide('proto.opencannabis.products.MerchandiseType');
goog.provide('proto.opencannabis.products.Plant');
goog.provide('proto.opencannabis.products.PlantType');
goog.provide('proto.opencannabis.products.Preroll');
goog.provide('proto.opencannabis.products.PrerollFlag');
goog.provide('proto.opencannabis.products.distribution.Channel');
goog.provide('proto.opencannabis.products.distribution.ChannelType');
goog.provide('proto.opencannabis.products.distribution.DistributionPolicy');
goog.provide('proto.opencannabis.products.menu.Flag');
goog.provide('proto.opencannabis.products.menu.Menu');
goog.provide('proto.opencannabis.products.menu.MenuProduct');
goog.provide('proto.opencannabis.products.menu.MenuSettings');
goog.provide('proto.opencannabis.products.menu.Metadata');
goog.provide('proto.opencannabis.products.menu.SectionData');
goog.provide('proto.opencannabis.products.menu.SectionedMenu');
goog.provide('proto.opencannabis.products.menu.StaticMenu');
goog.provide('proto.opencannabis.products.menu.Status');
goog.provide('proto.opencannabis.products.menu.section.CustomSection');
goog.provide('proto.opencannabis.products.menu.section.FilteredSection');
goog.provide('proto.opencannabis.products.menu.section.Section');
goog.provide('proto.opencannabis.products.menu.section.SectionFlag');
goog.provide('proto.opencannabis.products.menu.section.SectionMedia');
goog.provide('proto.opencannabis.products.menu.section.SectionSettings');
goog.provide('proto.opencannabis.products.menu.section.SectionSpec');
goog.provide('proto.opencannabis.proximity.BluetoothBeacon');
goog.provide('proto.opencannabis.structs.Genetics');
goog.provide('proto.opencannabis.structs.Grow');
goog.provide('proto.opencannabis.structs.ProductFlag');
goog.provide('proto.opencannabis.structs.Shelf');
goog.provide('proto.opencannabis.structs.Species');
goog.provide('proto.opencannabis.structs.VersionSpec');
goog.provide('proto.opencannabis.structs.labtesting.BasicTestResults');
goog.provide('proto.opencannabis.structs.labtesting.Cannabinoid');
goog.provide('proto.opencannabis.structs.labtesting.CannabinoidRatio');
goog.provide('proto.opencannabis.structs.labtesting.Cannabinoids');
goog.provide('proto.opencannabis.structs.labtesting.Cannabinoids.Result');
goog.provide('proto.opencannabis.structs.labtesting.Feeling');
goog.provide('proto.opencannabis.structs.labtesting.Moisture');
goog.provide('proto.opencannabis.structs.labtesting.Pesticides');
goog.provide('proto.opencannabis.structs.labtesting.PotencyEstimate');
goog.provide('proto.opencannabis.structs.labtesting.Subjective');
goog.provide('proto.opencannabis.structs.labtesting.TasteNote');
goog.provide('proto.opencannabis.structs.labtesting.Terpene');
goog.provide('proto.opencannabis.structs.labtesting.Terpenes');
goog.provide('proto.opencannabis.structs.labtesting.Terpenes.Result');
goog.provide('proto.opencannabis.structs.labtesting.TestMedia');
goog.provide('proto.opencannabis.structs.labtesting.TestMediaType');
goog.provide('proto.opencannabis.structs.labtesting.TestResults');
goog.provide('proto.opencannabis.structs.labtesting.TestValue');
goog.provide('proto.opencannabis.structs.labtesting.TestValueType');
goog.provide('proto.opencannabis.structs.pricing.BOGODiscount');
goog.provide('proto.opencannabis.structs.pricing.FreebiePricingDescriptor');
goog.provide('proto.opencannabis.structs.pricing.LoyaltyDiscount');
goog.provide('proto.opencannabis.structs.pricing.PercentageDiscount');
goog.provide('proto.opencannabis.structs.pricing.PricingDescriptor');
goog.provide('proto.opencannabis.structs.pricing.PricingTierAvailability');
goog.provide('proto.opencannabis.structs.pricing.PricingType');
goog.provide('proto.opencannabis.structs.pricing.PricingWeightTier');
goog.provide('proto.opencannabis.structs.pricing.ProductPricing');
goog.provide('proto.opencannabis.structs.pricing.SaleDescriptor');
goog.provide('proto.opencannabis.structs.pricing.SaleType');
goog.provide('proto.opencannabis.structs.pricing.UnitPricingDescriptor');
goog.provide('proto.opencannabis.structs.pricing.WeightedPricingDescriptor');
goog.provide('proto.opencannabis.taxes.FederalTax');
goog.provide('proto.opencannabis.taxes.LocalTax');
goog.provide('proto.opencannabis.taxes.ProvincialTax');
goog.provide('proto.opencannabis.taxes.Tax');
goog.provide('proto.opencannabis.taxes.TaxBasis');
goog.provide('proto.opencannabis.taxes.TaxJurisdiction');
goog.provide('proto.opencannabis.taxes.TaxJurisdictionMode');
goog.provide('proto.opencannabis.taxes.TaxSpec');
goog.provide('proto.opencannabis.temporal.Date');
goog.provide('proto.opencannabis.temporal.Instant');
goog.provide('proto.opencannabis.temporal.Time');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.FieldMask');
goog.require('proto.google.protobuf.Struct');

/**
 * @enum {number}
 */
proto.opencannabis.geo.usa.USState = {
  UNSPECIFIED: 0,
  AL: 1,
  ALABAMA: 1,
  AK: 2,
  ALASKA: 2,
  AZ: 3,
  ARIZONA: 3,
  AR: 4,
  ARKANSAS: 4,
  CA: 5,
  CALIFORNIA: 5,
  CO: 6,
  COLORADO: 6,
  CT: 7,
  CONNECTICUT: 7,
  DE: 8,
  DELAWARE: 8,
  DC: 9,
  DISTRICT_OF_COLUMBIA: 9,
  FL: 10,
  FLORIDA: 10,
  GA: 11,
  GEORGIA: 11,
  HI: 12,
  HAWAII: 12,
  ID: 13,
  IDAHO: 13,
  IL: 14,
  ILLINOIS: 14,
  IN: 15,
  INDIANA: 15,
  IA: 16,
  IOWA: 16,
  KS: 17,
  KANSAS: 17,
  KY: 18,
  KENTUCKY: 18,
  LA: 19,
  LOISIANA: 19,
  ME: 20,
  MAINE: 20,
  MD: 21,
  MARYLAND: 21,
  MA: 22,
  MASSACHUSETTS: 22,
  MI: 23,
  MICHIGAN: 23,
  MN: 24,
  MINNESOTA: 24,
  MS: 25,
  MISSISSIPPI: 25,
  MO: 26,
  MISSOURI: 26,
  MT: 27,
  MONTANA: 27,
  NE: 28,
  NEBRASKA: 28,
  NV: 29,
  NEVADA: 29,
  NH: 30,
  NEW_HAMPSHIRE: 30,
  NJ: 31,
  NEW_JERSEY: 31,
  NM: 32,
  NEW_MEXICO: 32,
  NY: 33,
  NEW_YORK: 33,
  NC: 34,
  NORTH_CAROLINA: 34,
  ND: 35,
  NORTH_DAKOTA: 35,
  OH: 36,
  OHIO: 36,
  OK: 37,
  OKLAHOMA: 37,
  OR: 38,
  OREGON: 38,
  PA: 39,
  PENNSYLVANIA: 39,
  RI: 40,
  RHODE_ISLAND: 40,
  SC: 41,
  SOUTH_CAROLINA: 41,
  SD: 42,
  SOUTH_DAKOTA: 42,
  TN: 43,
  TENNESSEE: 43,
  TX: 44,
  TEXAS: 44,
  UT: 45,
  UTAH: 45,
  VT: 46,
  VERMONT: 46,
  VA: 47,
  VIRGINIA: 47,
  WA: 48,
  WASHINGTON: 48,
  WV: 49,
  WEST_VIRGINIA: 49,
  WI: 50,
  WISCONSIN: 50,
  WYOMING: 51,
  WY: 51
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Province = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.geo.Province.oneofGroups_);
};
goog.inherits(proto.opencannabis.geo.Province, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Province.displayName = 'proto.opencannabis.geo.Province';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.geo.Province.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.opencannabis.geo.Province.SpecCase = {
  SPEC_NOT_SET: 0,
  STATE: 1,
  PROVINCE: 2
};

/**
 * @return {proto.opencannabis.geo.Province.SpecCase}
 */
proto.opencannabis.geo.Province.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.geo.Province.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.geo.Province.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Province.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Province.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Province} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Province.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    province: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Province}
 */
proto.opencannabis.geo.Province.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Province;
  return proto.opencannabis.geo.Province.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Province} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Province}
 */
proto.opencannabis.geo.Province.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.geo.usa.USState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvince(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Province.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Province.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Province} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Province.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.opencannabis.geo.usa.USState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional usa.USState state = 1;
 * @return {!proto.opencannabis.geo.usa.USState}
 */
proto.opencannabis.geo.Province.prototype.getState = function() {
  return /** @type {!proto.opencannabis.geo.usa.USState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.geo.usa.USState} value */
proto.opencannabis.geo.Province.prototype.setState = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.geo.Province.oneofGroups_[0], value);
};


proto.opencannabis.geo.Province.prototype.clearState = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.geo.Province.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Province.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string province = 2;
 * @return {string}
 */
proto.opencannabis.geo.Province.prototype.getProvince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Province.prototype.setProvince = function(value) {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.geo.Province.oneofGroups_[0], value);
};


proto.opencannabis.geo.Province.prototype.clearProvince = function() {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.geo.Province.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Province.prototype.hasProvince = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Country = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.Country, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Country.displayName = 'proto.opencannabis.geo.Country';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Country.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Country.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Country} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Country.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Country}
 */
proto.opencannabis.geo.Country.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Country;
  return proto.opencannabis.geo.Country.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Country} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Country}
 */
proto.opencannabis.geo.Country.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Country.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Country.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Country} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Country.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.opencannabis.geo.Country.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Country.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.LocalTax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.taxes.LocalTax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.LocalTax.displayName = 'proto.opencannabis.taxes.LocalTax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.LocalTax.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.LocalTax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.LocalTax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.LocalTax.toObject = function(includeInstance, msg) {
  var f, obj = {
    municipality: jspb.Message.getFieldWithDefault(msg, 1, ""),
    province: (f = msg.getProvince()) && proto.opencannabis.geo.Province.toObject(includeInstance, f),
    country: (f = msg.getCountry()) && proto.opencannabis.geo.Country.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.LocalTax}
 */
proto.opencannabis.taxes.LocalTax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.LocalTax;
  return proto.opencannabis.taxes.LocalTax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.LocalTax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.LocalTax}
 */
proto.opencannabis.taxes.LocalTax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMunicipality(value);
      break;
    case 2:
      var value = new proto.opencannabis.geo.Province;
      reader.readMessage(value,proto.opencannabis.geo.Province.deserializeBinaryFromReader);
      msg.setProvince(value);
      break;
    case 3:
      var value = new proto.opencannabis.geo.Country;
      reader.readMessage(value,proto.opencannabis.geo.Country.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.LocalTax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.LocalTax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.LocalTax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.LocalTax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMunicipality();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvince();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.geo.Province.serializeBinaryToWriter
    );
  }
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.geo.Country.serializeBinaryToWriter
    );
  }
};


/**
 * optional string municipality = 1;
 * @return {string}
 */
proto.opencannabis.taxes.LocalTax.prototype.getMunicipality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.LocalTax.prototype.setMunicipality = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional opencannabis.geo.Province province = 2;
 * @return {?proto.opencannabis.geo.Province}
 */
proto.opencannabis.taxes.LocalTax.prototype.getProvince = function() {
  return /** @type{?proto.opencannabis.geo.Province} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Province, 2));
};


/** @param {?proto.opencannabis.geo.Province|undefined} value */
proto.opencannabis.taxes.LocalTax.prototype.setProvince = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.taxes.LocalTax.prototype.clearProvince = function() {
  this.setProvince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.LocalTax.prototype.hasProvince = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.geo.Country country = 3;
 * @return {?proto.opencannabis.geo.Country}
 */
proto.opencannabis.taxes.LocalTax.prototype.getCountry = function() {
  return /** @type{?proto.opencannabis.geo.Country} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Country, 3));
};


/** @param {?proto.opencannabis.geo.Country|undefined} value */
proto.opencannabis.taxes.LocalTax.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.taxes.LocalTax.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.LocalTax.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.ProvincialTax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.taxes.ProvincialTax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.ProvincialTax.displayName = 'proto.opencannabis.taxes.ProvincialTax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.ProvincialTax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.ProvincialTax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.ProvincialTax.toObject = function(includeInstance, msg) {
  var f, obj = {
    province: (f = msg.getProvince()) && proto.opencannabis.geo.Province.toObject(includeInstance, f),
    country: (f = msg.getCountry()) && proto.opencannabis.geo.Country.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.ProvincialTax}
 */
proto.opencannabis.taxes.ProvincialTax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.ProvincialTax;
  return proto.opencannabis.taxes.ProvincialTax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.ProvincialTax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.ProvincialTax}
 */
proto.opencannabis.taxes.ProvincialTax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.geo.Province;
      reader.readMessage(value,proto.opencannabis.geo.Province.deserializeBinaryFromReader);
      msg.setProvince(value);
      break;
    case 2:
      var value = new proto.opencannabis.geo.Country;
      reader.readMessage(value,proto.opencannabis.geo.Country.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.ProvincialTax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.ProvincialTax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.ProvincialTax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvince();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.geo.Province.serializeBinaryToWriter
    );
  }
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.geo.Country.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.geo.Province province = 1;
 * @return {?proto.opencannabis.geo.Province}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.getProvince = function() {
  return /** @type{?proto.opencannabis.geo.Province} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Province, 1));
};


/** @param {?proto.opencannabis.geo.Province|undefined} value */
proto.opencannabis.taxes.ProvincialTax.prototype.setProvince = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.taxes.ProvincialTax.prototype.clearProvince = function() {
  this.setProvince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.hasProvince = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.geo.Country country = 2;
 * @return {?proto.opencannabis.geo.Country}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.getCountry = function() {
  return /** @type{?proto.opencannabis.geo.Country} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Country, 2));
};


/** @param {?proto.opencannabis.geo.Country|undefined} value */
proto.opencannabis.taxes.ProvincialTax.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.taxes.ProvincialTax.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.ProvincialTax.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.FederalTax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.taxes.FederalTax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.FederalTax.displayName = 'proto.opencannabis.taxes.FederalTax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.FederalTax.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.FederalTax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.FederalTax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.FederalTax.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: (f = msg.getCountry()) && proto.opencannabis.geo.Country.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.FederalTax}
 */
proto.opencannabis.taxes.FederalTax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.FederalTax;
  return proto.opencannabis.taxes.FederalTax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.FederalTax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.FederalTax}
 */
proto.opencannabis.taxes.FederalTax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.geo.Country;
      reader.readMessage(value,proto.opencannabis.geo.Country.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.FederalTax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.FederalTax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.FederalTax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.FederalTax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.geo.Country.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.geo.Country country = 1;
 * @return {?proto.opencannabis.geo.Country}
 */
proto.opencannabis.taxes.FederalTax.prototype.getCountry = function() {
  return /** @type{?proto.opencannabis.geo.Country} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Country, 1));
};


/** @param {?proto.opencannabis.geo.Country|undefined} value */
proto.opencannabis.taxes.FederalTax.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.taxes.FederalTax.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.FederalTax.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.TaxJurisdiction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_);
};
goog.inherits(proto.opencannabis.taxes.TaxJurisdiction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.TaxJurisdiction.displayName = 'proto.opencannabis.taxes.TaxJurisdiction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.opencannabis.taxes.TaxJurisdiction.JurisdictionCase = {
  JURISDICTION_NOT_SET: 0,
  LOCAL: 2,
  PROVINCIAL: 3,
  FEDERAL: 4
};

/**
 * @return {proto.opencannabis.taxes.TaxJurisdiction.JurisdictionCase}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.getJurisdictionCase = function() {
  return /** @type {proto.opencannabis.taxes.TaxJurisdiction.JurisdictionCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.TaxJurisdiction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.TaxJurisdiction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.TaxJurisdiction.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    local: (f = msg.getLocal()) && proto.opencannabis.taxes.LocalTax.toObject(includeInstance, f),
    provincial: (f = msg.getProvincial()) && proto.opencannabis.taxes.ProvincialTax.toObject(includeInstance, f),
    federal: (f = msg.getFederal()) && proto.opencannabis.taxes.FederalTax.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.TaxJurisdiction}
 */
proto.opencannabis.taxes.TaxJurisdiction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.TaxJurisdiction;
  return proto.opencannabis.taxes.TaxJurisdiction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.TaxJurisdiction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.TaxJurisdiction}
 */
proto.opencannabis.taxes.TaxJurisdiction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.taxes.TaxJurisdictionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.opencannabis.taxes.LocalTax;
      reader.readMessage(value,proto.opencannabis.taxes.LocalTax.deserializeBinaryFromReader);
      msg.setLocal(value);
      break;
    case 3:
      var value = new proto.opencannabis.taxes.ProvincialTax;
      reader.readMessage(value,proto.opencannabis.taxes.ProvincialTax.deserializeBinaryFromReader);
      msg.setProvincial(value);
      break;
    case 4:
      var value = new proto.opencannabis.taxes.FederalTax;
      reader.readMessage(value,proto.opencannabis.taxes.FederalTax.deserializeBinaryFromReader);
      msg.setFederal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.TaxJurisdiction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.TaxJurisdiction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.TaxJurisdiction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.taxes.LocalTax.serializeBinaryToWriter
    );
  }
  f = message.getProvincial();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.taxes.ProvincialTax.serializeBinaryToWriter
    );
  }
  f = message.getFederal();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.taxes.FederalTax.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaxJurisdictionMode mode = 1;
 * @return {!proto.opencannabis.taxes.TaxJurisdictionMode}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.getMode = function() {
  return /** @type {!proto.opencannabis.taxes.TaxJurisdictionMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.taxes.TaxJurisdictionMode} value */
proto.opencannabis.taxes.TaxJurisdiction.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional LocalTax local = 2;
 * @return {?proto.opencannabis.taxes.LocalTax}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.getLocal = function() {
  return /** @type{?proto.opencannabis.taxes.LocalTax} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.taxes.LocalTax, 2));
};


/** @param {?proto.opencannabis.taxes.LocalTax|undefined} value */
proto.opencannabis.taxes.TaxJurisdiction.prototype.setLocal = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_[0], value);
};


proto.opencannabis.taxes.TaxJurisdiction.prototype.clearLocal = function() {
  this.setLocal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.hasLocal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProvincialTax provincial = 3;
 * @return {?proto.opencannabis.taxes.ProvincialTax}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.getProvincial = function() {
  return /** @type{?proto.opencannabis.taxes.ProvincialTax} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.taxes.ProvincialTax, 3));
};


/** @param {?proto.opencannabis.taxes.ProvincialTax|undefined} value */
proto.opencannabis.taxes.TaxJurisdiction.prototype.setProvincial = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_[0], value);
};


proto.opencannabis.taxes.TaxJurisdiction.prototype.clearProvincial = function() {
  this.setProvincial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.hasProvincial = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FederalTax federal = 4;
 * @return {?proto.opencannabis.taxes.FederalTax}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.getFederal = function() {
  return /** @type{?proto.opencannabis.taxes.FederalTax} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.taxes.FederalTax, 4));
};


/** @param {?proto.opencannabis.taxes.FederalTax|undefined} value */
proto.opencannabis.taxes.TaxJurisdiction.prototype.setFederal = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.opencannabis.taxes.TaxJurisdiction.oneofGroups_[0], value);
};


proto.opencannabis.taxes.TaxJurisdiction.prototype.clearFederal = function() {
  this.setFederal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxJurisdiction.prototype.hasFederal = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.TaxSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.taxes.TaxSpec.oneofGroups_);
};
goog.inherits(proto.opencannabis.taxes.TaxSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.TaxSpec.displayName = 'proto.opencannabis.taxes.TaxSpec';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.taxes.TaxSpec.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.opencannabis.taxes.TaxSpec.RateCase = {
  RATE_NOT_SET: 0,
  PERCENTAGE: 4,
  STATIC_VALUE: 5
};

/**
 * @return {proto.opencannabis.taxes.TaxSpec.RateCase}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getRateCase = function() {
  return /** @type {proto.opencannabis.taxes.TaxSpec.RateCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.taxes.TaxSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.TaxSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.TaxSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.TaxSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.TaxSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    basis: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jurisdiction: (f = msg.getJurisdiction()) && proto.opencannabis.taxes.TaxJurisdiction.toObject(includeInstance, f),
    transactionLabel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    percentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    staticValue: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.TaxSpec}
 */
proto.opencannabis.taxes.TaxSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.TaxSpec;
  return proto.opencannabis.taxes.TaxSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.TaxSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.TaxSpec}
 */
proto.opencannabis.taxes.TaxSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.taxes.TaxBasis} */ (reader.readEnum());
      msg.setBasis(value);
      break;
    case 2:
      var value = new proto.opencannabis.taxes.TaxJurisdiction;
      reader.readMessage(value,proto.opencannabis.taxes.TaxJurisdiction.deserializeBinaryFromReader);
      msg.setJurisdiction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionLabel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.TaxSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.TaxSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.TaxSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.TaxSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasis();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getJurisdiction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.taxes.TaxJurisdiction.serializeBinaryToWriter
    );
  }
  f = message.getTransactionLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional TaxBasis basis = 1;
 * @return {!proto.opencannabis.taxes.TaxBasis}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getBasis = function() {
  return /** @type {!proto.opencannabis.taxes.TaxBasis} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.taxes.TaxBasis} value */
proto.opencannabis.taxes.TaxSpec.prototype.setBasis = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TaxJurisdiction jurisdiction = 2;
 * @return {?proto.opencannabis.taxes.TaxJurisdiction}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getJurisdiction = function() {
  return /** @type{?proto.opencannabis.taxes.TaxJurisdiction} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.taxes.TaxJurisdiction, 2));
};


/** @param {?proto.opencannabis.taxes.TaxJurisdiction|undefined} value */
proto.opencannabis.taxes.TaxSpec.prototype.setJurisdiction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.taxes.TaxSpec.prototype.clearJurisdiction = function() {
  this.setJurisdiction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxSpec.prototype.hasJurisdiction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string transaction_label = 3;
 * @return {string}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getTransactionLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.TaxSpec.prototype.setTransactionLabel = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double percentage = 4;
 * @return {number}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.opencannabis.taxes.TaxSpec.prototype.setPercentage = function(value) {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.taxes.TaxSpec.oneofGroups_[0], value);
};


proto.opencannabis.taxes.TaxSpec.prototype.clearPercentage = function() {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.taxes.TaxSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxSpec.prototype.hasPercentage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double static_value = 5;
 * @return {number}
 */
proto.opencannabis.taxes.TaxSpec.prototype.getStaticValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.opencannabis.taxes.TaxSpec.prototype.setStaticValue = function(value) {
  jspb.Message.setOneofField(this, 5, proto.opencannabis.taxes.TaxSpec.oneofGroups_[0], value);
};


proto.opencannabis.taxes.TaxSpec.prototype.clearStaticValue = function() {
  jspb.Message.setOneofField(this, 5, proto.opencannabis.taxes.TaxSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.TaxSpec.prototype.hasStaticValue = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.taxes.Tax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.taxes.Tax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.taxes.Tax.displayName = 'proto.opencannabis.taxes.Tax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.taxes.Tax.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.taxes.Tax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.taxes.Tax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.Tax.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spec: (f = msg.getSpec()) && proto.opencannabis.taxes.TaxSpec.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    label: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.taxes.Tax}
 */
proto.opencannabis.taxes.Tax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.taxes.Tax;
  return proto.opencannabis.taxes.Tax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.taxes.Tax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.taxes.Tax}
 */
proto.opencannabis.taxes.Tax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.opencannabis.taxes.TaxSpec;
      reader.readMessage(value,proto.opencannabis.taxes.TaxSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.taxes.Tax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.taxes.Tax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.taxes.Tax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.taxes.Tax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.taxes.TaxSpec.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.taxes.Tax.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.Tax.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TaxSpec spec = 2;
 * @return {?proto.opencannabis.taxes.TaxSpec}
 */
proto.opencannabis.taxes.Tax.prototype.getSpec = function() {
  return /** @type{?proto.opencannabis.taxes.TaxSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.taxes.TaxSpec, 2));
};


/** @param {?proto.opencannabis.taxes.TaxSpec|undefined} value */
proto.opencannabis.taxes.Tax.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.taxes.Tax.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.taxes.Tax.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.opencannabis.taxes.Tax.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.Tax.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string label = 4;
 * @return {string}
 */
proto.opencannabis.taxes.Tax.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.Tax.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.opencannabis.taxes.Tax.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.opencannabis.taxes.Tax.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.opencannabis.taxes.TaxJurisdictionMode = {
  LOCAL: 0,
  PROVINCE: 1,
  FEDERAL: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.taxes.TaxBasis = {
  ITEM: 0,
  ORDER_SUBTOTAL: 1,
  ORDER_TOTAL: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.content.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.Name.displayName = 'proto.opencannabis.content.Name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    primary: jspb.Message.getFieldWithDefault(msg, 1, ""),
    display: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.Name}
 */
proto.opencannabis.content.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.Name;
  return proto.opencannabis.content.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.Name}
 */
proto.opencannabis.content.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimary();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplay();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string primary = 1;
 * @return {string}
 */
proto.opencannabis.content.Name.prototype.getPrimary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.content.Name.prototype.setPrimary = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display = 2;
 * @return {string}
 */
proto.opencannabis.content.Name.prototype.getDisplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.content.Name.prototype.setDisplay = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.opencannabis.base.ProductKind = {
  FLOWERS: 0,
  EDIBLES: 1,
  EXTRACTS: 2,
  PREROLLS: 3,
  APOTHECARY: 4,
  CARTRIDGES: 5,
  PLANTS: 6,
  MERCHANDISE: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.base.ProductType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.base.ProductType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.base.ProductType.displayName = 'proto.opencannabis.base.ProductType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.base.ProductType.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.base.ProductType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.base.ProductType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.base.ProductType}
 */
proto.opencannabis.base.ProductType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.base.ProductType;
  return proto.opencannabis.base.ProductType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.base.ProductType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.base.ProductType}
 */
proto.opencannabis.base.ProductType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.base.ProductKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.base.ProductType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.base.ProductType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.base.ProductType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ProductKind kind = 1;
 * @return {!proto.opencannabis.base.ProductKind}
 */
proto.opencannabis.base.ProductType.prototype.getKind = function() {
  return /** @type {!proto.opencannabis.base.ProductKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.base.ProductKind} value */
proto.opencannabis.base.ProductType.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.base.ProductReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.base.ProductReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.base.ProductReference.displayName = 'proto.opencannabis.base.ProductReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.base.ProductReference.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.base.ProductReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.base.ProductReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.content.Name.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.base.ProductReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.base.ProductReference;
  return proto.opencannabis.base.ProductReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.base.ProductReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.base.ProductReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Name;
      reader.readMessage(value,proto.opencannabis.content.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.base.ProductReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.base.ProductReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.base.ProductReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Name.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.content.Name name = 1;
 * @return {?proto.opencannabis.content.Name}
 */
proto.opencannabis.base.ProductReference.prototype.getName = function() {
  return /** @type{?proto.opencannabis.content.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Name, 1));
};


/** @param {?proto.opencannabis.content.Name|undefined} value */
proto.opencannabis.base.ProductReference.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.base.ProductReference.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.base.ProductReference.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductKey key = 2;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.base.ProductReference.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 2));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.base.ProductReference.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.base.ProductReference.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.base.ProductReference.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.base.ProductKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.base.ProductKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.base.ProductKey.displayName = 'proto.opencannabis.base.ProductKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.base.ProductKey.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.base.ProductKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.base.ProductKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: (f = msg.getType()) && proto.opencannabis.base.ProductType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.base.ProductKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.base.ProductKey;
  return proto.opencannabis.base.ProductKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.base.ProductKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.base.ProductKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.opencannabis.base.ProductType;
      reader.readMessage(value,proto.opencannabis.base.ProductType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.base.ProductKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.base.ProductKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.base.ProductKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.ProductKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.base.ProductType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.base.ProductKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.base.ProductKey.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProductType type = 2;
 * @return {?proto.opencannabis.base.ProductType}
 */
proto.opencannabis.base.ProductKey.prototype.getType = function() {
  return /** @type{?proto.opencannabis.base.ProductType} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductType, 2));
};


/** @param {?proto.opencannabis.base.ProductType|undefined} value */
proto.opencannabis.base.ProductKey.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.base.ProductKey.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.base.ProductKey.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.VariantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.commerce.VariantSpec.oneofGroups_);
};
goog.inherits(proto.opencannabis.commerce.VariantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.VariantSpec.displayName = 'proto.opencannabis.commerce.VariantSpec';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.commerce.VariantSpec.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.opencannabis.commerce.VariantSpec.SpecCase = {
  SPEC_NOT_SET: 0,
  WEIGHT: 2,
  SIZE: 3,
  COLOR: 4
};

/**
 * @return {proto.opencannabis.commerce.VariantSpec.SpecCase}
 */
proto.opencannabis.commerce.VariantSpec.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.commerce.VariantSpec.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.VariantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.VariantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.VariantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.VariantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    variant: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    size: jspb.Message.getFieldWithDefault(msg, 3, ""),
    color: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.VariantSpec}
 */
proto.opencannabis.commerce.VariantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.VariantSpec;
  return proto.opencannabis.commerce.VariantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.VariantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.VariantSpec}
 */
proto.opencannabis.commerce.VariantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.commerce.ProductVariant} */ (reader.readEnum());
      msg.setVariant(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.commerce.ProductWeight} */ (reader.readEnum());
      msg.setWeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.VariantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.VariantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.VariantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.VariantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariant();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.opencannabis.commerce.ProductWeight} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional ProductVariant variant = 1;
 * @return {!proto.opencannabis.commerce.ProductVariant}
 */
proto.opencannabis.commerce.VariantSpec.prototype.getVariant = function() {
  return /** @type {!proto.opencannabis.commerce.ProductVariant} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.commerce.ProductVariant} value */
proto.opencannabis.commerce.VariantSpec.prototype.setVariant = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ProductWeight weight = 2;
 * @return {!proto.opencannabis.commerce.ProductWeight}
 */
proto.opencannabis.commerce.VariantSpec.prototype.getWeight = function() {
  return /** @type {!proto.opencannabis.commerce.ProductWeight} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.commerce.ProductWeight} value */
proto.opencannabis.commerce.VariantSpec.prototype.setWeight = function(value) {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], value);
};


proto.opencannabis.commerce.VariantSpec.prototype.clearWeight = function() {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.VariantSpec.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string size = 3;
 * @return {string}
 */
proto.opencannabis.commerce.VariantSpec.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.VariantSpec.prototype.setSize = function(value) {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], value);
};


proto.opencannabis.commerce.VariantSpec.prototype.clearSize = function() {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.VariantSpec.prototype.hasSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string color = 4;
 * @return {string}
 */
proto.opencannabis.commerce.VariantSpec.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.VariantSpec.prototype.setColor = function(value) {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], value);
};


proto.opencannabis.commerce.VariantSpec.prototype.clearColor = function() {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.commerce.VariantSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.VariantSpec.prototype.hasColor = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.commerce.Item.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.commerce.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.Item.displayName = 'proto.opencannabis.commerce.Item';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.commerce.Item.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    variantList: jspb.Message.toObjectList(msg.getVariantList(),
    proto.opencannabis.commerce.VariantSpec.toObject, includeInstance),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    cost: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.Item}
 */
proto.opencannabis.commerce.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.Item;
  return proto.opencannabis.commerce.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.Item}
 */
proto.opencannabis.commerce.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.opencannabis.commerce.VariantSpec;
      reader.readMessage(value,proto.opencannabis.commerce.VariantSpec.deserializeBinaryFromReader);
      msg.addVariant(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getVariantList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.commerce.VariantSpec.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCost();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.commerce.Item.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.commerce.Item.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.commerce.Item.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Item.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated VariantSpec variant = 2;
 * @return {!Array.<!proto.opencannabis.commerce.VariantSpec>}
 */
proto.opencannabis.commerce.Item.prototype.getVariantList = function() {
  return /** @type{!Array.<!proto.opencannabis.commerce.VariantSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.commerce.VariantSpec, 2));
};


/** @param {!Array.<!proto.opencannabis.commerce.VariantSpec>} value */
proto.opencannabis.commerce.Item.prototype.setVariantList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.commerce.VariantSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.commerce.VariantSpec}
 */
proto.opencannabis.commerce.Item.prototype.addVariant = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.commerce.VariantSpec, opt_index);
};


proto.opencannabis.commerce.Item.prototype.clearVariantList = function() {
  this.setVariantList([]);
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.opencannabis.commerce.Item.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.opencannabis.commerce.Item.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.opencannabis.commerce.Item.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.opencannabis.commerce.Item.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double cost = 5;
 * @return {number}
 */
proto.opencannabis.commerce.Item.prototype.getCost = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.opencannabis.commerce.Item.prototype.setCost = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.opencannabis.commerce.ProductVariant = {
  WEIGHT: 0,
  COLOR: 1,
  SIZE: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.commerce.ProductWeight = {
  NO_WEIGHT: 0,
  HALFGRAM: 1,
  GRAM: 2,
  EIGHTH: 3,
  QUARTER: 4,
  HALF: 5,
  OZ: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.temporal.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.temporal.Date.oneofGroups_);
};
goog.inherits(proto.opencannabis.temporal.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.temporal.Date.displayName = 'proto.opencannabis.temporal.Date';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.temporal.Date.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.opencannabis.temporal.Date.SpecCase = {
  SPEC_NOT_SET: 0,
  ISO8601: 1
};

/**
 * @return {proto.opencannabis.temporal.Date.SpecCase}
 */
proto.opencannabis.temporal.Date.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.temporal.Date.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.temporal.Date.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.temporal.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.temporal.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.temporal.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    iso8601: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.temporal.Date}
 */
proto.opencannabis.temporal.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.temporal.Date;
  return proto.opencannabis.temporal.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.temporal.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.temporal.Date}
 */
proto.opencannabis.temporal.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIso8601(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.temporal.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.temporal.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.temporal.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string iso8601 = 1;
 * @return {string}
 */
proto.opencannabis.temporal.Date.prototype.getIso8601 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.temporal.Date.prototype.setIso8601 = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Date.oneofGroups_[0], value);
};


proto.opencannabis.temporal.Date.prototype.clearIso8601 = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Date.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.temporal.Date.prototype.hasIso8601 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Point.displayName = 'proto.opencannabis.geo.Point';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    elevation: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    accuracy: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Point}
 */
proto.opencannabis.geo.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Point;
  return proto.opencannabis.geo.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Point}
 */
proto.opencannabis.geo.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElevation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccuracy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAccuracy();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.opencannabis.geo.Point.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.opencannabis.geo.Point.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.opencannabis.geo.Point.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.opencannabis.geo.Point.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double elevation = 3;
 * @return {number}
 */
proto.opencannabis.geo.Point.prototype.getElevation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.opencannabis.geo.Point.prototype.setElevation = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double accuracy = 4;
 * @return {number}
 */
proto.opencannabis.geo.Point.prototype.getAccuracy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.opencannabis.geo.Point.prototype.setAccuracy = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Address.displayName = 'proto.opencannabis.geo.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstLine: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondLine: jspb.Message.getFieldWithDefault(msg, 2, ""),
    city: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    zipcode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Address}
 */
proto.opencannabis.geo.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Address;
  return proto.opencannabis.geo.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Address}
 */
proto.opencannabis.geo.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstLine(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondLine(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipcode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstLine();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondLine();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getZipcode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string first_line = 1;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getFirstLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setFirstLine = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string second_line = 2;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getSecondLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setSecondLine = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string zipcode = 5;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getZipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setZipcode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.opencannabis.geo.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.opencannabis.geo.Address.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.DistanceValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.DistanceValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.DistanceValue.displayName = 'proto.opencannabis.geo.DistanceValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.DistanceValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.DistanceValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.DistanceValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.DistanceValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.DistanceValue}
 */
proto.opencannabis.geo.DistanceValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.DistanceValue;
  return proto.opencannabis.geo.DistanceValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.DistanceValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.DistanceValue}
 */
proto.opencannabis.geo.DistanceValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.geo.DistanceUnit} */ (reader.readEnum());
      msg.setUnit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.DistanceValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.DistanceValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.DistanceValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.DistanceValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional DistanceUnit unit = 1;
 * @return {!proto.opencannabis.geo.DistanceUnit}
 */
proto.opencannabis.geo.DistanceValue.prototype.getUnit = function() {
  return /** @type {!proto.opencannabis.geo.DistanceUnit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.geo.DistanceUnit} value */
proto.opencannabis.geo.DistanceValue.prototype.setUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double value = 3;
 * @return {number}
 */
proto.opencannabis.geo.DistanceValue.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.opencannabis.geo.DistanceValue.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.LocationAccuracy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.LocationAccuracy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.LocationAccuracy.displayName = 'proto.opencannabis.geo.LocationAccuracy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.LocationAccuracy.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.LocationAccuracy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.LocationAccuracy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.LocationAccuracy.toObject = function(includeInstance, msg) {
  var f, obj = {
    estimate: jspb.Message.getFieldWithDefault(msg, 1, false),
    value: (f = msg.getValue()) && proto.opencannabis.geo.DistanceValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.LocationAccuracy}
 */
proto.opencannabis.geo.LocationAccuracy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.LocationAccuracy;
  return proto.opencannabis.geo.LocationAccuracy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.LocationAccuracy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.LocationAccuracy}
 */
proto.opencannabis.geo.LocationAccuracy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEstimate(value);
      break;
    case 2:
      var value = new proto.opencannabis.geo.DistanceValue;
      reader.readMessage(value,proto.opencannabis.geo.DistanceValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.LocationAccuracy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.LocationAccuracy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.LocationAccuracy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.LocationAccuracy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEstimate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.geo.DistanceValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool estimate = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.geo.LocationAccuracy.prototype.getEstimate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.geo.LocationAccuracy.prototype.setEstimate = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional DistanceValue value = 2;
 * @return {?proto.opencannabis.geo.DistanceValue}
 */
proto.opencannabis.geo.LocationAccuracy.prototype.getValue = function() {
  return /** @type{?proto.opencannabis.geo.DistanceValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.DistanceValue, 2));
};


/** @param {?proto.opencannabis.geo.DistanceValue|undefined} value */
proto.opencannabis.geo.LocationAccuracy.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.geo.LocationAccuracy.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.LocationAccuracy.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Location.displayName = 'proto.opencannabis.geo.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.content.Name.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.opencannabis.geo.Address.toObject(includeInstance, f),
    point: (f = msg.getPoint()) && proto.opencannabis.geo.Point.toObject(includeInstance, f),
    accuracy: (f = msg.getAccuracy()) && proto.opencannabis.geo.LocationAccuracy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Location}
 */
proto.opencannabis.geo.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Location;
  return proto.opencannabis.geo.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Location}
 */
proto.opencannabis.geo.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Name;
      reader.readMessage(value,proto.opencannabis.content.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.geo.Address;
      reader.readMessage(value,proto.opencannabis.geo.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 3:
      var value = new proto.opencannabis.geo.Point;
      reader.readMessage(value,proto.opencannabis.geo.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 4:
      var value = new proto.opencannabis.geo.LocationAccuracy;
      reader.readMessage(value,proto.opencannabis.geo.LocationAccuracy.deserializeBinaryFromReader);
      msg.setAccuracy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Name.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.geo.Address.serializeBinaryToWriter
    );
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.geo.Point.serializeBinaryToWriter
    );
  }
  f = message.getAccuracy();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.geo.LocationAccuracy.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.content.Name name = 1;
 * @return {?proto.opencannabis.content.Name}
 */
proto.opencannabis.geo.Location.prototype.getName = function() {
  return /** @type{?proto.opencannabis.content.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Name, 1));
};


/** @param {?proto.opencannabis.content.Name|undefined} value */
proto.opencannabis.geo.Location.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.geo.Location.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Location.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address address = 2;
 * @return {?proto.opencannabis.geo.Address}
 */
proto.opencannabis.geo.Location.prototype.getAddress = function() {
  return /** @type{?proto.opencannabis.geo.Address} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Address, 2));
};


/** @param {?proto.opencannabis.geo.Address|undefined} value */
proto.opencannabis.geo.Location.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.geo.Location.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Location.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point point = 3;
 * @return {?proto.opencannabis.geo.Point}
 */
proto.opencannabis.geo.Location.prototype.getPoint = function() {
  return /** @type{?proto.opencannabis.geo.Point} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Point, 3));
};


/** @param {?proto.opencannabis.geo.Point|undefined} value */
proto.opencannabis.geo.Location.prototype.setPoint = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.geo.Location.prototype.clearPoint = function() {
  this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Location.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LocationAccuracy accuracy = 4;
 * @return {?proto.opencannabis.geo.LocationAccuracy}
 */
proto.opencannabis.geo.Location.prototype.getAccuracy = function() {
  return /** @type{?proto.opencannabis.geo.LocationAccuracy} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.LocationAccuracy, 4));
};


/** @param {?proto.opencannabis.geo.LocationAccuracy|undefined} value */
proto.opencannabis.geo.Location.prototype.setAccuracy = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.geo.Location.prototype.clearAccuracy = function() {
  this.setAccuracy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Location.prototype.hasAccuracy = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.geo.Distance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.geo.Distance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.geo.Distance.displayName = 'proto.opencannabis.geo.Distance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.geo.Distance.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.geo.Distance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.geo.Distance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Distance.toObject = function(includeInstance, msg) {
  var f, obj = {
    estimate: jspb.Message.getFieldWithDefault(msg, 1, false),
    accuracy: (f = msg.getAccuracy()) && proto.opencannabis.geo.LocationAccuracy.toObject(includeInstance, f),
    unit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    start: (f = msg.getStart()) && proto.opencannabis.geo.Location.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.opencannabis.geo.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.geo.Distance}
 */
proto.opencannabis.geo.Distance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.geo.Distance;
  return proto.opencannabis.geo.Distance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.geo.Distance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.geo.Distance}
 */
proto.opencannabis.geo.Distance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEstimate(value);
      break;
    case 2:
      var value = new proto.opencannabis.geo.LocationAccuracy;
      reader.readMessage(value,proto.opencannabis.geo.LocationAccuracy.deserializeBinaryFromReader);
      msg.setAccuracy(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.geo.DistanceUnit} */ (reader.readEnum());
      msg.setUnit(value);
      break;
    case 4:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 5:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.geo.Distance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.geo.Distance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.geo.Distance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.geo.Distance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEstimate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAccuracy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.geo.LocationAccuracy.serializeBinaryToWriter
    );
  }
  f = message.getUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool estimate = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.geo.Distance.prototype.getEstimate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.geo.Distance.prototype.setEstimate = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional LocationAccuracy accuracy = 2;
 * @return {?proto.opencannabis.geo.LocationAccuracy}
 */
proto.opencannabis.geo.Distance.prototype.getAccuracy = function() {
  return /** @type{?proto.opencannabis.geo.LocationAccuracy} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.LocationAccuracy, 2));
};


/** @param {?proto.opencannabis.geo.LocationAccuracy|undefined} value */
proto.opencannabis.geo.Distance.prototype.setAccuracy = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.geo.Distance.prototype.clearAccuracy = function() {
  this.setAccuracy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Distance.prototype.hasAccuracy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DistanceUnit unit = 3;
 * @return {!proto.opencannabis.geo.DistanceUnit}
 */
proto.opencannabis.geo.Distance.prototype.getUnit = function() {
  return /** @type {!proto.opencannabis.geo.DistanceUnit} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.geo.DistanceUnit} value */
proto.opencannabis.geo.Distance.prototype.setUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Location start = 4;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.opencannabis.geo.Distance.prototype.getStart = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 4));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.opencannabis.geo.Distance.prototype.setStart = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.geo.Distance.prototype.clearStart = function() {
  this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Distance.prototype.hasStart = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Location end = 5;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.opencannabis.geo.Distance.prototype.getEnd = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 5));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.opencannabis.geo.Distance.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.geo.Distance.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.geo.Distance.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.geo.DistanceUnit = {
  METERS: 0,
  INCHES: 1,
  FEET: 2,
  MILLIMETERS: 3,
  CENTIMETERS: 4,
  KILOMETERS: 5,
  MILES: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.contact.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.contact.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.contact.PhoneNumber.displayName = 'proto.opencannabis.contact.PhoneNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.contact.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.contact.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.contact.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    e164: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validated: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.contact.PhoneNumber}
 */
proto.opencannabis.contact.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.contact.PhoneNumber;
  return proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.contact.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.contact.PhoneNumber}
 */
proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setE164(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.contact.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.contact.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getE164();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string e164 = 1;
 * @return {string}
 */
proto.opencannabis.contact.PhoneNumber.prototype.getE164 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.contact.PhoneNumber.prototype.setE164 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool validated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.contact.PhoneNumber.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.contact.PhoneNumber.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.contact.EmailAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.contact.EmailAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.contact.EmailAddress.displayName = 'proto.opencannabis.contact.EmailAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.contact.EmailAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.contact.EmailAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.contact.EmailAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.EmailAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validated: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.contact.EmailAddress}
 */
proto.opencannabis.contact.EmailAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.contact.EmailAddress;
  return proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.contact.EmailAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.contact.EmailAddress}
 */
proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.contact.EmailAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.contact.EmailAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.opencannabis.contact.EmailAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.contact.EmailAddress.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool validated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.contact.EmailAddress.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.contact.EmailAddress.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.contact.Website = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.contact.Website, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.contact.Website.displayName = 'proto.opencannabis.contact.Website';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.contact.Website.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.contact.Website.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.contact.Website} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.Website.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: msg.getIcon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.contact.Website}
 */
proto.opencannabis.contact.Website.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.contact.Website;
  return proto.opencannabis.contact.Website.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.contact.Website} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.contact.Website}
 */
proto.opencannabis.contact.Website.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.contact.Website.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.contact.Website.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.contact.Website} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.Website.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.opencannabis.contact.Website.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.contact.Website.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.opencannabis.contact.Website.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.contact.Website.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes icon = 3;
 * @return {string}
 */
proto.opencannabis.contact.Website.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes icon = 3;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.opencannabis.contact.Website.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes icon = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.opencannabis.contact.Website.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/** @param {!(string|Uint8Array)} value */
proto.opencannabis.contact.Website.prototype.setIcon = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.contact.ContactInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.contact.ContactInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.contact.ContactInfo.displayName = 'proto.opencannabis.contact.ContactInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.contact.ContactInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.contact.ContactInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.contact.ContactInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.ContactInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.opencannabis.geo.Location.toObject(includeInstance, f),
    phone: (f = msg.getPhone()) && proto.opencannabis.contact.PhoneNumber.toObject(includeInstance, f),
    email: (f = msg.getEmail()) && proto.opencannabis.contact.EmailAddress.toObject(includeInstance, f),
    website: (f = msg.getWebsite()) && proto.opencannabis.contact.Website.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.contact.ContactInfo}
 */
proto.opencannabis.contact.ContactInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.contact.ContactInfo;
  return proto.opencannabis.contact.ContactInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.contact.ContactInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.contact.ContactInfo}
 */
proto.opencannabis.contact.ContactInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.opencannabis.contact.PhoneNumber;
      reader.readMessage(value,proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    case 3:
      var value = new proto.opencannabis.contact.EmailAddress;
      reader.readMessage(value,proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 4:
      var value = new proto.opencannabis.contact.Website;
      reader.readMessage(value,proto.opencannabis.contact.Website.deserializeBinaryFromReader);
      msg.setWebsite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.contact.ContactInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.contact.ContactInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.contact.ContactInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.contact.ContactInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter
    );
  }
  f = message.getWebsite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.contact.Website.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.geo.Location location = 1;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.opencannabis.contact.ContactInfo.prototype.getLocation = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 1));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.opencannabis.contact.ContactInfo.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.contact.ContactInfo.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.contact.ContactInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhoneNumber phone = 2;
 * @return {?proto.opencannabis.contact.PhoneNumber}
 */
proto.opencannabis.contact.ContactInfo.prototype.getPhone = function() {
  return /** @type{?proto.opencannabis.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.PhoneNumber, 2));
};


/** @param {?proto.opencannabis.contact.PhoneNumber|undefined} value */
proto.opencannabis.contact.ContactInfo.prototype.setPhone = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.contact.ContactInfo.prototype.clearPhone = function() {
  this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.contact.ContactInfo.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EmailAddress email = 3;
 * @return {?proto.opencannabis.contact.EmailAddress}
 */
proto.opencannabis.contact.ContactInfo.prototype.getEmail = function() {
  return /** @type{?proto.opencannabis.contact.EmailAddress} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.EmailAddress, 3));
};


/** @param {?proto.opencannabis.contact.EmailAddress|undefined} value */
proto.opencannabis.contact.ContactInfo.prototype.setEmail = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.contact.ContactInfo.prototype.clearEmail = function() {
  this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.contact.ContactInfo.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Website website = 4;
 * @return {?proto.opencannabis.contact.Website}
 */
proto.opencannabis.contact.ContactInfo.prototype.getWebsite = function() {
  return /** @type{?proto.opencannabis.contact.Website} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.Website, 4));
};


/** @param {?proto.opencannabis.contact.Website|undefined} value */
proto.opencannabis.contact.ContactInfo.prototype.setWebsite = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.contact.ContactInfo.prototype.clearWebsite = function() {
  this.setWebsite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.contact.ContactInfo.prototype.hasWebsite = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.person.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.person.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.person.Name.displayName = 'proto.opencannabis.person.Name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.person.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.person.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.person.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.person.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    prefix: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postfix: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.person.Name}
 */
proto.opencannabis.person.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.person.Name;
  return proto.opencannabis.person.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.person.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.person.Name}
 */
proto.opencannabis.person.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostfix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.person.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.person.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.person.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.person.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMiddleName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostfix();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string full_name = 1;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setFullName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setFirstName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setLastName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string middle_name = 4;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setMiddleName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string prefix = 5;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string postfix = 6;
 * @return {string}
 */
proto.opencannabis.person.Name.prototype.getPostfix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.opencannabis.person.Name.prototype.setPostfix = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.person.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.person.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.person.Person.displayName = 'proto.opencannabis.person.Person';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.person.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.person.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.person.Person} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.person.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.person.Name.toObject(includeInstance, f),
    legalName: (f = msg.getLegalName()) && proto.opencannabis.person.Name.toObject(includeInstance, f),
    alternateName: (f = msg.getAlternateName()) && proto.opencannabis.person.Name.toObject(includeInstance, f),
    contact: (f = msg.getContact()) && proto.opencannabis.contact.ContactInfo.toObject(includeInstance, f),
    dateOfBirth: (f = msg.getDateOfBirth()) && proto.opencannabis.temporal.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.person.Person}
 */
proto.opencannabis.person.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.person.Person;
  return proto.opencannabis.person.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.person.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.person.Person}
 */
proto.opencannabis.person.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.person.Name;
      reader.readMessage(value,proto.opencannabis.person.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.person.Name;
      reader.readMessage(value,proto.opencannabis.person.Name.deserializeBinaryFromReader);
      msg.setLegalName(value);
      break;
    case 3:
      var value = new proto.opencannabis.person.Name;
      reader.readMessage(value,proto.opencannabis.person.Name.deserializeBinaryFromReader);
      msg.setAlternateName(value);
      break;
    case 4:
      var value = new proto.opencannabis.contact.ContactInfo;
      reader.readMessage(value,proto.opencannabis.contact.ContactInfo.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 5:
      var value = new proto.opencannabis.temporal.Date;
      reader.readMessage(value,proto.opencannabis.temporal.Date.deserializeBinaryFromReader);
      msg.setDateOfBirth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.person.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.person.Person.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.person.Person} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.person.Person.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.person.Name.serializeBinaryToWriter
    );
  }
  f = message.getLegalName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.person.Name.serializeBinaryToWriter
    );
  }
  f = message.getAlternateName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.person.Name.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.contact.ContactInfo.serializeBinaryToWriter
    );
  }
  f = message.getDateOfBirth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.temporal.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.opencannabis.person.Name}
 */
proto.opencannabis.person.Person.prototype.getName = function() {
  return /** @type{?proto.opencannabis.person.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Name, 1));
};


/** @param {?proto.opencannabis.person.Name|undefined} value */
proto.opencannabis.person.Person.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.person.Person.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.person.Person.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Name legal_name = 2;
 * @return {?proto.opencannabis.person.Name}
 */
proto.opencannabis.person.Person.prototype.getLegalName = function() {
  return /** @type{?proto.opencannabis.person.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Name, 2));
};


/** @param {?proto.opencannabis.person.Name|undefined} value */
proto.opencannabis.person.Person.prototype.setLegalName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.person.Person.prototype.clearLegalName = function() {
  this.setLegalName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.person.Person.prototype.hasLegalName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Name alternate_name = 3;
 * @return {?proto.opencannabis.person.Name}
 */
proto.opencannabis.person.Person.prototype.getAlternateName = function() {
  return /** @type{?proto.opencannabis.person.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Name, 3));
};


/** @param {?proto.opencannabis.person.Name|undefined} value */
proto.opencannabis.person.Person.prototype.setAlternateName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.person.Person.prototype.clearAlternateName = function() {
  this.setAlternateName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.person.Person.prototype.hasAlternateName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.contact.ContactInfo contact = 4;
 * @return {?proto.opencannabis.contact.ContactInfo}
 */
proto.opencannabis.person.Person.prototype.getContact = function() {
  return /** @type{?proto.opencannabis.contact.ContactInfo} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.ContactInfo, 4));
};


/** @param {?proto.opencannabis.contact.ContactInfo|undefined} value */
proto.opencannabis.person.Person.prototype.setContact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.person.Person.prototype.clearContact = function() {
  this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.person.Person.prototype.hasContact = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional opencannabis.temporal.Date date_of_birth = 5;
 * @return {?proto.opencannabis.temporal.Date}
 */
proto.opencannabis.person.Person.prototype.getDateOfBirth = function() {
  return /** @type{?proto.opencannabis.temporal.Date} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Date, 5));
};


/** @param {?proto.opencannabis.temporal.Date|undefined} value */
proto.opencannabis.person.Person.prototype.setDateOfBirth = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.person.Person.prototype.clearDateOfBirth = function() {
  this.setDateOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.person.Person.prototype.hasDateOfBirth = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.Customer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.Customer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.Customer.displayName = 'proto.opencannabis.commerce.Customer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.Customer.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.Customer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.Customer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Customer.toObject = function(includeInstance, msg) {
  var f, obj = {
    person: (f = msg.getPerson()) && proto.opencannabis.person.Person.toObject(includeInstance, f),
    foreignId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.Customer}
 */
proto.opencannabis.commerce.Customer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.Customer;
  return proto.opencannabis.commerce.Customer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.Customer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.Customer}
 */
proto.opencannabis.commerce.Customer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.person.Person;
      reader.readMessage(value,proto.opencannabis.person.Person.deserializeBinaryFromReader);
      msg.setPerson(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeignId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.Customer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.Customer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.Customer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Customer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerson();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.person.Person.serializeBinaryToWriter
    );
  }
  f = message.getForeignId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opencannabis.person.Person person = 1;
 * @return {?proto.opencannabis.person.Person}
 */
proto.opencannabis.commerce.Customer.prototype.getPerson = function() {
  return /** @type{?proto.opencannabis.person.Person} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Person, 1));
};


/** @param {?proto.opencannabis.person.Person|undefined} value */
proto.opencannabis.commerce.Customer.prototype.setPerson = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.commerce.Customer.prototype.clearPerson = function() {
  this.setPerson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Customer.prototype.hasPerson = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string foreign_id = 2;
 * @return {string}
 */
proto.opencannabis.commerce.Customer.prototype.getForeignId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Customer.prototype.setForeignId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_key = 3;
 * @return {string}
 */
proto.opencannabis.commerce.Customer.prototype.getUserKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Customer.prototype.setUserKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.temporal.Instant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.temporal.Instant.oneofGroups_);
};
goog.inherits(proto.opencannabis.temporal.Instant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.temporal.Instant.displayName = 'proto.opencannabis.temporal.Instant';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.temporal.Instant.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.opencannabis.temporal.Instant.SpecCase = {
  SPEC_NOT_SET: 0,
  ISO8601: 1,
  TIMESTAMP: 2
};

/**
 * @return {proto.opencannabis.temporal.Instant.SpecCase}
 */
proto.opencannabis.temporal.Instant.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.temporal.Instant.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.temporal.Instant.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.temporal.Instant.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.temporal.Instant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.temporal.Instant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Instant.toObject = function(includeInstance, msg) {
  var f, obj = {
    iso8601: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.temporal.Instant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.temporal.Instant;
  return proto.opencannabis.temporal.Instant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.temporal.Instant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.temporal.Instant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIso8601(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.temporal.Instant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.temporal.Instant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.temporal.Instant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Instant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string iso8601 = 1;
 * @return {string}
 */
proto.opencannabis.temporal.Instant.prototype.getIso8601 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.temporal.Instant.prototype.setIso8601 = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Instant.oneofGroups_[0], value);
};


proto.opencannabis.temporal.Instant.prototype.clearIso8601 = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Instant.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.temporal.Instant.prototype.hasIso8601 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.opencannabis.temporal.Instant.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.opencannabis.temporal.Instant.prototype.setTimestamp = function(value) {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.temporal.Instant.oneofGroups_[0], value);
};


proto.opencannabis.temporal.Instant.prototype.clearTimestamp = function() {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.temporal.Instant.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.temporal.Instant.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.DiscountSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.commerce.DiscountSpec.oneofGroups_);
};
goog.inherits(proto.opencannabis.commerce.DiscountSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.DiscountSpec.displayName = 'proto.opencannabis.commerce.DiscountSpec';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.commerce.DiscountSpec.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.opencannabis.commerce.DiscountSpec.RateCase = {
  RATE_NOT_SET: 0,
  PERCENTAGE: 3,
  STATIC_VALUE: 4
};

/**
 * @return {proto.opencannabis.commerce.DiscountSpec.RateCase}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.getRateCase = function() {
  return /** @type {proto.opencannabis.commerce.DiscountSpec.RateCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.commerce.DiscountSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.DiscountSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.DiscountSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.DiscountSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    basis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    staticValue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.DiscountSpec}
 */
proto.opencannabis.commerce.DiscountSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.DiscountSpec;
  return proto.opencannabis.commerce.DiscountSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.DiscountSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.DiscountSpec}
 */
proto.opencannabis.commerce.DiscountSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.commerce.DiscountType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.commerce.DiscountBasis} */ (reader.readEnum());
      msg.setBasis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.DiscountSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.DiscountSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.DiscountSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBasis();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional DiscountType type = 1;
 * @return {!proto.opencannabis.commerce.DiscountType}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.getType = function() {
  return /** @type {!proto.opencannabis.commerce.DiscountType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.commerce.DiscountType} value */
proto.opencannabis.commerce.DiscountSpec.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DiscountBasis basis = 2;
 * @return {!proto.opencannabis.commerce.DiscountBasis}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.getBasis = function() {
  return /** @type {!proto.opencannabis.commerce.DiscountBasis} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.commerce.DiscountBasis} value */
proto.opencannabis.commerce.DiscountSpec.prototype.setBasis = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double percentage = 3;
 * @return {number}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.opencannabis.commerce.DiscountSpec.prototype.setPercentage = function(value) {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.commerce.DiscountSpec.oneofGroups_[0], value);
};


proto.opencannabis.commerce.DiscountSpec.prototype.clearPercentage = function() {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.commerce.DiscountSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.hasPercentage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double static_value = 4;
 * @return {number}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.getStaticValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.opencannabis.commerce.DiscountSpec.prototype.setStaticValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.commerce.DiscountSpec.oneofGroups_[0], value);
};


proto.opencannabis.commerce.DiscountSpec.prototype.clearStaticValue = function() {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.commerce.DiscountSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.DiscountSpec.prototype.hasStaticValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.Discount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.Discount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.Discount.displayName = 'proto.opencannabis.commerce.Discount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.Discount.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.Discount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.Discount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Discount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spec: (f = msg.getSpec()) && proto.opencannabis.commerce.DiscountSpec.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    label: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    modifiedAt: (f = msg.getModifiedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.Discount}
 */
proto.opencannabis.commerce.Discount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.Discount;
  return proto.opencannabis.commerce.Discount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.Discount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.Discount}
 */
proto.opencannabis.commerce.Discount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.opencannabis.commerce.DiscountSpec;
      reader.readMessage(value,proto.opencannabis.commerce.DiscountSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setModifiedAt(value);
      break;
    case 6:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.Discount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.Discount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.Discount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Discount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.commerce.DiscountSpec.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getModifiedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.commerce.Discount.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Discount.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DiscountSpec spec = 2;
 * @return {?proto.opencannabis.commerce.DiscountSpec}
 */
proto.opencannabis.commerce.Discount.prototype.getSpec = function() {
  return /** @type{?proto.opencannabis.commerce.DiscountSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.DiscountSpec, 2));
};


/** @param {?proto.opencannabis.commerce.DiscountSpec|undefined} value */
proto.opencannabis.commerce.Discount.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.commerce.Discount.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Discount.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.opencannabis.commerce.Discount.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Discount.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string label = 4;
 * @return {string}
 */
proto.opencannabis.commerce.Discount.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Discount.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.opencannabis.commerce.Discount.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Discount.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional opencannabis.temporal.Instant modified_at = 7;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.commerce.Discount.prototype.getModifiedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 7));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.commerce.Discount.prototype.setModifiedAt = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.opencannabis.commerce.Discount.prototype.clearModifiedAt = function() {
  this.setModifiedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Discount.prototype.hasModifiedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional opencannabis.temporal.Instant created_at = 6;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.commerce.Discount.prototype.getCreatedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 6));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.commerce.Discount.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.commerce.Discount.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Discount.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.commerce.DiscountType = {
  CUSTOM: 0,
  STATUTORY: 1,
  COMMERCIAL: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.commerce.DiscountBasis = {
  ITEM: 0,
  ORDER_SUBTOTAL: 1,
  ORDER_TOTAL: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.device.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.device.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.device.Device.displayName = 'proto.opencannabis.device.Device';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.device.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.device.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.device.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flags: (f = msg.getFlags()) && proto.opencannabis.device.DeviceFlags.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.opencannabis.device.DeviceCredentials.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.device.Device}
 */
proto.opencannabis.device.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.device.Device;
  return proto.opencannabis.device.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.device.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.device.Device}
 */
proto.opencannabis.device.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.device.DeviceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.opencannabis.device.DeviceFlags;
      reader.readMessage(value,proto.opencannabis.device.DeviceFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 4:
      var value = new proto.opencannabis.device.DeviceCredentials;
      reader.readMessage(value,proto.opencannabis.device.DeviceCredentials.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.device.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.device.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.device.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.device.DeviceFlags.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.device.DeviceCredentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.opencannabis.device.Device.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.device.Device.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DeviceType type = 2;
 * @return {!proto.opencannabis.device.DeviceType}
 */
proto.opencannabis.device.Device.prototype.getType = function() {
  return /** @type {!proto.opencannabis.device.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.device.DeviceType} value */
proto.opencannabis.device.Device.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DeviceFlags flags = 3;
 * @return {?proto.opencannabis.device.DeviceFlags}
 */
proto.opencannabis.device.Device.prototype.getFlags = function() {
  return /** @type{?proto.opencannabis.device.DeviceFlags} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.device.DeviceFlags, 3));
};


/** @param {?proto.opencannabis.device.DeviceFlags|undefined} value */
proto.opencannabis.device.Device.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.device.Device.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.device.Device.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeviceCredentials key = 4;
 * @return {?proto.opencannabis.device.DeviceCredentials}
 */
proto.opencannabis.device.Device.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.device.DeviceCredentials} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.device.DeviceCredentials, 4));
};


/** @param {?proto.opencannabis.device.DeviceCredentials|undefined} value */
proto.opencannabis.device.Device.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.device.Device.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.device.Device.prototype.hasKey = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.device.DeviceFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.device.DeviceFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.device.DeviceFlags.displayName = 'proto.opencannabis.device.DeviceFlags';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.device.DeviceFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.device.DeviceFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.device.DeviceFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.DeviceFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    ephemeral: jspb.Message.getFieldWithDefault(msg, 1, false),
    managed: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.device.DeviceFlags}
 */
proto.opencannabis.device.DeviceFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.device.DeviceFlags;
  return proto.opencannabis.device.DeviceFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.device.DeviceFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.device.DeviceFlags}
 */
proto.opencannabis.device.DeviceFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEphemeral(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setManaged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.device.DeviceFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.device.DeviceFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.device.DeviceFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.DeviceFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEphemeral();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getManaged();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool ephemeral = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.device.DeviceFlags.prototype.getEphemeral = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.device.DeviceFlags.prototype.setEphemeral = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool managed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.device.DeviceFlags.prototype.getManaged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.device.DeviceFlags.prototype.setManaged = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.device.DeviceCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.device.DeviceCredentials.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.device.DeviceCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.device.DeviceCredentials.displayName = 'proto.opencannabis.device.DeviceCredentials';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.device.DeviceCredentials.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.device.DeviceCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.device.DeviceCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.device.DeviceCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.DeviceCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    privateKey: msg.getPrivateKey_asB64(),
    sha256: jspb.Message.getFieldWithDefault(msg, 3, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 4, ""),
    authoritiesList: msg.getAuthoritiesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.device.DeviceCredentials}
 */
proto.opencannabis.device.DeviceCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.device.DeviceCredentials;
  return proto.opencannabis.device.DeviceCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.device.DeviceCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.device.DeviceCredentials}
 */
proto.opencannabis.device.DeviceCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivateKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha256(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAuthorities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.device.DeviceCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.device.DeviceCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.device.DeviceCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.device.DeviceCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSha256();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthoritiesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.opencannabis.device.DeviceCredentials.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes private_key = 2;
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes private_key = 2;
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivateKey()));
};


/**
 * optional bytes private_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {!Uint8Array}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivateKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.opencannabis.device.DeviceCredentials.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string sha256 = 3;
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getSha256 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.device.DeviceCredentials.prototype.setSha256 = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string identity = 4;
 * @return {string}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.device.DeviceCredentials.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated bytes authorities = 5;
 * @return {!Array.<string>}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getAuthoritiesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes authorities = 5;
 * This is a type-conversion wrapper around `getAuthoritiesList()`
 * @return {!Array.<string>}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getAuthoritiesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAuthoritiesList()));
};


/**
 * repeated bytes authorities = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthoritiesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.opencannabis.device.DeviceCredentials.prototype.getAuthoritiesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAuthoritiesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.opencannabis.device.DeviceCredentials.prototype.setAuthoritiesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.opencannabis.device.DeviceCredentials.prototype.addAuthorities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.opencannabis.device.DeviceCredentials.prototype.clearAuthoritiesList = function() {
  this.setAuthoritiesList([]);
};


/**
 * @enum {number}
 */
proto.opencannabis.device.DeviceType = {
  UNKNOWN_DEVICE_TYPE: 0,
  DESKTOP: 1,
  PHONE: 2,
  TABLET: 3,
  TV: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.MediaKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.media.MediaKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.MediaKey.displayName = 'proto.opencannabis.media.MediaKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.MediaKey.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.MediaKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.MediaKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.MediaKey}
 */
proto.opencannabis.media.MediaKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.MediaKey;
  return proto.opencannabis.media.MediaKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.MediaKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.MediaKey}
 */
proto.opencannabis.media.MediaKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.MediaKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.MediaKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.MediaKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.media.MediaKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.media.MediaKey.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.MediaType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.media.MediaType.oneofGroups_);
};
goog.inherits(proto.opencannabis.media.MediaType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.MediaType.displayName = 'proto.opencannabis.media.MediaType';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.media.MediaType.oneofGroups_ = [[101,201,301]];

/**
 * @enum {number}
 */
proto.opencannabis.media.MediaType.ContentCase = {
  CONTENT_NOT_SET: 0,
  IMAGE_TYPE: 101,
  DOCUMENT_TYPE: 201,
  VIDEO_TYPE: 301
};

/**
 * @return {proto.opencannabis.media.MediaType.ContentCase}
 */
proto.opencannabis.media.MediaType.prototype.getContentCase = function() {
  return /** @type {proto.opencannabis.media.MediaType.ContentCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.media.MediaType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.MediaType.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.MediaType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.MediaType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    imageType: (f = msg.getImageType()) && proto.opencannabis.media.ImageType.toObject(includeInstance, f),
    documentType: (f = msg.getDocumentType()) && proto.opencannabis.media.DocumentType.toObject(includeInstance, f),
    videoType: (f = msg.getVideoType()) && proto.opencannabis.media.VideoType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.MediaType}
 */
proto.opencannabis.media.MediaType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.MediaType;
  return proto.opencannabis.media.MediaType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.MediaType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.MediaType}
 */
proto.opencannabis.media.MediaType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.media.MediaType.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 101:
      var value = new proto.opencannabis.media.ImageType;
      reader.readMessage(value,proto.opencannabis.media.ImageType.deserializeBinaryFromReader);
      msg.setImageType(value);
      break;
    case 201:
      var value = new proto.opencannabis.media.DocumentType;
      reader.readMessage(value,proto.opencannabis.media.DocumentType.deserializeBinaryFromReader);
      msg.setDocumentType(value);
      break;
    case 301:
      var value = new proto.opencannabis.media.VideoType;
      reader.readMessage(value,proto.opencannabis.media.VideoType.deserializeBinaryFromReader);
      msg.setVideoType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.MediaType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.MediaType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.MediaType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImageType();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.opencannabis.media.ImageType.serializeBinaryToWriter
    );
  }
  f = message.getDocumentType();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.opencannabis.media.DocumentType.serializeBinaryToWriter
    );
  }
  f = message.getVideoType();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.opencannabis.media.VideoType.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.media.MediaType.Kind = {
  LINK: 0,
  IMAGE: 1,
  DOCUMENT: 2,
  VIDEO: 3
};

/**
 * optional Kind kind = 1;
 * @return {!proto.opencannabis.media.MediaType.Kind}
 */
proto.opencannabis.media.MediaType.prototype.getKind = function() {
  return /** @type {!proto.opencannabis.media.MediaType.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.media.MediaType.Kind} value */
proto.opencannabis.media.MediaType.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ImageType image_type = 101;
 * @return {?proto.opencannabis.media.ImageType}
 */
proto.opencannabis.media.MediaType.prototype.getImageType = function() {
  return /** @type{?proto.opencannabis.media.ImageType} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.ImageType, 101));
};


/** @param {?proto.opencannabis.media.ImageType|undefined} value */
proto.opencannabis.media.MediaType.prototype.setImageType = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.opencannabis.media.MediaType.oneofGroups_[0], value);
};


proto.opencannabis.media.MediaType.prototype.clearImageType = function() {
  this.setImageType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.media.MediaType.prototype.hasImageType = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional DocumentType document_type = 201;
 * @return {?proto.opencannabis.media.DocumentType}
 */
proto.opencannabis.media.MediaType.prototype.getDocumentType = function() {
  return /** @type{?proto.opencannabis.media.DocumentType} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.DocumentType, 201));
};


/** @param {?proto.opencannabis.media.DocumentType|undefined} value */
proto.opencannabis.media.MediaType.prototype.setDocumentType = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.opencannabis.media.MediaType.oneofGroups_[0], value);
};


proto.opencannabis.media.MediaType.prototype.clearDocumentType = function() {
  this.setDocumentType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.media.MediaType.prototype.hasDocumentType = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional VideoType video_type = 301;
 * @return {?proto.opencannabis.media.VideoType}
 */
proto.opencannabis.media.MediaType.prototype.getVideoType = function() {
  return /** @type{?proto.opencannabis.media.VideoType} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.VideoType, 301));
};


/** @param {?proto.opencannabis.media.VideoType|undefined} value */
proto.opencannabis.media.MediaType.prototype.setVideoType = function(value) {
  jspb.Message.setOneofWrapperField(this, 301, proto.opencannabis.media.MediaType.oneofGroups_[0], value);
};


proto.opencannabis.media.MediaType.prototype.clearVideoType = function() {
  this.setVideoType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.media.MediaType.prototype.hasVideoType = function() {
  return jspb.Message.getField(this, 301) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.ImageType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.media.ImageType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.ImageType.displayName = 'proto.opencannabis.media.ImageType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.ImageType.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.ImageType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.ImageType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.ImageType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.ImageType}
 */
proto.opencannabis.media.ImageType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.ImageType;
  return proto.opencannabis.media.ImageType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.ImageType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.ImageType}
 */
proto.opencannabis.media.ImageType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.media.ImageType.ImageKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.ImageType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.ImageType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.ImageType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.ImageType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.media.ImageType.ImageKind = {
  PNG: 0,
  JPG: 1,
  GIF: 2,
  SVG: 3,
  WEBP: 4
};

/**
 * optional ImageKind kind = 1;
 * @return {!proto.opencannabis.media.ImageType.ImageKind}
 */
proto.opencannabis.media.ImageType.prototype.getKind = function() {
  return /** @type {!proto.opencannabis.media.ImageType.ImageKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.media.ImageType.ImageKind} value */
proto.opencannabis.media.ImageType.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.DocumentType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.media.DocumentType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.DocumentType.displayName = 'proto.opencannabis.media.DocumentType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.DocumentType.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.DocumentType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.DocumentType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.DocumentType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compressed: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.DocumentType}
 */
proto.opencannabis.media.DocumentType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.DocumentType;
  return proto.opencannabis.media.DocumentType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.DocumentType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.DocumentType}
 */
proto.opencannabis.media.DocumentType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.media.DocumentType.DocumentKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.DocumentType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.DocumentType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.DocumentType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.DocumentType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCompressed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.media.DocumentType.DocumentKind = {
  TXT: 0,
  HTML: 1,
  PDF: 2,
  MARKDOWN: 3
};

/**
 * optional DocumentKind kind = 1;
 * @return {!proto.opencannabis.media.DocumentType.DocumentKind}
 */
proto.opencannabis.media.DocumentType.prototype.getKind = function() {
  return /** @type {!proto.opencannabis.media.DocumentType.DocumentKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.media.DocumentType.DocumentKind} value */
proto.opencannabis.media.DocumentType.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool compressed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.media.DocumentType.prototype.getCompressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.media.DocumentType.prototype.setCompressed = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.VideoType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.media.VideoType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.VideoType.displayName = 'proto.opencannabis.media.VideoType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.VideoType.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.VideoType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.VideoType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.VideoType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.VideoType}
 */
proto.opencannabis.media.VideoType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.VideoType;
  return proto.opencannabis.media.VideoType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.VideoType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.VideoType}
 */
proto.opencannabis.media.VideoType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.media.VideoType.VideoKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.VideoType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.VideoType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.VideoType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.VideoType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.media.VideoType.VideoKind = {
  MP4: 0,
  FLV: 1,
  HLS: 2
};

/**
 * optional VideoKind kind = 1;
 * @return {!proto.opencannabis.media.VideoType.VideoKind}
 */
proto.opencannabis.media.VideoType.prototype.getKind = function() {
  return /** @type {!proto.opencannabis.media.VideoType.VideoKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.media.VideoType.VideoKind} value */
proto.opencannabis.media.VideoType.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.media.MediaItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.media.MediaItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.media.MediaItem.displayName = 'proto.opencannabis.media.MediaItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.media.MediaItem.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.media.MediaItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.media.MediaItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.media.MediaKey.toObject(includeInstance, f),
    type: (f = msg.getType()) && proto.opencannabis.media.MediaType.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.media.MediaItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.media.MediaItem;
  return proto.opencannabis.media.MediaItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.media.MediaItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.media.MediaItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.media.MediaKey;
      reader.readMessage(value,proto.opencannabis.media.MediaKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.opencannabis.media.MediaType;
      reader.readMessage(value,proto.opencannabis.media.MediaType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.media.MediaItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.media.MediaItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.media.MediaItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.media.MediaItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.media.MediaKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.media.MediaType.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional MediaKey key = 1;
 * @return {?proto.opencannabis.media.MediaKey}
 */
proto.opencannabis.media.MediaItem.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.media.MediaKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaKey, 1));
};


/** @param {?proto.opencannabis.media.MediaKey|undefined} value */
proto.opencannabis.media.MediaItem.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.media.MediaItem.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.media.MediaItem.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MediaType type = 2;
 * @return {?proto.opencannabis.media.MediaType}
 */
proto.opencannabis.media.MediaItem.prototype.getType = function() {
  return /** @type{?proto.opencannabis.media.MediaType} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaType, 2));
};


/** @param {?proto.opencannabis.media.MediaType|undefined} value */
proto.opencannabis.media.MediaItem.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.media.MediaItem.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.media.MediaItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.opencannabis.media.MediaItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.media.MediaItem.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string uri = 4;
 * @return {string}
 */
proto.opencannabis.media.MediaItem.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.media.MediaItem.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerKey.displayName = 'proto.bloombox.schema.partner.PartnerKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerKey.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerKey}
 */
proto.bloombox.schema.partner.PartnerKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerKey;
  return proto.bloombox.schema.partner.PartnerKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerKey}
 */
proto.bloombox.schema.partner.PartnerKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerKey.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerKey.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.Partner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.Partner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.Partner.displayName = 'proto.bloombox.schema.partner.Partner';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.Partner.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.Partner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.Partner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.Partner.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    flags: (f = msg.getFlags()) && proto.bloombox.schema.partner.PartnerFlags.toObject(includeInstance, f),
    legalName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contact: (f = msg.getContact()) && proto.opencannabis.contact.ContactInfo.toObject(includeInstance, f),
    branding: (f = msg.getBranding()) && proto.opencannabis.media.MediaItem.toObject(includeInstance, f),
    channel: jspb.Message.getFieldWithDefault(msg, 7, 0),
    created: (f = msg.getCreated()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    modified: (f = msg.getModified()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.Partner}
 */
proto.bloombox.schema.partner.Partner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.Partner;
  return proto.bloombox.schema.partner.Partner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.Partner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.Partner}
 */
proto.bloombox.schema.partner.Partner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.PartnerFlags;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalName(value);
      break;
    case 5:
      var value = new proto.opencannabis.contact.ContactInfo;
      reader.readMessage(value,proto.opencannabis.contact.ContactInfo.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 6:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.setBranding(value);
      break;
    case 7:
      var value = /** @type {!proto.bloombox.schema.partner.PartnerChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 100:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 101:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.Partner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.Partner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.Partner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.Partner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.PartnerFlags.serializeBinaryToWriter
    );
  }
  f = message.getLegalName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.contact.ContactInfo.serializeBinaryToWriter
    );
  }
  f = message.getBranding();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getModified();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.Partner.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.Partner.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.Partner.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.Partner.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PartnerFlags flags = 3;
 * @return {?proto.bloombox.schema.partner.PartnerFlags}
 */
proto.bloombox.schema.partner.Partner.prototype.getFlags = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerFlags} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerFlags, 3));
};


/** @param {?proto.bloombox.schema.partner.PartnerFlags|undefined} value */
proto.bloombox.schema.partner.Partner.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.Partner.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.Partner.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string legal_name = 4;
 * @return {string}
 */
proto.bloombox.schema.partner.Partner.prototype.getLegalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.Partner.prototype.setLegalName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional opencannabis.contact.ContactInfo contact = 5;
 * @return {?proto.opencannabis.contact.ContactInfo}
 */
proto.bloombox.schema.partner.Partner.prototype.getContact = function() {
  return /** @type{?proto.opencannabis.contact.ContactInfo} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.ContactInfo, 5));
};


/** @param {?proto.opencannabis.contact.ContactInfo|undefined} value */
proto.bloombox.schema.partner.Partner.prototype.setContact = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.Partner.prototype.clearContact = function() {
  this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.Partner.prototype.hasContact = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.media.MediaItem branding = 6;
 * @return {?proto.opencannabis.media.MediaItem}
 */
proto.bloombox.schema.partner.Partner.prototype.getBranding = function() {
  return /** @type{?proto.opencannabis.media.MediaItem} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaItem, 6));
};


/** @param {?proto.opencannabis.media.MediaItem|undefined} value */
proto.bloombox.schema.partner.Partner.prototype.setBranding = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.Partner.prototype.clearBranding = function() {
  this.setBranding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.Partner.prototype.hasBranding = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PartnerChannel channel = 7;
 * @return {!proto.bloombox.schema.partner.PartnerChannel}
 */
proto.bloombox.schema.partner.Partner.prototype.getChannel = function() {
  return /** @type {!proto.bloombox.schema.partner.PartnerChannel} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.bloombox.schema.partner.PartnerChannel} value */
proto.bloombox.schema.partner.Partner.prototype.setChannel = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional opencannabis.temporal.Instant created = 100;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.Partner.prototype.getCreated = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 100));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.Partner.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.bloombox.schema.partner.Partner.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.Partner.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional opencannabis.temporal.Instant modified = 101;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.Partner.prototype.getModified = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 101));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.Partner.prototype.setModified = function(value) {
  jspb.Message.setWrapperField(this, 101, value);
};


proto.bloombox.schema.partner.Partner.prototype.clearModified = function() {
  this.setModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.Partner.prototype.hasModified = function() {
  return jspb.Message.getField(this, 101) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerFlags.displayName = 'proto.bloombox.schema.partner.PartnerFlags';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    suspended: jspb.Message.getFieldWithDefault(msg, 1, false),
    pastdue: jspb.Message.getFieldWithDefault(msg, 2, false),
    beta: jspb.Message.getFieldWithDefault(msg, 3, false),
    sandbox: jspb.Message.getFieldWithDefault(msg, 4, false),
    internal: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerFlags}
 */
proto.bloombox.schema.partner.PartnerFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerFlags;
  return proto.bloombox.schema.partner.PartnerFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerFlags}
 */
proto.bloombox.schema.partner.PartnerFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPastdue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeta(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSandbox(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPastdue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBeta();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSandbox();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getInternal();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool suspended = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerFlags.prototype.setSuspended = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool pastdue = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.getPastdue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerFlags.prototype.setPastdue = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool beta = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.getBeta = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerFlags.prototype.setBeta = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool sandbox = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.getSandbox = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerFlags.prototype.setSandbox = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool internal = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerFlags.prototype.getInternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerFlags.prototype.setInternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.partner.PartnerChannel = {
  DIRECT: 0
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerLocationKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerLocationKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerLocationKey.displayName = 'proto.bloombox.schema.partner.PartnerLocationKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerLocationKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerLocationKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerLocationKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    partner: (f = msg.getPartner()) && proto.bloombox.schema.partner.PartnerKey.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerLocationKey;
  return proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerLocationKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.PartnerKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerKey.deserializeBinaryFromReader);
      msg.setPartner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerLocationKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.PartnerKey.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PartnerKey partner = 1;
 * @return {?proto.bloombox.schema.partner.PartnerKey}
 */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.getPartner = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerKey, 1));
};


/** @param {?proto.bloombox.schema.partner.PartnerKey|undefined} value */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.setPartner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.PartnerLocationKey.prototype.clearPartner = function() {
  this.setPartner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.hasPartner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerLocationKey.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerLocation.displayName = 'proto.bloombox.schema.partner.PartnerLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partner: (f = msg.getPartner()) && proto.bloombox.schema.partner.Partner.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    label: jspb.Message.getFieldWithDefault(msg, 4, ""),
    flags: (f = msg.getFlags()) && proto.bloombox.schema.partner.PartnerFlags.toObject(includeInstance, f),
    contact: (f = msg.getContact()) && proto.opencannabis.contact.ContactInfo.toObject(includeInstance, f),
    branding: (f = msg.getBranding()) && proto.opencannabis.media.MediaItem.toObject(includeInstance, f),
    created: (f = msg.getCreated()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    modified: (f = msg.getModified()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerLocation}
 */
proto.bloombox.schema.partner.PartnerLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerLocation;
  return proto.bloombox.schema.partner.PartnerLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerLocation}
 */
proto.bloombox.schema.partner.PartnerLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.Partner;
      reader.readMessage(value,proto.bloombox.schema.partner.Partner.deserializeBinaryFromReader);
      msg.setPartner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.PartnerFlags;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 7:
      var value = new proto.opencannabis.contact.ContactInfo;
      reader.readMessage(value,proto.opencannabis.contact.ContactInfo.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 6:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.setBranding(value);
      break;
    case 8:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 9:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.Partner.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.PartnerFlags.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.contact.ContactInfo.serializeBinaryToWriter
    );
  }
  f = message.getBranding();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getModified();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Partner partner = 2;
 * @return {?proto.bloombox.schema.partner.Partner}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getPartner = function() {
  return /** @type{?proto.bloombox.schema.partner.Partner} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.Partner, 2));
};


/** @param {?proto.bloombox.schema.partner.Partner|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setPartner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearPartner = function() {
  this.setPartner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasPartner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string label = 4;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PartnerFlags flags = 5;
 * @return {?proto.bloombox.schema.partner.PartnerFlags}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getFlags = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerFlags} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerFlags, 5));
};


/** @param {?proto.bloombox.schema.partner.PartnerFlags|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.contact.ContactInfo contact = 7;
 * @return {?proto.opencannabis.contact.ContactInfo}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getContact = function() {
  return /** @type{?proto.opencannabis.contact.ContactInfo} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.ContactInfo, 7));
};


/** @param {?proto.opencannabis.contact.ContactInfo|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setContact = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearContact = function() {
  this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasContact = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional opencannabis.media.MediaItem branding = 6;
 * @return {?proto.opencannabis.media.MediaItem}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getBranding = function() {
  return /** @type{?proto.opencannabis.media.MediaItem} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaItem, 6));
};


/** @param {?proto.opencannabis.media.MediaItem|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setBranding = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearBranding = function() {
  this.setBranding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasBranding = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional opencannabis.temporal.Instant created = 8;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getCreated = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 8));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional opencannabis.temporal.Instant modified = 9;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.getModified = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 9));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.PartnerLocation.prototype.setModified = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.bloombox.schema.partner.PartnerLocation.prototype.clearModified = function() {
  this.setModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerLocation.prototype.hasModified = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerDeviceKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerDeviceKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerDeviceKey.displayName = 'proto.bloombox.schema.partner.PartnerDeviceKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerDeviceKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerDeviceKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDeviceKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerDeviceKey}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerDeviceKey;
  return proto.bloombox.schema.partner.PartnerDeviceKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerDeviceKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerDeviceKey}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerDeviceKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerDeviceKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDeviceKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PartnerLocationKey location = 1;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 1));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.PartnerDeviceKey.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerDeviceKey.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerDevice.displayName = 'proto.bloombox.schema.partner.PartnerDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partner: (f = msg.getPartner()) && proto.bloombox.schema.partner.Partner.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocation.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flags: (f = msg.getFlags()) && proto.bloombox.schema.partner.PartnerDeviceFlags.toObject(includeInstance, f),
    device: (f = msg.getDevice()) && proto.opencannabis.device.Device.toObject(includeInstance, f),
    seen: (f = msg.getSeen()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    registered: (f = msg.getRegistered()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerDevice}
 */
proto.bloombox.schema.partner.PartnerDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerDevice;
  return proto.bloombox.schema.partner.PartnerDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerDevice}
 */
proto.bloombox.schema.partner.PartnerDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.Partner;
      reader.readMessage(value,proto.bloombox.schema.partner.Partner.deserializeBinaryFromReader);
      msg.setPartner(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.PartnerLocation;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {!proto.bloombox.schema.partner.PartnerDeviceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.PartnerDeviceFlags;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerDeviceFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 6:
      var value = new proto.opencannabis.device.Device;
      reader.readMessage(value,proto.opencannabis.device.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 7:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSeen(value);
      break;
    case 8:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setRegistered(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.Partner.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.PartnerLocation.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.PartnerDeviceFlags.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.device.Device.serializeBinaryToWriter
    );
  }
  f = message.getSeen();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getRegistered();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Partner partner = 2;
 * @return {?proto.bloombox.schema.partner.Partner}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getPartner = function() {
  return /** @type{?proto.bloombox.schema.partner.Partner} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.Partner, 2));
};


/** @param {?proto.bloombox.schema.partner.Partner|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setPartner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearPartner = function() {
  this.setPartner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasPartner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PartnerLocation location = 3;
 * @return {?proto.bloombox.schema.partner.PartnerLocation}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocation} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocation, 3));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocation|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PartnerDeviceType type = 4;
 * @return {!proto.bloombox.schema.partner.PartnerDeviceType}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.partner.PartnerDeviceType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.bloombox.schema.partner.PartnerDeviceType} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional PartnerDeviceFlags flags = 5;
 * @return {?proto.bloombox.schema.partner.PartnerDeviceFlags}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getFlags = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerDeviceFlags} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerDeviceFlags, 5));
};


/** @param {?proto.bloombox.schema.partner.PartnerDeviceFlags|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.device.Device device = 6;
 * @return {?proto.opencannabis.device.Device}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getDevice = function() {
  return /** @type{?proto.opencannabis.device.Device} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.device.Device, 6));
};


/** @param {?proto.opencannabis.device.Device|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional opencannabis.temporal.Instant seen = 7;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getSeen = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 7));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setSeen = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearSeen = function() {
  this.setSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasSeen = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional opencannabis.temporal.Instant registered = 8;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.getRegistered = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 8));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.PartnerDevice.prototype.setRegistered = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.partner.PartnerDevice.prototype.clearRegistered = function() {
  this.setRegistered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.PartnerDevice.prototype.hasRegistered = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.PartnerDeviceFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.PartnerDeviceFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.PartnerDeviceFlags.displayName = 'proto.bloombox.schema.partner.PartnerDeviceFlags';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.PartnerDeviceFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.PartnerDeviceFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    suspended: jspb.Message.getFieldWithDefault(msg, 2, false),
    beta: jspb.Message.getFieldWithDefault(msg, 3, false),
    sandbox: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.PartnerDeviceFlags}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.PartnerDeviceFlags;
  return proto.bloombox.schema.partner.PartnerDeviceFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.PartnerDeviceFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.PartnerDeviceFlags}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeta(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSandbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.PartnerDeviceFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.PartnerDeviceFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBeta();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSandbox();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool suspended = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.setSuspended = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool beta = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.getBeta = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.setBeta = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool sandbox = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.getSandbox = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.PartnerDeviceFlags.prototype.setSandbox = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.partner.PartnerDeviceType = {
  UNSPECIFIED_DEVICE_TYPE: 0,
  INTERNAL: 1,
  MENU_TABLET: 10,
  MENU_TV: 11,
  CHECKIN_STATION: 20,
  CHECKIN_TV: 21,
  POS_REGISTER: 30
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.commerce.pos.PurchaseEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.commerce.pos.PurchaseEvent.displayName = 'proto.bloombox.schema.commerce.pos.PurchaseEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.commerce.pos.PurchaseEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.commerce.pos.PurchaseEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instant: (f = msg.getInstant()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.commerce.pos.PurchaseEvent}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.commerce.pos.PurchaseEvent;
  return proto.bloombox.schema.commerce.pos.PurchaseEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.commerce.pos.PurchaseEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.commerce.pos.PurchaseEvent}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.commerce.pos.PurchaseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setInstant(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.commerce.pos.PurchaseEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.commerce.pos.PurchaseEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInstant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional PurchaseStatus status = 1;
 * @return {!proto.bloombox.schema.commerce.pos.PurchaseStatus}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.commerce.pos.PurchaseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.commerce.pos.PurchaseStatus} value */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Instant instant = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.getInstant = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.setInstant = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.clearInstant = function() {
  this.setInstant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.hasInstant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.commerce.pos.PurchaseEvent.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.commerce.pos.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.commerce.pos.Receipt.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.commerce.pos.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.commerce.pos.Receipt.displayName = 'proto.bloombox.schema.commerce.pos.Receipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.commerce.pos.Receipt.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.commerce.pos.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.commerce.pos.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    subtotal: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    taxList: jspb.Message.toObjectList(msg.getTaxList(),
    proto.opencannabis.taxes.Tax.toObject, includeInstance),
    discountList: jspb.Message.toObjectList(msg.getDiscountList(),
    proto.opencannabis.commerce.Discount.toObject, includeInstance),
    total: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.commerce.pos.Receipt}
 */
proto.bloombox.schema.commerce.pos.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.commerce.pos.Receipt;
  return proto.bloombox.schema.commerce.pos.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.commerce.pos.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.commerce.pos.Receipt}
 */
proto.bloombox.schema.commerce.pos.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSubtotal(value);
      break;
    case 2:
      var value = new proto.opencannabis.taxes.Tax;
      reader.readMessage(value,proto.opencannabis.taxes.Tax.deserializeBinaryFromReader);
      msg.addTax(value);
      break;
    case 3:
      var value = new proto.opencannabis.commerce.Discount;
      reader.readMessage(value,proto.opencannabis.commerce.Discount.deserializeBinaryFromReader);
      msg.addDiscount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.commerce.pos.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.commerce.pos.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubtotal();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTaxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.taxes.Tax.serializeBinaryToWriter
    );
  }
  f = message.getDiscountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opencannabis.commerce.Discount.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double subtotal = 1;
 * @return {number}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.getSubtotal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.commerce.pos.Receipt.prototype.setSubtotal = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated opencannabis.taxes.Tax tax = 2;
 * @return {!Array.<!proto.opencannabis.taxes.Tax>}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.getTaxList = function() {
  return /** @type{!Array.<!proto.opencannabis.taxes.Tax>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.taxes.Tax, 2));
};


/** @param {!Array.<!proto.opencannabis.taxes.Tax>} value */
proto.bloombox.schema.commerce.pos.Receipt.prototype.setTaxList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.taxes.Tax=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.taxes.Tax}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.addTax = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.taxes.Tax, opt_index);
};


proto.bloombox.schema.commerce.pos.Receipt.prototype.clearTaxList = function() {
  this.setTaxList([]);
};


/**
 * repeated opencannabis.commerce.Discount discount = 3;
 * @return {!Array.<!proto.opencannabis.commerce.Discount>}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.getDiscountList = function() {
  return /** @type{!Array.<!proto.opencannabis.commerce.Discount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.commerce.Discount, 3));
};


/** @param {!Array.<!proto.opencannabis.commerce.Discount>} value */
proto.bloombox.schema.commerce.pos.Receipt.prototype.setDiscountList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opencannabis.commerce.Discount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.commerce.Discount}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.addDiscount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opencannabis.commerce.Discount, opt_index);
};


proto.bloombox.schema.commerce.pos.Receipt.prototype.clearDiscountList = function() {
  this.setDiscountList([]);
};


/**
 * optional double total = 4;
 * @return {number}
 */
proto.bloombox.schema.commerce.pos.Receipt.prototype.getTotal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.commerce.pos.Receipt.prototype.setTotal = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.commerce.pos.Purchase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.commerce.pos.Purchase.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.commerce.pos.Purchase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.commerce.pos.Purchase.displayName = 'proto.bloombox.schema.commerce.pos.Purchase';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.commerce.pos.Purchase.repeatedFields_ = [7,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.commerce.pos.Purchase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.commerce.pos.Purchase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.Purchase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locationCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    customer: (f = msg.getCustomer()) && proto.opencannabis.commerce.Customer.toObject(includeInstance, f),
    register: (f = msg.getRegister()) && proto.bloombox.schema.partner.PartnerDeviceKey.toObject(includeInstance, f),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.opencannabis.commerce.Item.toObject, includeInstance),
    receipt: (f = msg.getReceipt()) && proto.bloombox.schema.commerce.pos.Receipt.toObject(includeInstance, f),
    actionLogList: jspb.Message.toObjectList(msg.getActionLogList(),
    proto.bloombox.schema.commerce.pos.PurchaseEvent.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.commerce.pos.Purchase}
 */
proto.bloombox.schema.commerce.pos.Purchase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.commerce.pos.Purchase;
  return proto.bloombox.schema.commerce.pos.Purchase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.commerce.pos.Purchase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.commerce.pos.Purchase}
 */
proto.bloombox.schema.commerce.pos.Purchase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationCode(value);
      break;
    case 4:
      var value = /** @type {!proto.bloombox.schema.commerce.pos.PurchaseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = new proto.opencannabis.commerce.Customer;
      reader.readMessage(value,proto.opencannabis.commerce.Customer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.PartnerDeviceKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerDeviceKey.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 7:
      var value = new proto.opencannabis.commerce.Item;
      reader.readMessage(value,proto.opencannabis.commerce.Item.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    case 8:
      var value = new proto.bloombox.schema.commerce.pos.Receipt;
      reader.readMessage(value,proto.bloombox.schema.commerce.pos.Receipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 9:
      var value = new proto.bloombox.schema.commerce.pos.PurchaseEvent;
      reader.readMessage(value,proto.bloombox.schema.commerce.pos.PurchaseEvent.deserializeBinaryFromReader);
      msg.addActionLog(value);
      break;
    case 10:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.commerce.pos.Purchase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.commerce.pos.Purchase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.commerce.pos.Purchase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocationCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.commerce.Customer.serializeBinaryToWriter
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.PartnerDeviceKey.serializeBinaryToWriter
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.opencannabis.commerce.Item.serializeBinaryToWriter
    );
  }
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bloombox.schema.commerce.pos.Receipt.serializeBinaryToWriter
    );
  }
  f = message.getActionLogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.bloombox.schema.commerce.pos.PurchaseEvent.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partner_code = 2;
 * @return {string}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getPartnerCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setPartnerCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string location_code = 3;
 * @return {string}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getLocationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setLocationCode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PurchaseStatus status = 4;
 * @return {!proto.bloombox.schema.commerce.pos.PurchaseStatus}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.commerce.pos.PurchaseStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.bloombox.schema.commerce.pos.PurchaseStatus} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional opencannabis.commerce.Customer customer = 5;
 * @return {?proto.opencannabis.commerce.Customer}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getCustomer = function() {
  return /** @type{?proto.opencannabis.commerce.Customer} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Customer, 5));
};


/** @param {?proto.opencannabis.commerce.Customer|undefined} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setCustomer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearCustomer = function() {
  this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bloombox.schema.partner.PartnerDeviceKey register = 6;
 * @return {?proto.bloombox.schema.partner.PartnerDeviceKey}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getRegister = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerDeviceKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerDeviceKey, 6));
};


/** @param {?proto.bloombox.schema.partner.PartnerDeviceKey|undefined} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setRegister = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearRegister = function() {
  this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated opencannabis.commerce.Item item = 7;
 * @return {!Array.<!proto.opencannabis.commerce.Item>}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getItemList = function() {
  return /** @type{!Array.<!proto.opencannabis.commerce.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.commerce.Item, 7));
};


/** @param {!Array.<!proto.opencannabis.commerce.Item>} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.opencannabis.commerce.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.commerce.Item}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.opencannabis.commerce.Item, opt_index);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearItemList = function() {
  this.setItemList([]);
};


/**
 * optional Receipt receipt = 8;
 * @return {?proto.bloombox.schema.commerce.pos.Receipt}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getReceipt = function() {
  return /** @type{?proto.bloombox.schema.commerce.pos.Receipt} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.commerce.pos.Receipt, 8));
};


/** @param {?proto.bloombox.schema.commerce.pos.Receipt|undefined} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setReceipt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated PurchaseEvent action_log = 9;
 * @return {!Array.<!proto.bloombox.schema.commerce.pos.PurchaseEvent>}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getActionLogList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.commerce.pos.PurchaseEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.commerce.pos.PurchaseEvent, 9));
};


/** @param {!Array.<!proto.bloombox.schema.commerce.pos.PurchaseEvent>} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setActionLogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.bloombox.schema.commerce.pos.PurchaseEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.commerce.pos.PurchaseEvent}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.addActionLog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.bloombox.schema.commerce.pos.PurchaseEvent, opt_index);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearActionLogList = function() {
  this.setActionLogList([]);
};


/**
 * optional opencannabis.temporal.Instant created_at = 10;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.getCreatedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 10));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.commerce.pos.Purchase.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.bloombox.schema.commerce.pos.Purchase.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.commerce.pos.Purchase.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.commerce.pos.PurchaseStatus = {
  DORMANT: 0,
  OPEN: 1,
  VOIDED: 2,
  CLOSED: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.pass.PassKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.pass.PassKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.pass.PassKey.displayName = 'proto.bloombox.schema.identity.pass.PassKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.pass.PassKey.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.pass.PassKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.pass.PassKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.pass.PassKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoded: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.pass.PassKey}
 */
proto.bloombox.schema.identity.pass.PassKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.pass.PassKey;
  return proto.bloombox.schema.identity.pass.PassKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.pass.PassKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.pass.PassKey}
 */
proto.bloombox.schema.identity.pass.PassKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoded(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.pass.PassKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.pass.PassKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.pass.PassKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.pass.PassKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoded();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string encoded = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.pass.PassKey.prototype.getEncoded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.pass.PassKey.prototype.setEncoded = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string serial = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.pass.PassKey.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.pass.PassKey.prototype.setSerial = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.bloombox.schema.identity.pass.PassKey.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.pass.PassKey.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.pass.Pass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.pass.Pass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.pass.Pass.displayName = 'proto.bloombox.schema.identity.pass.Pass';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.pass.Pass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.pass.Pass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.pass.Pass.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.bloombox.schema.identity.pass.PassKey.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    active: jspb.Message.getFieldWithDefault(msg, 4, false),
    issued: (f = msg.getIssued()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    suspended: (f = msg.getSuspended()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.pass.Pass}
 */
proto.bloombox.schema.identity.pass.Pass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.pass.Pass;
  return proto.bloombox.schema.identity.pass.Pass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.pass.Pass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.pass.Pass}
 */
proto.bloombox.schema.identity.pass.Pass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.identity.pass.PassKey;
      reader.readMessage(value,proto.bloombox.schema.identity.pass.PassKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 5:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setIssued(value);
      break;
    case 6:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSuspended(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.pass.Pass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.pass.Pass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.pass.Pass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.identity.pass.PassKey.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIssued();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getSuspended();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional PassKey key = 1;
 * @return {?proto.bloombox.schema.identity.pass.PassKey}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getKey = function() {
  return /** @type{?proto.bloombox.schema.identity.pass.PassKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.pass.PassKey, 1));
};


/** @param {?proto.bloombox.schema.identity.pass.PassKey|undefined} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.identity.pass.Pass.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uri = 3;
 * @return {string}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool active = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional opencannabis.temporal.Instant issued = 5;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getIssued = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 5));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setIssued = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.identity.pass.Pass.prototype.clearIssued = function() {
  this.setIssued(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.hasIssued = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.temporal.Instant suspended = 6;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.getSuspended = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 6));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.pass.Pass.prototype.setSuspended = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.identity.pass.Pass.prototype.clearSuspended = function() {
  this.setSuspended(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.pass.Pass.prototype.hasSuspended = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ids.USDLFieldValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.identity.ids.USDLFieldValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ids.USDLFieldValue.displayName = 'proto.bloombox.schema.identity.ids.USDLFieldValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.DataCase = {
  DATA_NOT_SET: 0,
  VALUE: 2,
  RAW_VALUE: 3
};

/**
 * @return {proto.bloombox.schema.identity.ids.USDLFieldValue.DataCase}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getDataCase = function() {
  return /** @type {proto.bloombox.schema.identity.ids.USDLFieldValue.DataCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ids.USDLFieldValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ids.USDLFieldValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rawValue: msg.getRawValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ids.USDLFieldValue}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ids.USDLFieldValue;
  return proto.bloombox.schema.identity.ids.USDLFieldValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ids.USDLFieldValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ids.USDLFieldValue}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.ids.USDLField} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ids.USDLFieldValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ids.USDLFieldValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional USDLField field = 1;
 * @return {!proto.bloombox.schema.identity.ids.USDLField}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getField = function() {
  return /** @type {!proto.bloombox.schema.identity.ids.USDLField} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.ids.USDLField} value */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_[0], value);
};


proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes raw_value = 3;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getRawValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes raw_value = 3;
 * This is a type-conversion wrapper around `getRawValue()`
 * @return {string}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getRawValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawValue()));
};


/**
 * optional bytes raw_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawValue()`
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.getRawValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.setRawValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_[0], value);
};


proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.clearRawValue = function() {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.identity.ids.USDLFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ids.USDLFieldValue.prototype.hasRawValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ids.USDL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.identity.ids.USDL.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.identity.ids.USDL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ids.USDL.displayName = 'proto.bloombox.schema.identity.ids.USDL';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.identity.ids.USDL.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ids.USDL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ids.USDL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.USDL.toObject = function(includeInstance, msg) {
  var f, obj = {
    barcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    magstripe: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jurisdiction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    identificationCard: jspb.Message.getFieldWithDefault(msg, 4, false),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.bloombox.schema.identity.ids.USDLFieldValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ids.USDL}
 */
proto.bloombox.schema.identity.ids.USDL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ids.USDL;
  return proto.bloombox.schema.identity.ids.USDL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ids.USDL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ids.USDL}
 */
proto.bloombox.schema.identity.ids.USDL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMagstripe(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.geo.usa.USState} */ (reader.readEnum());
      msg.setJurisdiction(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdentificationCard(value);
      break;
    case 100:
      var value = new proto.bloombox.schema.identity.ids.USDLFieldValue;
      reader.readMessage(value,proto.bloombox.schema.identity.ids.USDLFieldValue.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ids.USDL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ids.USDL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.USDL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBarcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMagstripe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJurisdiction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIdentificationCard();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.bloombox.schema.identity.ids.USDLFieldValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string barcode = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.getBarcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.USDL.prototype.setBarcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string magstripe = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.getMagstripe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.USDL.prototype.setMagstripe = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.geo.usa.USState jurisdiction = 3;
 * @return {!proto.opencannabis.geo.usa.USState}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.getJurisdiction = function() {
  return /** @type {!proto.opencannabis.geo.usa.USState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.geo.usa.USState} value */
proto.bloombox.schema.identity.ids.USDL.prototype.setJurisdiction = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool identification_card = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.getIdentificationCard = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.ids.USDL.prototype.setIdentificationCard = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated USDLFieldValue fields = 100;
 * @return {!Array.<!proto.bloombox.schema.identity.ids.USDLFieldValue>}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.getFieldsList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.identity.ids.USDLFieldValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.identity.ids.USDLFieldValue, 100));
};


/** @param {!Array.<!proto.bloombox.schema.identity.ids.USDLFieldValue>} value */
proto.bloombox.schema.identity.ids.USDL.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.bloombox.schema.identity.ids.USDLFieldValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.identity.ids.USDLFieldValue}
 */
proto.bloombox.schema.identity.ids.USDL.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.bloombox.schema.identity.ids.USDLFieldValue, opt_index);
};


proto.bloombox.schema.identity.ids.USDL.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.identity.ids.USDLField = {
  BACK_BARCODE: 0,
  FAMILY_NAME: 1,
  GIVEN_NAME: 2,
  MIDDLE_NAME: 3,
  FULL_NAME: 4,
  NAME_PREFIX: 5,
  NAME_SUFFIX: 6,
  DATE_OF_BIRTH: 10,
  SEX: 11,
  HEIGHT: 12,
  WEIGHT: 13,
  EYE_COLOR: 14,
  HAIR_COLOR: 15,
  FULL_ADDRESS: 20,
  ADDRESS_LINE: 21,
  ADDRESS_LINE2: 22,
  ADDRESS_CITY: 23,
  POSTAL_CODE: 24,
  STATE_JURISDICTION: 25,
  LICENSE_ID: 30,
  LICENSE_ISSUE_DATE: 31,
  LICENSE_EXPIRY_DATE: 32,
  ISSUER_JURISDICTION: 33,
  ISSUER_JURISDICTION_FORMAT_VERSION: 34,
  UNIQUE_DOCUMENT_CODE: 40,
  INVENTORY_CONTROL_CODE: 41,
  UNDER_18_DATE: 50,
  UNDER_19_DATE: 51,
  UNDER_21_DATE: 52,
  UNDER_18: 60,
  UNDER_19: 61,
  UNDER_21: 62,
  ORGAN_DONOR: 63,
  VETERAN: 64,
  NONRESIDENT: 65,
  RACE_ETHNICITY: 70,
  COMPLIANCE_TYPE: 71
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ids.UserDoctorRec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.ids.UserDoctorRec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ids.UserDoctorRec.displayName = 'proto.bloombox.schema.identity.ids.UserDoctorRec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ids.UserDoctorRec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ids.UserDoctorRec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirationDate: (f = msg.getExpirationDate()) && proto.opencannabis.temporal.Date.toObject(includeInstance, f),
    barcode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    country: jspb.Message.getFieldWithDefault(msg, 5, ""),
    doctorId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    doctor: (f = msg.getDoctor()) && proto.opencannabis.person.Person.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ids.UserDoctorRec}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ids.UserDoctorRec;
  return proto.bloombox.schema.identity.ids.UserDoctorRec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ids.UserDoctorRec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ids.UserDoctorRec}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Date;
      reader.readMessage(value,proto.opencannabis.temporal.Date.deserializeBinaryFromReader);
      msg.setExpirationDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcode(value);
      break;
    case 4:
      var value = /** @type {!proto.opencannabis.geo.usa.USState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoctorId(value);
      break;
    case 7:
      var value = new proto.opencannabis.person.Person;
      reader.readMessage(value,proto.opencannabis.person.Person.deserializeBinaryFromReader);
      msg.setDoctor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ids.UserDoctorRec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ids.UserDoctorRec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirationDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Date.serializeBinaryToWriter
    );
  }
  f = message.getBarcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDoctorId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDoctor();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.person.Person.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Date expiration_date = 2;
 * @return {?proto.opencannabis.temporal.Date}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getExpirationDate = function() {
  return /** @type{?proto.opencannabis.temporal.Date} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Date, 2));
};


/** @param {?proto.opencannabis.temporal.Date|undefined} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setExpirationDate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.clearExpirationDate = function() {
  this.setExpirationDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.hasExpirationDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string barcode = 3;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getBarcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setBarcode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional opencannabis.geo.usa.USState state = 4;
 * @return {!proto.opencannabis.geo.usa.USState}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getState = function() {
  return /** @type {!proto.opencannabis.geo.usa.USState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.opencannabis.geo.usa.USState} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string country = 5;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string doctor_id = 6;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getDoctorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setDoctorId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional opencannabis.person.Person doctor = 7;
 * @return {?proto.opencannabis.person.Person}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.getDoctor = function() {
  return /** @type{?proto.opencannabis.person.Person} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Person, 7));
};


/** @param {?proto.opencannabis.person.Person|undefined} value */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.setDoctor = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.clearDoctor = function() {
  this.setDoctor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ids.UserDoctorRec.prototype.hasDoctor = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ids.Passport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.ids.Passport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ids.Passport.displayName = 'proto.bloombox.schema.identity.ids.Passport';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ids.Passport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ids.Passport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.Passport.toObject = function(includeInstance, msg) {
  var f, obj = {
    barcode: msg.getBarcode_asB64(),
    nation: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ids.Passport}
 */
proto.bloombox.schema.identity.ids.Passport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ids.Passport;
  return proto.bloombox.schema.identity.ids.Passport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ids.Passport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ids.Passport}
 */
proto.bloombox.schema.identity.ids.Passport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBarcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ids.Passport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ids.Passport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ids.Passport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBarcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes barcode = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.getBarcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes barcode = 1;
 * This is a type-conversion wrapper around `getBarcode()`
 * @return {string}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.getBarcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBarcode()));
};


/**
 * optional bytes barcode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBarcode()`
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.getBarcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBarcode()));
};


/** @param {!(string|Uint8Array)} value */
proto.bloombox.schema.identity.ids.Passport.prototype.setBarcode = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string nation = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.ids.Passport.prototype.getNation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ids.Passport.prototype.setNation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.identity.ID.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.identity.ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ID.displayName = 'proto.bloombox.schema.identity.ID';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.identity.ID.oneofGroups_ = [[20,21]];

/**
 * @enum {number}
 */
proto.bloombox.schema.identity.ID.DocumentCase = {
  DOCUMENT_NOT_SET: 0,
  LICENSE: 20,
  PASSPORT: 21
};

/**
 * @return {proto.bloombox.schema.identity.ID.DocumentCase}
 */
proto.bloombox.schema.identity.ID.prototype.getDocumentCase = function() {
  return /** @type {proto.bloombox.schema.identity.ID.DocumentCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.identity.ID.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ID.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ID.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expireDate: (f = msg.getExpireDate()) && proto.opencannabis.temporal.Date.toObject(includeInstance, f),
    birthDate: (f = msg.getBirthDate()) && proto.opencannabis.temporal.Date.toObject(includeInstance, f),
    license: (f = msg.getLicense()) && proto.bloombox.schema.identity.ids.USDL.toObject(includeInstance, f),
    passport: (f = msg.getPassport()) && proto.bloombox.schema.identity.ids.Passport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ID}
 */
proto.bloombox.schema.identity.ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ID;
  return proto.bloombox.schema.identity.ID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ID}
 */
proto.bloombox.schema.identity.ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.IDType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Date;
      reader.readMessage(value,proto.opencannabis.temporal.Date.deserializeBinaryFromReader);
      msg.setExpireDate(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Date;
      reader.readMessage(value,proto.opencannabis.temporal.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 20:
      var value = new proto.bloombox.schema.identity.ids.USDL;
      reader.readMessage(value,proto.bloombox.schema.identity.ids.USDL.deserializeBinaryFromReader);
      msg.setLicense(value);
      break;
    case 21:
      var value = new proto.bloombox.schema.identity.ids.Passport;
      reader.readMessage(value,proto.bloombox.schema.identity.ids.Passport.deserializeBinaryFromReader);
      msg.setPassport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpireDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Date.serializeBinaryToWriter
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Date.serializeBinaryToWriter
    );
  }
  f = message.getLicense();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.bloombox.schema.identity.ids.USDL.serializeBinaryToWriter
    );
  }
  f = message.getPassport();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.bloombox.schema.identity.ids.Passport.serializeBinaryToWriter
    );
  }
};


/**
 * optional IDType type = 1;
 * @return {!proto.bloombox.schema.identity.IDType}
 */
proto.bloombox.schema.identity.ID.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.identity.IDType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.IDType} value */
proto.bloombox.schema.identity.ID.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.ID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ID.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Date expire_date = 3;
 * @return {?proto.opencannabis.temporal.Date}
 */
proto.bloombox.schema.identity.ID.prototype.getExpireDate = function() {
  return /** @type{?proto.opencannabis.temporal.Date} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Date, 3));
};


/** @param {?proto.opencannabis.temporal.Date|undefined} value */
proto.bloombox.schema.identity.ID.prototype.setExpireDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.identity.ID.prototype.clearExpireDate = function() {
  this.setExpireDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ID.prototype.hasExpireDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.temporal.Date birth_date = 4;
 * @return {?proto.opencannabis.temporal.Date}
 */
proto.bloombox.schema.identity.ID.prototype.getBirthDate = function() {
  return /** @type{?proto.opencannabis.temporal.Date} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Date, 4));
};


/** @param {?proto.opencannabis.temporal.Date|undefined} value */
proto.bloombox.schema.identity.ID.prototype.setBirthDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.identity.ID.prototype.clearBirthDate = function() {
  this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ID.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ids.USDL license = 20;
 * @return {?proto.bloombox.schema.identity.ids.USDL}
 */
proto.bloombox.schema.identity.ID.prototype.getLicense = function() {
  return /** @type{?proto.bloombox.schema.identity.ids.USDL} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ids.USDL, 20));
};


/** @param {?proto.bloombox.schema.identity.ids.USDL|undefined} value */
proto.bloombox.schema.identity.ID.prototype.setLicense = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.bloombox.schema.identity.ID.oneofGroups_[0], value);
};


proto.bloombox.schema.identity.ID.prototype.clearLicense = function() {
  this.setLicense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ID.prototype.hasLicense = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ids.Passport passport = 21;
 * @return {?proto.bloombox.schema.identity.ids.Passport}
 */
proto.bloombox.schema.identity.ID.prototype.getPassport = function() {
  return /** @type{?proto.bloombox.schema.identity.ids.Passport} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ids.Passport, 21));
};


/** @param {?proto.bloombox.schema.identity.ids.Passport|undefined} value */
proto.bloombox.schema.identity.ID.prototype.setPassport = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.bloombox.schema.identity.ID.oneofGroups_[0], value);
};


proto.bloombox.schema.identity.ID.prototype.clearPassport = function() {
  this.setPassport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ID.prototype.hasPassport = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.identity.IDType = {
  USDL: 0,
  PASSPORT: 1
};

/**
 * @enum {number}
 */
proto.opencannabis.media.MediaOrientation = {
  UP: 0,
  DOWN: 1,
  LEFT: 2,
  RIGHT: 3,
  UP_MIRRORED: 4,
  DOWN_MIRRORED: 5,
  LEFT_MIRRORED: 6,
  RIGHT_MIRRORED: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.IDMediaAttachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.IDMediaAttachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.IDMediaAttachment.displayName = 'proto.bloombox.schema.identity.IDMediaAttachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.IDMediaAttachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.IDMediaAttachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.IDMediaAttachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orientation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64(),
    imageType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    quality: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.IDMediaAttachment}
 */
proto.bloombox.schema.identity.IDMediaAttachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.IDMediaAttachment;
  return proto.bloombox.schema.identity.IDMediaAttachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.IDMediaAttachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.IDMediaAttachment}
 */
proto.bloombox.schema.identity.IDMediaAttachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.IDMedia} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.media.MediaOrientation} */ (reader.readEnum());
      msg.setOrientation(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImageType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.IDMediaAttachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.IDMediaAttachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.IDMediaAttachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrientation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getImageType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getQuality();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional IDMedia type = 1;
 * @return {!proto.bloombox.schema.identity.IDMedia}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.identity.IDMedia} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.IDMedia} value */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.media.MediaOrientation orientation = 2;
 * @return {!proto.opencannabis.media.MediaOrientation}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getOrientation = function() {
  return /** @type {!proto.opencannabis.media.MediaOrientation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.media.MediaOrientation} value */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.setOrientation = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {string}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 image_type = 4;
 * @return {number}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getImageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.setImageType = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double quality = 5;
 * @return {number}
 */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.getQuality = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.identity.IDMediaAttachment.prototype.setQuality = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.identity.IDMedia = {
  DOCUMENT_FRONT: 0,
  DOCUMENT_REAR: 1,
  PORTRAIT: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.section.CustomSection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.menu.section.CustomSection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.section.CustomSection.displayName = 'proto.opencannabis.products.menu.section.CustomSection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.section.CustomSection.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.section.CustomSection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.section.CustomSection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.CustomSection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.section.CustomSection}
 */
proto.opencannabis.products.menu.section.CustomSection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.section.CustomSection;
  return proto.opencannabis.products.menu.section.CustomSection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.section.CustomSection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.section.CustomSection}
 */
proto.opencannabis.products.menu.section.CustomSection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.menu.section.FilteredSection} */ (reader.readEnum());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.section.CustomSection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.section.CustomSection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.section.CustomSection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.CustomSection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.products.menu.section.CustomSection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.products.menu.section.CustomSection.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FilteredSection filter = 2;
 * @return {!proto.opencannabis.products.menu.section.FilteredSection}
 */
proto.opencannabis.products.menu.section.CustomSection.prototype.getFilter = function() {
  return /** @type {!proto.opencannabis.products.menu.section.FilteredSection} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.menu.section.FilteredSection} value */
proto.opencannabis.products.menu.section.CustomSection.prototype.setFilter = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.section.SectionMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.menu.section.SectionMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.section.SectionMedia.displayName = 'proto.opencannabis.products.menu.section.SectionMedia';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.section.SectionMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.section.SectionMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.section.SectionMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletHomescreenMedia: (f = msg.getTabletHomescreenMedia()) && proto.opencannabis.media.MediaItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.section.SectionMedia}
 */
proto.opencannabis.products.menu.section.SectionMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.section.SectionMedia;
  return proto.opencannabis.products.menu.section.SectionMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.section.SectionMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.section.SectionMedia}
 */
proto.opencannabis.products.menu.section.SectionMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.setTabletHomescreenMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.section.SectionMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.section.SectionMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.section.SectionMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTabletHomescreenMedia();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.media.MediaItem tablet_homescreen_media = 2;
 * @return {?proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.products.menu.section.SectionMedia.prototype.getTabletHomescreenMedia = function() {
  return /** @type{?proto.opencannabis.media.MediaItem} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaItem, 2));
};


/** @param {?proto.opencannabis.media.MediaItem|undefined} value */
proto.opencannabis.products.menu.section.SectionMedia.prototype.setTabletHomescreenMedia = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.products.menu.section.SectionMedia.prototype.clearTabletHomescreenMedia = function() {
  this.setTabletHomescreenMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionMedia.prototype.hasTabletHomescreenMedia = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.section.SectionSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.menu.section.SectionSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.section.SectionSettings.displayName = 'proto.opencannabis.products.menu.section.SectionSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.section.SectionSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.section.SectionSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.content.Name.toObject(includeInstance, f),
    media: (f = msg.getMedia()) && proto.opencannabis.products.menu.section.SectionMedia.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.section.SectionSettings}
 */
proto.opencannabis.products.menu.section.SectionSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.section.SectionSettings;
  return proto.opencannabis.products.menu.section.SectionSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.section.SectionSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.section.SectionSettings}
 */
proto.opencannabis.products.menu.section.SectionSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Name;
      reader.readMessage(value,proto.opencannabis.content.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.products.menu.section.SectionMedia;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionMedia.deserializeBinaryFromReader);
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.section.SectionSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.section.SectionSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Name.serializeBinaryToWriter
    );
  }
  f = message.getMedia();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.products.menu.section.SectionMedia.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.content.Name name = 1;
 * @return {?proto.opencannabis.content.Name}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.getName = function() {
  return /** @type{?proto.opencannabis.content.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Name, 1));
};


/** @param {?proto.opencannabis.content.Name|undefined} value */
proto.opencannabis.products.menu.section.SectionSettings.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.menu.section.SectionSettings.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SectionMedia media = 2;
 * @return {?proto.opencannabis.products.menu.section.SectionMedia}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.getMedia = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionMedia} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionMedia, 2));
};


/** @param {?proto.opencannabis.products.menu.section.SectionMedia|undefined} value */
proto.opencannabis.products.menu.section.SectionSettings.prototype.setMedia = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.products.menu.section.SectionSettings.prototype.clearMedia = function() {
  this.setMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSettings.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.section.SectionSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.menu.section.SectionSpec.repeatedFields_, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_);
};
goog.inherits(proto.opencannabis.products.menu.section.SectionSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.section.SectionSpec.displayName = 'proto.opencannabis.products.menu.section.SectionSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.menu.section.SectionSpec.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.section.SectionSpec.SpecCase = {
  SPEC_NOT_SET: 0,
  SECTION: 1,
  CUSTOM_SECTION: 2,
  NAME: 3
};

/**
 * @return {proto.opencannabis.products.menu.section.SectionSpec.SpecCase}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.products.menu.section.SectionSpec.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.section.SectionSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.section.SectionSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    section: jspb.Message.getFieldWithDefault(msg, 1, 0),
    customSection: (f = msg.getCustomSection()) && proto.opencannabis.products.menu.section.CustomSection.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    settings: (f = msg.getSettings()) && proto.opencannabis.products.menu.section.SectionSettings.toObject(includeInstance, f),
    flagsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.opencannabis.products.menu.section.SectionSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.section.SectionSpec;
  return proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.section.SectionSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.products.menu.section.Section} */ (reader.readEnum());
      msg.setSection(value);
      break;
    case 2:
      var value = new proto.opencannabis.products.menu.section.CustomSection;
      reader.readMessage(value,proto.opencannabis.products.menu.section.CustomSection.deserializeBinaryFromReader);
      msg.setCustomSection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.opencannabis.products.menu.section.SectionSettings;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.opencannabis.products.menu.section.SectionFlag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.section.SectionSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.opencannabis.products.menu.section.Section} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCustomSection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.products.menu.section.CustomSection.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.products.menu.section.SectionSettings.serializeBinaryToWriter
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional Section section = 1;
 * @return {!proto.opencannabis.products.menu.section.Section}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getSection = function() {
  return /** @type {!proto.opencannabis.products.menu.section.Section} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.products.menu.section.Section} value */
proto.opencannabis.products.menu.section.SectionSpec.prototype.setSection = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.section.SectionSpec.prototype.clearSection = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.hasSection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CustomSection custom_section = 2;
 * @return {?proto.opencannabis.products.menu.section.CustomSection}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getCustomSection = function() {
  return /** @type{?proto.opencannabis.products.menu.section.CustomSection} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.CustomSection, 2));
};


/** @param {?proto.opencannabis.products.menu.section.CustomSection|undefined} value */
proto.opencannabis.products.menu.section.SectionSpec.prototype.setCustomSection = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.section.SectionSpec.prototype.clearCustomSection = function() {
  this.setCustomSection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.hasCustomSection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.products.menu.section.SectionSpec.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.section.SectionSpec.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.products.menu.section.SectionSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SectionSettings settings = 4;
 * @return {?proto.opencannabis.products.menu.section.SectionSettings}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getSettings = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionSettings} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionSettings, 4));
};


/** @param {?proto.opencannabis.products.menu.section.SectionSettings|undefined} value */
proto.opencannabis.products.menu.section.SectionSpec.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.menu.section.SectionSpec.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SectionFlag flags = 5;
 * @return {!Array.<!proto.opencannabis.products.menu.section.SectionFlag>}
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.menu.section.SectionFlag>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.opencannabis.products.menu.section.SectionFlag>} value */
proto.opencannabis.products.menu.section.SectionSpec.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.opencannabis.products.menu.section.SectionFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.menu.section.SectionSpec.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.opencannabis.products.menu.section.SectionSpec.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * @enum {number}
 */
proto.opencannabis.products.menu.section.SectionFlag = {
  HIDDEN: 0,
  FEATURED: 1
};

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.section.Section = {
  UNSPECIFIED: 0,
  FLOWERS: 1,
  EXTRACTS: 2,
  EDIBLES: 3,
  CARTRIDGES: 4,
  APOTHECARY: 5,
  PREROLLS: 6,
  PLANTS: 7,
  MERCHANDISE: 8
};

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.section.FilteredSection = {
  ON_SALE: 0,
  HOUSE: 1,
  CBD: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.Grow = {
  GENERIC: 0,
  INDOOR: 1,
  GREENHOUSE: 2,
  OUTDOOR: 3
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.Species = {
  UNSPECIFIED: 0,
  SATIVA: 1,
  HYBRID_SATIVA: 2,
  HYBRID: 3,
  HYBRID_INDICA: 4,
  INDICA: 5
};

/**
 * @enum {number}
 */
proto.opencannabis.base.Language = {
  ENGLISH: 0,
  SPANISH: 1,
  FRENCH: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.base.Compression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.base.Compression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.base.Compression.displayName = 'proto.opencannabis.base.Compression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.base.Compression.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.base.Compression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.base.Compression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.Compression.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.base.Compression}
 */
proto.opencannabis.base.Compression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.base.Compression;
  return proto.opencannabis.base.Compression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.base.Compression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.base.Compression}
 */
proto.opencannabis.base.Compression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.base.Compression.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.base.Compression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.base.Compression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.base.Compression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.base.Compression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.base.Compression.Type = {
  GZIP: 0
};

/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.base.Compression.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.base.Compression.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.opencannabis.base.Compression.Type}
 */
proto.opencannabis.base.Compression.prototype.getType = function() {
  return /** @type {!proto.opencannabis.base.Compression.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.base.Compression.Type} value */
proto.opencannabis.base.Compression.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.content.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.Content.displayName = 'proto.opencannabis.content.Content';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encoding: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    language: jspb.Message.getFieldWithDefault(msg, 4, 0),
    compression: (f = msg.getCompression()) && proto.opencannabis.base.Compression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.Content}
 */
proto.opencannabis.content.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.Content;
  return proto.opencannabis.content.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.Content}
 */
proto.opencannabis.content.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.content.Content.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.content.Content.Encoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {!proto.opencannabis.base.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 5:
      var value = new proto.opencannabis.base.Compression;
      reader.readMessage(value,proto.opencannabis.base.Compression.deserializeBinaryFromReader);
      msg.setCompression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCompression();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.base.Compression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.opencannabis.content.Content.Type = {
  TEXT: 0,
  MARKDOWN: 1,
  HTML: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.content.Content.Encoding = {
  UTF8: 0,
  B64: 1,
  B64_ASCII: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.opencannabis.content.Content.Type}
 */
proto.opencannabis.content.Content.prototype.getType = function() {
  return /** @type {!proto.opencannabis.content.Content.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.content.Content.Type} value */
proto.opencannabis.content.Content.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Encoding encoding = 2;
 * @return {!proto.opencannabis.content.Content.Encoding}
 */
proto.opencannabis.content.Content.prototype.getEncoding = function() {
  return /** @type {!proto.opencannabis.content.Content.Encoding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.content.Content.Encoding} value */
proto.opencannabis.content.Content.prototype.setEncoding = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.opencannabis.content.Content.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.content.Content.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional opencannabis.base.Language language = 4;
 * @return {!proto.opencannabis.base.Language}
 */
proto.opencannabis.content.Content.prototype.getLanguage = function() {
  return /** @type {!proto.opencannabis.base.Language} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.opencannabis.base.Language} value */
proto.opencannabis.content.Content.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional opencannabis.base.Compression compression = 5;
 * @return {?proto.opencannabis.base.Compression}
 */
proto.opencannabis.content.Content.prototype.getCompression = function() {
  return /** @type{?proto.opencannabis.base.Compression} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.Compression, 5));
};


/** @param {?proto.opencannabis.base.Compression|undefined} value */
proto.opencannabis.content.Content.prototype.setCompression = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.content.Content.prototype.clearCompression = function() {
  this.setCompression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.Content.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.TestValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_);
};
goog.inherits(proto.opencannabis.structs.labtesting.TestValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.TestValue.displayName = 'proto.opencannabis.structs.labtesting.TestValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.structs.labtesting.TestValue.oneofGroups_ = [[10,20]];

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.TestValue.ValueCase = {
  VALUE_NOT_SET: 0,
  MEASUREMENT: 10,
  PRESENT: 20
};

/**
 * @return {proto.opencannabis.structs.labtesting.TestValue.ValueCase}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.getValueCase = function() {
  return /** @type {proto.opencannabis.structs.labtesting.TestValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.TestValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.TestValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    measurement: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    present: jspb.Message.getFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.TestValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.TestValue;
  return proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.TestValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.labtesting.TestValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeasurement(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPresent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.TestValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional TestValueType type = 1;
 * @return {!proto.opencannabis.structs.labtesting.TestValueType}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.getType = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.TestValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.TestValueType} value */
proto.opencannabis.structs.labtesting.TestValue.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double measurement = 10;
 * @return {number}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.getMeasurement = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.opencannabis.structs.labtesting.TestValue.prototype.setMeasurement = function(value) {
  jspb.Message.setOneofField(this, 10, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_[0], value);
};


proto.opencannabis.structs.labtesting.TestValue.prototype.clearMeasurement = function() {
  jspb.Message.setOneofField(this, 10, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool present = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.getPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.labtesting.TestValue.prototype.setPresent = function(value) {
  jspb.Message.setOneofField(this, 20, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_[0], value);
};


proto.opencannabis.structs.labtesting.TestValue.prototype.clearPresent = function() {
  jspb.Message.setOneofField(this, 20, proto.opencannabis.structs.labtesting.TestValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestValue.prototype.hasPresent = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.TestMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.TestMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.TestMedia.displayName = 'proto.opencannabis.structs.labtesting.TestMedia';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.TestMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.TestMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.TestMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mediaItem: (f = msg.getMediaItem()) && proto.opencannabis.media.MediaItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.TestMedia}
 */
proto.opencannabis.structs.labtesting.TestMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.TestMedia;
  return proto.opencannabis.structs.labtesting.TestMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.TestMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.TestMedia}
 */
proto.opencannabis.structs.labtesting.TestMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.labtesting.TestMediaType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.setMediaItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.TestMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.TestMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.TestMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMediaItem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional TestMediaType type = 1;
 * @return {!proto.opencannabis.structs.labtesting.TestMediaType}
 */
proto.opencannabis.structs.labtesting.TestMedia.prototype.getType = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.TestMediaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.TestMediaType} value */
proto.opencannabis.structs.labtesting.TestMedia.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.media.MediaItem media_item = 2;
 * @return {?proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.structs.labtesting.TestMedia.prototype.getMediaItem = function() {
  return /** @type{?proto.opencannabis.media.MediaItem} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.media.MediaItem, 2));
};


/** @param {?proto.opencannabis.media.MediaItem|undefined} value */
proto.opencannabis.structs.labtesting.TestMedia.prototype.setMediaItem = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.labtesting.TestMedia.prototype.clearMediaItem = function() {
  this.setMediaItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestMedia.prototype.hasMediaItem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.TestValueType = {
  MILLIGRAMS: 0,
  PERCENTAGE: 1,
  PRESENCE: 3
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.TestMediaType = {
  CERTIFICATE: 0,
  RESULTS: 1,
  PRODUCT_IMAGE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.TestResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.labtesting.TestResults.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.TestResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.TestResults.displayName = 'proto.opencannabis.structs.labtesting.TestResults';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.labtesting.TestResults.repeatedFields_ = [2,34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.TestResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.TestResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: jspb.Message.getFieldWithDefault(msg, 1, false),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.opencannabis.structs.labtesting.TestMedia.toObject, includeInstance),
    lastUpdated: (f = msg.getLastUpdated()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    cannabinoids: (f = msg.getCannabinoids()) && proto.opencannabis.structs.labtesting.Cannabinoids.toObject(includeInstance, f),
    terpenes: (f = msg.getTerpenes()) && proto.opencannabis.structs.labtesting.Terpenes.toObject(includeInstance, f),
    pesticides: (f = msg.getPesticides()) && proto.opencannabis.structs.labtesting.Pesticides.toObject(includeInstance, f),
    moisture: (f = msg.getMoisture()) && proto.opencannabis.structs.labtesting.Moisture.toObject(includeInstance, f),
    aromaList: jspb.Message.getRepeatedField(msg, 34),
    subjective: (f = msg.getSubjective()) && proto.opencannabis.structs.labtesting.Subjective.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.TestResults}
 */
proto.opencannabis.structs.labtesting.TestResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.TestResults;
  return proto.opencannabis.structs.labtesting.TestResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.TestResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.TestResults}
 */
proto.opencannabis.structs.labtesting.TestResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.labtesting.TestMedia;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestMedia.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    case 30:
      var value = new proto.opencannabis.structs.labtesting.Cannabinoids;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Cannabinoids.deserializeBinaryFromReader);
      msg.setCannabinoids(value);
      break;
    case 31:
      var value = new proto.opencannabis.structs.labtesting.Terpenes;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Terpenes.deserializeBinaryFromReader);
      msg.setTerpenes(value);
      break;
    case 32:
      var value = new proto.opencannabis.structs.labtesting.Pesticides;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Pesticides.deserializeBinaryFromReader);
      msg.setPesticides(value);
      break;
    case 33:
      var value = new proto.opencannabis.structs.labtesting.Moisture;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Moisture.deserializeBinaryFromReader);
      msg.setMoisture(value);
      break;
    case 34:
      var value = /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (reader.readPackedEnum());
      msg.setAromaList(value);
      break;
    case 35:
      var value = new proto.opencannabis.structs.labtesting.Subjective;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Subjective.deserializeBinaryFromReader);
      msg.setSubjective(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.TestResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.TestResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.TestResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.structs.labtesting.TestMedia.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getCannabinoids();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.opencannabis.structs.labtesting.Cannabinoids.serializeBinaryToWriter
    );
  }
  f = message.getTerpenes();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.opencannabis.structs.labtesting.Terpenes.serializeBinaryToWriter
    );
  }
  f = message.getPesticides();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.opencannabis.structs.labtesting.Pesticides.serializeBinaryToWriter
    );
  }
  f = message.getMoisture();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.opencannabis.structs.labtesting.Moisture.serializeBinaryToWriter
    );
  }
  f = message.getAromaList();
  if (f.length > 0) {
    writer.writePackedEnum(
      34,
      f
    );
  }
  f = message.getSubjective();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.opencannabis.structs.labtesting.Subjective.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool available = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setAvailable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated TestMedia media = 2;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.TestMedia>}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.labtesting.TestMedia>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.labtesting.TestMedia, 2));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.TestMedia>} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.TestMedia=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.labtesting.TestMedia}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.structs.labtesting.TestMedia, opt_index);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * optional opencannabis.temporal.Instant last_updated = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getLastUpdated = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setLastUpdated = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearLastUpdated = function() {
  this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Cannabinoids cannabinoids = 30;
 * @return {?proto.opencannabis.structs.labtesting.Cannabinoids}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getCannabinoids = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Cannabinoids} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Cannabinoids, 30));
};


/** @param {?proto.opencannabis.structs.labtesting.Cannabinoids|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setCannabinoids = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearCannabinoids = function() {
  this.setCannabinoids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasCannabinoids = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional Terpenes terpenes = 31;
 * @return {?proto.opencannabis.structs.labtesting.Terpenes}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getTerpenes = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Terpenes} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Terpenes, 31));
};


/** @param {?proto.opencannabis.structs.labtesting.Terpenes|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setTerpenes = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearTerpenes = function() {
  this.setTerpenes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasTerpenes = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional Pesticides pesticides = 32;
 * @return {?proto.opencannabis.structs.labtesting.Pesticides}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getPesticides = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Pesticides} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Pesticides, 32));
};


/** @param {?proto.opencannabis.structs.labtesting.Pesticides|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setPesticides = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearPesticides = function() {
  this.setPesticides(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasPesticides = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional Moisture moisture = 33;
 * @return {?proto.opencannabis.structs.labtesting.Moisture}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getMoisture = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Moisture} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Moisture, 33));
};


/** @param {?proto.opencannabis.structs.labtesting.Moisture|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setMoisture = function(value) {
  jspb.Message.setWrapperField(this, 33, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearMoisture = function() {
  this.setMoisture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasMoisture = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * repeated TasteNote aroma = 34;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getAromaList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (jspb.Message.getRepeatedField(this, 34));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setAromaList = function(value) {
  jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.TasteNote} value
 * @param {number=} opt_index
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.addAroma = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearAromaList = function() {
  this.setAromaList([]);
};


/**
 * optional Subjective subjective = 35;
 * @return {?proto.opencannabis.structs.labtesting.Subjective}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.getSubjective = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Subjective} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Subjective, 35));
};


/** @param {?proto.opencannabis.structs.labtesting.Subjective|undefined} value */
proto.opencannabis.structs.labtesting.TestResults.prototype.setSubjective = function(value) {
  jspb.Message.setWrapperField(this, 35, value);
};


proto.opencannabis.structs.labtesting.TestResults.prototype.clearSubjective = function() {
  this.setSubjective(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.TestResults.prototype.hasSubjective = function() {
  return jspb.Message.getField(this, 35) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Cannabinoids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.labtesting.Cannabinoids.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Cannabinoids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Cannabinoids.displayName = 'proto.opencannabis.structs.labtesting.Cannabinoids';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.labtesting.Cannabinoids.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Cannabinoids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Cannabinoids.toObject = function(includeInstance, msg) {
  var f, obj = {
    thc: (f = msg.getThc()) && proto.opencannabis.structs.labtesting.TestValue.toObject(includeInstance, f),
    cbd: (f = msg.getCbd()) && proto.opencannabis.structs.labtesting.TestValue.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.opencannabis.structs.labtesting.Cannabinoids.Result.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoids}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Cannabinoids;
  return proto.opencannabis.structs.labtesting.Cannabinoids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoids}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.structs.labtesting.TestValue;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
      msg.setThc(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.labtesting.TestValue;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
      msg.setCbd(value);
      break;
    case 3:
      var value = new proto.opencannabis.structs.labtesting.Cannabinoids.Result;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Cannabinoids.Result.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Cannabinoids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Cannabinoids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter
    );
  }
  f = message.getCbd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opencannabis.structs.labtesting.Cannabinoids.Result.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Cannabinoids.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Cannabinoids.Result.displayName = 'proto.opencannabis.structs.labtesting.Cannabinoids.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Cannabinoids.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    cannabinoid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ratio: jspb.Message.getFieldWithDefault(msg, 2, 0),
    measurement: (f = msg.getMeasurement()) && proto.opencannabis.structs.labtesting.TestValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoids.Result}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Cannabinoids.Result;
  return proto.opencannabis.structs.labtesting.Cannabinoids.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoids.Result}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.labtesting.Cannabinoid} */ (reader.readEnum());
      msg.setCannabinoid(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.structs.labtesting.CannabinoidRatio} */ (reader.readEnum());
      msg.setRatio(value);
      break;
    case 3:
      var value = new proto.opencannabis.structs.labtesting.TestValue;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Cannabinoids.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCannabinoid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRatio();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Cannabinoid cannabinoid = 1;
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoid}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.getCannabinoid = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.Cannabinoid} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.Cannabinoid} value */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.setCannabinoid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CannabinoidRatio ratio = 2;
 * @return {!proto.opencannabis.structs.labtesting.CannabinoidRatio}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.getRatio = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.CannabinoidRatio} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.CannabinoidRatio} value */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.setRatio = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TestValue measurement = 3;
 * @return {?proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.getMeasurement = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestValue, 3));
};


/** @param {?proto.opencannabis.structs.labtesting.TestValue|undefined} value */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.setMeasurement = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.clearMeasurement = function() {
  this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.Result.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TestValue thc = 1;
 * @return {?proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.getThc = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestValue, 1));
};


/** @param {?proto.opencannabis.structs.labtesting.TestValue|undefined} value */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.setThc = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.structs.labtesting.Cannabinoids.prototype.clearThc = function() {
  this.setThc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.hasThc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestValue cbd = 2;
 * @return {?proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.getCbd = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestValue, 2));
};


/** @param {?proto.opencannabis.structs.labtesting.TestValue|undefined} value */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.setCbd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.labtesting.Cannabinoids.prototype.clearCbd = function() {
  this.setCbd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.hasCbd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Result results = 3;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.Cannabinoids.Result>}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.labtesting.Cannabinoids.Result>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.labtesting.Cannabinoids.Result, 3));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.Cannabinoids.Result>} value */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.Cannabinoids.Result=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.labtesting.Cannabinoids.Result}
 */
proto.opencannabis.structs.labtesting.Cannabinoids.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opencannabis.structs.labtesting.Cannabinoids.Result, opt_index);
};


proto.opencannabis.structs.labtesting.Cannabinoids.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Subjective = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.labtesting.Subjective.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Subjective, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Subjective.displayName = 'proto.opencannabis.structs.labtesting.Subjective';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.labtesting.Subjective.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Subjective.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Subjective} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Subjective.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: (f = msg.getDescription()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    taste: (f = msg.getTaste()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    potency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    feelingTagsList: jspb.Message.getRepeatedField(msg, 4),
    tastingNotesList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Subjective}
 */
proto.opencannabis.structs.labtesting.Subjective.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Subjective;
  return proto.opencannabis.structs.labtesting.Subjective.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Subjective} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Subjective}
 */
proto.opencannabis.structs.labtesting.Subjective.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setTaste(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.structs.labtesting.PotencyEstimate} */ (reader.readEnum());
      msg.setPotency(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} */ (reader.readPackedEnum());
      msg.setFeelingTagsList(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (reader.readPackedEnum());
      msg.setTastingNotesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Subjective.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Subjective} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Subjective.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getTaste();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getPotency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFeelingTagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getTastingNotesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional opencannabis.content.Content description = 1;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.getDescription = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 1));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.structs.labtesting.Subjective.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.structs.labtesting.Subjective.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.content.Content taste = 2;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.getTaste = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 2));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.structs.labtesting.Subjective.prototype.setTaste = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.labtesting.Subjective.prototype.clearTaste = function() {
  this.setTaste(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.hasTaste = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PotencyEstimate potency = 3;
 * @return {!proto.opencannabis.structs.labtesting.PotencyEstimate}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.getPotency = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.PotencyEstimate} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.PotencyEstimate} value */
proto.opencannabis.structs.labtesting.Subjective.prototype.setPotency = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Feeling feeling_tags = 4;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.Feeling>}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.getFeelingTagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} value */
proto.opencannabis.structs.labtesting.Subjective.prototype.setFeelingTagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.Feeling} value
 * @param {number=} opt_index
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.addFeelingTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.opencannabis.structs.labtesting.Subjective.prototype.clearFeelingTagsList = function() {
  this.setFeelingTagsList([]);
};


/**
 * repeated TasteNote tasting_notes = 5;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>}
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.getTastingNotesList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} value */
proto.opencannabis.structs.labtesting.Subjective.prototype.setTastingNotesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.TasteNote} value
 * @param {number=} opt_index
 */
proto.opencannabis.structs.labtesting.Subjective.prototype.addTastingNotes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.opencannabis.structs.labtesting.Subjective.prototype.clearTastingNotesList = function() {
  this.setTastingNotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Terpenes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.labtesting.Terpenes.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Terpenes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Terpenes.displayName = 'proto.opencannabis.structs.labtesting.Terpenes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.labtesting.Terpenes.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Terpenes.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Terpenes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Terpenes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Terpenes.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: jspb.Message.getFieldWithDefault(msg, 1, false),
    terpenesList: jspb.Message.toObjectList(msg.getTerpenesList(),
    proto.opencannabis.structs.labtesting.Terpenes.Result.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Terpenes}
 */
proto.opencannabis.structs.labtesting.Terpenes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Terpenes;
  return proto.opencannabis.structs.labtesting.Terpenes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Terpenes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Terpenes}
 */
proto.opencannabis.structs.labtesting.Terpenes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 10:
      var value = new proto.opencannabis.structs.labtesting.Terpenes.Result;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Terpenes.Result.deserializeBinaryFromReader);
      msg.addTerpenes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Terpenes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Terpenes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Terpenes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Terpenes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTerpenesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.opencannabis.structs.labtesting.Terpenes.Result.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Terpenes.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Terpenes.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Terpenes.Result.displayName = 'proto.opencannabis.structs.labtesting.Terpenes.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Terpenes.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Terpenes.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    terpene: jspb.Message.getFieldWithDefault(msg, 1, 0),
    measurement: (f = msg.getMeasurement()) && proto.opencannabis.structs.labtesting.TestValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Terpenes.Result}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Terpenes.Result;
  return proto.opencannabis.structs.labtesting.Terpenes.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Terpenes.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Terpenes.Result}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.labtesting.Terpene} */ (reader.readEnum());
      msg.setTerpene(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.labtesting.TestValue;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Terpenes.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Terpenes.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerpene();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Terpene terpene = 1;
 * @return {!proto.opencannabis.structs.labtesting.Terpene}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.getTerpene = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.Terpene} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.Terpene} value */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.setTerpene = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TestValue measurement = 2;
 * @return {?proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.getMeasurement = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestValue, 2));
};


/** @param {?proto.opencannabis.structs.labtesting.TestValue|undefined} value */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.setMeasurement = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.clearMeasurement = function() {
  this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Terpenes.Result.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool available = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.labtesting.Terpenes.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.labtesting.Terpenes.prototype.setAvailable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Result terpenes = 10;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.Terpenes.Result>}
 */
proto.opencannabis.structs.labtesting.Terpenes.prototype.getTerpenesList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.labtesting.Terpenes.Result>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.labtesting.Terpenes.Result, 10));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.Terpenes.Result>} value */
proto.opencannabis.structs.labtesting.Terpenes.prototype.setTerpenesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.Terpenes.Result=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.labtesting.Terpenes.Result}
 */
proto.opencannabis.structs.labtesting.Terpenes.prototype.addTerpenes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.opencannabis.structs.labtesting.Terpenes.Result, opt_index);
};


proto.opencannabis.structs.labtesting.Terpenes.prototype.clearTerpenesList = function() {
  this.setTerpenesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Pesticides = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Pesticides, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Pesticides.displayName = 'proto.opencannabis.structs.labtesting.Pesticides';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Pesticides.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Pesticides.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Pesticides} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Pesticides.toObject = function(includeInstance, msg) {
  var f, obj = {
    pesticideFree: jspb.Message.getFieldWithDefault(msg, 1, false),
    measurementsMap: (f = msg.getMeasurementsMap()) ? f.toObject(includeInstance, proto.opencannabis.structs.labtesting.TestValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Pesticides}
 */
proto.opencannabis.structs.labtesting.Pesticides.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Pesticides;
  return proto.opencannabis.structs.labtesting.Pesticides.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Pesticides} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Pesticides}
 */
proto.opencannabis.structs.labtesting.Pesticides.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPesticideFree(value);
      break;
    case 2:
      var value = msg.getMeasurementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Pesticides.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Pesticides.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Pesticides} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Pesticides.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPesticideFree();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMeasurementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter);
  }
};


/**
 * optional bool pesticide_free = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.labtesting.Pesticides.prototype.getPesticideFree = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.labtesting.Pesticides.prototype.setPesticideFree = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * map<string, TestValue> measurements = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.structs.labtesting.TestValue>}
 */
proto.opencannabis.structs.labtesting.Pesticides.prototype.getMeasurementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.structs.labtesting.TestValue>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.opencannabis.structs.labtesting.TestValue));
};


proto.opencannabis.structs.labtesting.Pesticides.prototype.clearMeasurementsMap = function() {
  this.getMeasurementsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.Moisture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.Moisture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.Moisture.displayName = 'proto.opencannabis.structs.labtesting.Moisture';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.Moisture.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.Moisture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.Moisture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Moisture.toObject = function(includeInstance, msg) {
  var f, obj = {
    measurement: (f = msg.getMeasurement()) && proto.opencannabis.structs.labtesting.TestValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.Moisture}
 */
proto.opencannabis.structs.labtesting.Moisture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.Moisture;
  return proto.opencannabis.structs.labtesting.Moisture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.Moisture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.Moisture}
 */
proto.opencannabis.structs.labtesting.Moisture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.structs.labtesting.TestValue;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestValue.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.Moisture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.Moisture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.Moisture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.Moisture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.structs.labtesting.TestValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional TestValue measurement = 1;
 * @return {?proto.opencannabis.structs.labtesting.TestValue}
 */
proto.opencannabis.structs.labtesting.Moisture.prototype.getMeasurement = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestValue} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestValue, 1));
};


/** @param {?proto.opencannabis.structs.labtesting.TestValue|undefined} value */
proto.opencannabis.structs.labtesting.Moisture.prototype.setMeasurement = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.structs.labtesting.Moisture.prototype.clearMeasurement = function() {
  this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.Moisture.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.Cannabinoid = {
  THC: 0,
  THC_A: 1,
  THC_V: 2,
  CBD: 10,
  CBD_A: 11,
  CBD_V: 12,
  CBD_VA: 13,
  CBC: 20,
  CBG: 30,
  CBG_A: 31,
  CBN: 40,
  CBV: 50,
  CBV_A: 51
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.CannabinoidRatio = {
  NO_CANNABINOID_PREFERENCE: 0,
  THC_ONLY: 1,
  THC_OVER_CBD: 2,
  EQUAL: 3,
  CBD_OVER_THC: 4,
  CBD_ONLY: 5
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.Feeling = {
  NO_FEELING_PREFERENCE: 0,
  GROUNDING: 1,
  SLEEP: 2,
  CALMING: 3,
  STIMULATING: 4,
  FUNNY: 5,
  FOCUS: 6,
  PASSION: 7
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.TasteNote = {
  NO_TASTE_PREFERENCE: 0,
  SWEET: 1,
  SOUR: 2,
  SPICE: 3,
  SMOOTH: 4,
  CITRUS: 5,
  PINE: 6,
  FRUIT: 7,
  TROPICS: 8,
  FLORAL: 9,
  HERB: 10,
  EARTH: 11
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.PotencyEstimate = {
  LIGHT: 0,
  MEDIUM: 1,
  HEAVY: 2,
  SUPER: 3
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.labtesting.Terpene = {
  CAMPHENE: 0,
  CARENE: 1,
  BETA_CARYOPHYLLENE: 2,
  CARYOPHYLLENE_OXIDE: 3,
  EUCALYPTOL: 4,
  FENCHOL: 5,
  ALPHA_HUMULENE: 6,
  LIMONENE: 7,
  LINALOOL: 8,
  MYRCENE: 9,
  ALPHA_OCIMENE: 10,
  BETA_OCIMENE: 11,
  ALPHA_PHELLANDRENE: 12,
  ALPHA_PINENE: 13,
  BETA_PINENE: 14,
  ALPHA_TERPINEOL: 15,
  ALPHA_TERPININE: 16,
  GAMMA_TERPININE: 17,
  TERPINOLENE: 18
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.security.access.PartnerAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.security.access.PartnerAccess.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.security.access.PartnerAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.security.access.PartnerAccess.displayName = 'proto.bloombox.schema.security.access.PartnerAccess';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.security.access.PartnerAccess.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.security.access.PartnerAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.security.access.PartnerAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.access.PartnerAccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    grantedBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    grantedAt: (f = msg.getGrantedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    privilegesList: jspb.Message.getRepeatedField(msg, 4),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.bloombox.schema.security.access.LocationAccess.toObject, includeInstance),
    allLocations: jspb.Message.getFieldWithDefault(msg, 6, false),
    admin: jspb.Message.getFieldWithDefault(msg, 100, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.security.access.PartnerAccess}
 */
proto.bloombox.schema.security.access.PartnerAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.security.access.PartnerAccess;
  return proto.bloombox.schema.security.access.PartnerAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.security.access.PartnerAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.security.access.PartnerAccess}
 */
proto.bloombox.schema.security.access.PartnerAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantedBy(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setGrantedAt(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.bloombox.schema.security.access.PartnerPermission>} */ (reader.readPackedEnum());
      msg.setPrivilegesList(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.security.access.LocationAccess;
      reader.readMessage(value,proto.bloombox.schema.security.access.LocationAccess.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllLocations(value);
      break;
    case 100:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.security.access.PartnerAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.security.access.PartnerAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.access.PartnerAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGrantedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGrantedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getPrivilegesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bloombox.schema.security.access.LocationAccess.serializeBinaryToWriter
    );
  }
  f = message.getAllLocations();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      100,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string granted_by = 2;
 * @return {string}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getGrantedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setGrantedBy = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant granted_at = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getGrantedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setGrantedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.security.access.PartnerAccess.prototype.clearGrantedAt = function() {
  this.setGrantedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.hasGrantedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PartnerPermission privileges = 4;
 * @return {!Array.<!proto.bloombox.schema.security.access.PartnerPermission>}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getPrivilegesList = function() {
  return /** @type {!Array.<!proto.bloombox.schema.security.access.PartnerPermission>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.bloombox.schema.security.access.PartnerPermission>} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setPrivilegesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.bloombox.schema.security.access.PartnerPermission} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.addPrivileges = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.bloombox.schema.security.access.PartnerAccess.prototype.clearPrivilegesList = function() {
  this.setPrivilegesList([]);
};


/**
 * repeated LocationAccess locations = 5;
 * @return {!Array.<!proto.bloombox.schema.security.access.LocationAccess>}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getLocationsList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.security.access.LocationAccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.security.access.LocationAccess, 5));
};


/** @param {!Array.<!proto.bloombox.schema.security.access.LocationAccess>} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bloombox.schema.security.access.LocationAccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.security.access.LocationAccess}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bloombox.schema.security.access.LocationAccess, opt_index);
};


proto.bloombox.schema.security.access.PartnerAccess.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};


/**
 * optional bool all_locations = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getAllLocations = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setAllLocations = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool admin = 100;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.security.access.PartnerAccess.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 100, false));
};


/** @param {boolean} value */
proto.bloombox.schema.security.access.PartnerAccess.prototype.setAdmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.security.access.LocationAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.security.access.LocationAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.security.access.LocationAccess.displayName = 'proto.bloombox.schema.security.access.LocationAccess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.security.access.LocationAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.security.access.LocationAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.access.LocationAccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    grantedBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    grantedAt: (f = msg.getGrantedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    admin: jspb.Message.getFieldWithDefault(msg, 100, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.security.access.LocationAccess}
 */
proto.bloombox.schema.security.access.LocationAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.security.access.LocationAccess;
  return proto.bloombox.schema.security.access.LocationAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.security.access.LocationAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.security.access.LocationAccess}
 */
proto.bloombox.schema.security.access.LocationAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantedBy(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setGrantedAt(value);
      break;
    case 100:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.security.access.LocationAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.security.access.LocationAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.access.LocationAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGrantedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGrantedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      100,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.security.access.LocationAccess.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string granted_by = 2;
 * @return {string}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.getGrantedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.security.access.LocationAccess.prototype.setGrantedBy = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant granted_at = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.getGrantedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.security.access.LocationAccess.prototype.setGrantedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.security.access.LocationAccess.prototype.clearGrantedAt = function() {
  this.setGrantedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.hasGrantedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool admin = 100;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.security.access.LocationAccess.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 100, false));
};


/** @param {boolean} value */
proto.bloombox.schema.security.access.LocationAccess.prototype.setAdmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 100, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.security.access.PartnerPermission = {
  OWNER: 0,
  SUPERVISOR: 1,
  BILLING: 2,
  AUDIT: 3,
  READONLY: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.UserKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.UserKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.UserKey.displayName = 'proto.bloombox.schema.identity.UserKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.UserKey.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.UserKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.UserKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.UserKey}
 */
proto.bloombox.schema.identity.UserKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.UserKey;
  return proto.bloombox.schema.identity.UserKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.UserKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.UserKey}
 */
proto.bloombox.schema.identity.UserKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.UserKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.UserKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.UserKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.UserKey.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.UserKey.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identity = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.UserKey.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.UserKey.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.identity.User.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.identity.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.User.displayName = 'proto.bloombox.schema.identity.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.identity.User.repeatedFields_ = [20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.User.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flags: (f = msg.getFlags()) && proto.bloombox.schema.identity.UserFlags.toObject(includeInstance, f),
    person: (f = msg.getPerson()) && proto.opencannabis.person.Person.toObject(includeInstance, f),
    identificationList: jspb.Message.toObjectList(msg.getIdentificationList(),
    proto.bloombox.schema.identity.ID.toObject, includeInstance),
    doctorRecList: jspb.Message.toObjectList(msg.getDoctorRecList(),
    proto.bloombox.schema.identity.ids.UserDoctorRec.toObject, includeInstance),
    seen: (f = msg.getSeen()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    signup: (f = msg.getSignup()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    identitiesMap: (f = msg.getIdentitiesMap()) ? f.toObject(includeInstance, proto.bloombox.schema.identity.UserIdentity.toObject) : [],
    mediaMap: (f = msg.getMediaMap()) ? f.toObject(includeInstance, proto.opencannabis.media.MediaItem.toObject) : [],
    consumer: (f = msg.getConsumer()) && proto.bloombox.schema.identity.ConsumerProfile.toObject(includeInstance, f),
    industry: (f = msg.getIndustry()) && proto.bloombox.schema.identity.IndustryProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.User}
 */
proto.bloombox.schema.identity.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.User;
  return proto.bloombox.schema.identity.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.User}
 */
proto.bloombox.schema.identity.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.identity.UserFlags;
      reader.readMessage(value,proto.bloombox.schema.identity.UserFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 3:
      var value = new proto.opencannabis.person.Person;
      reader.readMessage(value,proto.opencannabis.person.Person.deserializeBinaryFromReader);
      msg.setPerson(value);
      break;
    case 20:
      var value = new proto.bloombox.schema.identity.ID;
      reader.readMessage(value,proto.bloombox.schema.identity.ID.deserializeBinaryFromReader);
      msg.addIdentification(value);
      break;
    case 21:
      var value = new proto.bloombox.schema.identity.ids.UserDoctorRec;
      reader.readMessage(value,proto.bloombox.schema.identity.ids.UserDoctorRec.deserializeBinaryFromReader);
      msg.addDoctorRec(value);
      break;
    case 30:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSeen(value);
      break;
    case 31:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSignup(value);
      break;
    case 40:
      var value = msg.getIdentitiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bloombox.schema.identity.UserIdentity.deserializeBinaryFromReader);
         });
      break;
    case 41:
      var value = msg.getMediaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
         });
      break;
    case 100:
      var value = new proto.bloombox.schema.identity.ConsumerProfile;
      reader.readMessage(value,proto.bloombox.schema.identity.ConsumerProfile.deserializeBinaryFromReader);
      msg.setConsumer(value);
      break;
    case 101:
      var value = new proto.bloombox.schema.identity.IndustryProfile;
      reader.readMessage(value,proto.bloombox.schema.identity.IndustryProfile.deserializeBinaryFromReader);
      msg.setIndustry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.identity.UserFlags.serializeBinaryToWriter
    );
  }
  f = message.getPerson();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.person.Person.serializeBinaryToWriter
    );
  }
  f = message.getIdentificationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.bloombox.schema.identity.ID.serializeBinaryToWriter
    );
  }
  f = message.getDoctorRecList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.bloombox.schema.identity.ids.UserDoctorRec.serializeBinaryToWriter
    );
  }
  f = message.getSeen();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getSignup();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getIdentitiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(40, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bloombox.schema.identity.UserIdentity.serializeBinaryToWriter);
  }
  f = message.getMediaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(41, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.media.MediaItem.serializeBinaryToWriter);
  }
  f = message.getConsumer();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.bloombox.schema.identity.ConsumerProfile.serializeBinaryToWriter
    );
  }
  f = message.getIndustry();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.bloombox.schema.identity.IndustryProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.bloombox.schema.identity.User.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.User.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserFlags flags = 2;
 * @return {?proto.bloombox.schema.identity.UserFlags}
 */
proto.bloombox.schema.identity.User.prototype.getFlags = function() {
  return /** @type{?proto.bloombox.schema.identity.UserFlags} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.UserFlags, 2));
};


/** @param {?proto.bloombox.schema.identity.UserFlags|undefined} value */
proto.bloombox.schema.identity.User.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.identity.User.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.person.Person person = 3;
 * @return {?proto.opencannabis.person.Person}
 */
proto.bloombox.schema.identity.User.prototype.getPerson = function() {
  return /** @type{?proto.opencannabis.person.Person} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Person, 3));
};


/** @param {?proto.opencannabis.person.Person|undefined} value */
proto.bloombox.schema.identity.User.prototype.setPerson = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.identity.User.prototype.clearPerson = function() {
  this.setPerson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasPerson = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ID identification = 20;
 * @return {!Array.<!proto.bloombox.schema.identity.ID>}
 */
proto.bloombox.schema.identity.User.prototype.getIdentificationList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.identity.ID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.identity.ID, 20));
};


/** @param {!Array.<!proto.bloombox.schema.identity.ID>} value */
proto.bloombox.schema.identity.User.prototype.setIdentificationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.bloombox.schema.identity.ID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.identity.ID}
 */
proto.bloombox.schema.identity.User.prototype.addIdentification = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.bloombox.schema.identity.ID, opt_index);
};


proto.bloombox.schema.identity.User.prototype.clearIdentificationList = function() {
  this.setIdentificationList([]);
};


/**
 * repeated ids.UserDoctorRec doctor_rec = 21;
 * @return {!Array.<!proto.bloombox.schema.identity.ids.UserDoctorRec>}
 */
proto.bloombox.schema.identity.User.prototype.getDoctorRecList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.identity.ids.UserDoctorRec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.identity.ids.UserDoctorRec, 21));
};


/** @param {!Array.<!proto.bloombox.schema.identity.ids.UserDoctorRec>} value */
proto.bloombox.schema.identity.User.prototype.setDoctorRecList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.bloombox.schema.identity.ids.UserDoctorRec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.identity.ids.UserDoctorRec}
 */
proto.bloombox.schema.identity.User.prototype.addDoctorRec = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.bloombox.schema.identity.ids.UserDoctorRec, opt_index);
};


proto.bloombox.schema.identity.User.prototype.clearDoctorRecList = function() {
  this.setDoctorRecList([]);
};


/**
 * optional opencannabis.temporal.Instant seen = 30;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.User.prototype.getSeen = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 30));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.User.prototype.setSeen = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.bloombox.schema.identity.User.prototype.clearSeen = function() {
  this.setSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasSeen = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional opencannabis.temporal.Instant signup = 31;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.User.prototype.getSignup = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 31));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.User.prototype.setSignup = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.bloombox.schema.identity.User.prototype.clearSignup = function() {
  this.setSignup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasSignup = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * map<string, UserIdentity> identities = 40;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bloombox.schema.identity.UserIdentity>}
 */
proto.bloombox.schema.identity.User.prototype.getIdentitiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bloombox.schema.identity.UserIdentity>} */ (
      jspb.Message.getMapField(this, 40, opt_noLazyCreate,
      proto.bloombox.schema.identity.UserIdentity));
};


proto.bloombox.schema.identity.User.prototype.clearIdentitiesMap = function() {
  this.getIdentitiesMap().clear();
};


/**
 * map<string, opencannabis.media.MediaItem> media = 41;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.media.MediaItem>}
 */
proto.bloombox.schema.identity.User.prototype.getMediaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.media.MediaItem>} */ (
      jspb.Message.getMapField(this, 41, opt_noLazyCreate,
      proto.opencannabis.media.MediaItem));
};


proto.bloombox.schema.identity.User.prototype.clearMediaMap = function() {
  this.getMediaMap().clear();
};


/**
 * optional ConsumerProfile consumer = 100;
 * @return {?proto.bloombox.schema.identity.ConsumerProfile}
 */
proto.bloombox.schema.identity.User.prototype.getConsumer = function() {
  return /** @type{?proto.bloombox.schema.identity.ConsumerProfile} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ConsumerProfile, 100));
};


/** @param {?proto.bloombox.schema.identity.ConsumerProfile|undefined} value */
proto.bloombox.schema.identity.User.prototype.setConsumer = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.bloombox.schema.identity.User.prototype.clearConsumer = function() {
  this.setConsumer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasConsumer = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional IndustryProfile industry = 101;
 * @return {?proto.bloombox.schema.identity.IndustryProfile}
 */
proto.bloombox.schema.identity.User.prototype.getIndustry = function() {
  return /** @type{?proto.bloombox.schema.identity.IndustryProfile} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.IndustryProfile, 101));
};


/** @param {?proto.bloombox.schema.identity.IndustryProfile|undefined} value */
proto.bloombox.schema.identity.User.prototype.setIndustry = function(value) {
  jspb.Message.setWrapperField(this, 101, value);
};


proto.bloombox.schema.identity.User.prototype.clearIndustry = function() {
  this.setIndustry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.User.prototype.hasIndustry = function() {
  return jspb.Message.getField(this, 101) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.UserFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.UserFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.UserFlags.displayName = 'proto.bloombox.schema.identity.UserFlags';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.UserFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.UserFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.UserFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    validated: jspb.Message.getFieldWithDefault(msg, 1, false),
    suspended: jspb.Message.getFieldWithDefault(msg, 2, false),
    admin: jspb.Message.getFieldWithDefault(msg, 3, false),
    beta: jspb.Message.getFieldWithDefault(msg, 4, false),
    sandbox: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.UserFlags}
 */
proto.bloombox.schema.identity.UserFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.UserFlags;
  return proto.bloombox.schema.identity.UserFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.UserFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.UserFlags}
 */
proto.bloombox.schema.identity.UserFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeta(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSandbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.UserFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.UserFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.UserFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBeta();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSandbox();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool validated = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.UserFlags.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.UserFlags.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool suspended = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.UserFlags.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.UserFlags.prototype.setSuspended = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool admin = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.UserFlags.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.UserFlags.prototype.setAdmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool beta = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.UserFlags.prototype.getBeta = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.UserFlags.prototype.setBeta = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool sandbox = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.UserFlags.prototype.getSandbox = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.UserFlags.prototype.setSandbox = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.UserIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.UserIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.UserIdentity.displayName = 'proto.bloombox.schema.identity.UserIdentity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.UserIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.UserIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seen: (f = msg.getSeen()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.UserIdentity}
 */
proto.bloombox.schema.identity.UserIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.UserIdentity;
  return proto.bloombox.schema.identity.UserIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.UserIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.UserIdentity}
 */
proto.bloombox.schema.identity.UserIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.IdentityProvider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSeen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.UserIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.UserIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.UserIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeen();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional IdentityProvider provider = 1;
 * @return {!proto.bloombox.schema.identity.IdentityProvider}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.getProvider = function() {
  return /** @type {!proto.bloombox.schema.identity.IdentityProvider} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.IdentityProvider} value */
proto.bloombox.schema.identity.UserIdentity.prototype.setProvider = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.UserIdentity.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant seen = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.getSeen = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.UserIdentity.prototype.setSeen = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.identity.UserIdentity.prototype.clearSeen = function() {
  this.setSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.UserIdentity.prototype.hasSeen = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ConsumerProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.identity.ConsumerProfile.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.identity.ConsumerProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ConsumerProfile.displayName = 'proto.bloombox.schema.identity.ConsumerProfile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.identity.ConsumerProfile.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ConsumerProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ConsumerProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    favoriteDispensariesList: jspb.Message.getRepeatedField(msg, 2),
    enrollmentSource: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enrollmentChannel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    preferences: (f = msg.getPreferences()) && proto.bloombox.schema.identity.ConsumerPreferences.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ConsumerProfile}
 */
proto.bloombox.schema.identity.ConsumerProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ConsumerProfile;
  return proto.bloombox.schema.identity.ConsumerProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ConsumerProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ConsumerProfile}
 */
proto.bloombox.schema.identity.ConsumerProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFavoriteDispensaries(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (reader.readEnum());
      msg.setEnrollmentSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnrollmentChannel(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.identity.ConsumerPreferences;
      reader.readMessage(value,proto.bloombox.schema.identity.ConsumerPreferences.deserializeBinaryFromReader);
      msg.setPreferences(value);
      break;
    case 6:
      var value = /** @type {!proto.bloombox.schema.identity.ConsumerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ConsumerProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ConsumerProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFavoriteDispensariesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEnrollmentSource();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEnrollmentChannel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPreferences();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.identity.ConsumerPreferences.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string favorite_dispensaries = 2;
 * @return {!Array.<string>}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getFavoriteDispensariesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setFavoriteDispensariesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.addFavoriteDispensaries = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.bloombox.schema.identity.ConsumerProfile.prototype.clearFavoriteDispensariesList = function() {
  this.setFavoriteDispensariesList([]);
};


/**
 * optional EnrollmentSource enrollment_source = 3;
 * @return {!proto.bloombox.schema.identity.EnrollmentSource}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getEnrollmentSource = function() {
  return /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.identity.EnrollmentSource} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setEnrollmentSource = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string enrollment_channel = 4;
 * @return {string}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getEnrollmentChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setEnrollmentChannel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ConsumerPreferences preferences = 5;
 * @return {?proto.bloombox.schema.identity.ConsumerPreferences}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getPreferences = function() {
  return /** @type{?proto.bloombox.schema.identity.ConsumerPreferences} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ConsumerPreferences, 5));
};


/** @param {?proto.bloombox.schema.identity.ConsumerPreferences|undefined} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setPreferences = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.identity.ConsumerProfile.prototype.clearPreferences = function() {
  this.setPreferences(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.hasPreferences = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConsumerType type = 6;
 * @return {!proto.bloombox.schema.identity.ConsumerType}
 */
proto.bloombox.schema.identity.ConsumerProfile.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.identity.ConsumerType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.bloombox.schema.identity.ConsumerType} value */
proto.bloombox.schema.identity.ConsumerProfile.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.MenuPreferences = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.identity.MenuPreferences.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.identity.MenuPreferences, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.MenuPreferences.displayName = 'proto.bloombox.schema.identity.MenuPreferences';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.identity.MenuPreferences.repeatedFields_ = [1,2,3,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.MenuPreferences.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.MenuPreferences} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.MenuPreferences.toObject = function(includeInstance, msg) {
  var f, obj = {
    sectionList: jspb.Message.getRepeatedField(msg, 1),
    feelingList: jspb.Message.getRepeatedField(msg, 2),
    tasteNoteList: jspb.Message.getRepeatedField(msg, 3),
    desiredPotency: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cannabinoidRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
    speciesList: jspb.Message.getRepeatedField(msg, 6),
    growList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.MenuPreferences}
 */
proto.bloombox.schema.identity.MenuPreferences.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.MenuPreferences;
  return proto.bloombox.schema.identity.MenuPreferences.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.MenuPreferences} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.MenuPreferences}
 */
proto.bloombox.schema.identity.MenuPreferences.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (reader.readPackedEnum());
      msg.setSectionList(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} */ (reader.readPackedEnum());
      msg.setFeelingList(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (reader.readPackedEnum());
      msg.setTasteNoteList(value);
      break;
    case 4:
      var value = /** @type {!proto.opencannabis.structs.labtesting.PotencyEstimate} */ (reader.readEnum());
      msg.setDesiredPotency(value);
      break;
    case 5:
      var value = /** @type {!proto.opencannabis.structs.labtesting.CannabinoidRatio} */ (reader.readEnum());
      msg.setCannabinoidRatio(value);
      break;
    case 6:
      var value = /** @type {!Array.<!proto.opencannabis.structs.Species>} */ (reader.readPackedEnum());
      msg.setSpeciesList(value);
      break;
    case 7:
      var value = /** @type {!Array.<!proto.opencannabis.structs.Grow>} */ (reader.readPackedEnum());
      msg.setGrowList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.MenuPreferences.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.MenuPreferences} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.MenuPreferences.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSectionList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getFeelingList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getTasteNoteList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getDesiredPotency();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCannabinoidRatio();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSpeciesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getGrowList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
};


/**
 * repeated opencannabis.products.menu.section.Section section = 1;
 * @return {!Array.<!proto.opencannabis.products.menu.section.Section>}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getSectionList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.opencannabis.products.menu.section.Section>} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setSectionList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.opencannabis.products.menu.section.Section} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.addSection = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.bloombox.schema.identity.MenuPreferences.prototype.clearSectionList = function() {
  this.setSectionList([]);
};


/**
 * repeated opencannabis.structs.labtesting.Feeling feeling = 2;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.Feeling>}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getFeelingList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.Feeling>} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setFeelingList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.Feeling} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.addFeeling = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.bloombox.schema.identity.MenuPreferences.prototype.clearFeelingList = function() {
  this.setFeelingList([]);
};


/**
 * repeated opencannabis.structs.labtesting.TasteNote taste_note = 3;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getTasteNoteList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.TasteNote>} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setTasteNoteList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.TasteNote} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.addTasteNote = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.bloombox.schema.identity.MenuPreferences.prototype.clearTasteNoteList = function() {
  this.setTasteNoteList([]);
};


/**
 * optional opencannabis.structs.labtesting.PotencyEstimate desired_potency = 4;
 * @return {!proto.opencannabis.structs.labtesting.PotencyEstimate}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getDesiredPotency = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.PotencyEstimate} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.PotencyEstimate} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setDesiredPotency = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional opencannabis.structs.labtesting.CannabinoidRatio cannabinoid_ratio = 5;
 * @return {!proto.opencannabis.structs.labtesting.CannabinoidRatio}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getCannabinoidRatio = function() {
  return /** @type {!proto.opencannabis.structs.labtesting.CannabinoidRatio} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.opencannabis.structs.labtesting.CannabinoidRatio} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setCannabinoidRatio = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated opencannabis.structs.Species species = 6;
 * @return {!Array.<!proto.opencannabis.structs.Species>}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getSpeciesList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.Species>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<!proto.opencannabis.structs.Species>} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setSpeciesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.opencannabis.structs.Species} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.addSpecies = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.bloombox.schema.identity.MenuPreferences.prototype.clearSpeciesList = function() {
  this.setSpeciesList([]);
};


/**
 * repeated opencannabis.structs.Grow grow = 7;
 * @return {!Array.<!proto.opencannabis.structs.Grow>}
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.getGrowList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.Grow>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<!proto.opencannabis.structs.Grow>} value */
proto.bloombox.schema.identity.MenuPreferences.prototype.setGrowList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.opencannabis.structs.Grow} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.identity.MenuPreferences.prototype.addGrow = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.bloombox.schema.identity.MenuPreferences.prototype.clearGrowList = function() {
  this.setGrowList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ConsumerPreferences = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.ConsumerPreferences, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ConsumerPreferences.displayName = 'proto.bloombox.schema.identity.ConsumerPreferences';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ConsumerPreferences.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ConsumerPreferences.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ConsumerPreferences} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerPreferences.toObject = function(includeInstance, msg) {
  var f, obj = {
    menu: (f = msg.getMenu()) && proto.bloombox.schema.identity.MenuPreferences.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ConsumerPreferences}
 */
proto.bloombox.schema.identity.ConsumerPreferences.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ConsumerPreferences;
  return proto.bloombox.schema.identity.ConsumerPreferences.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ConsumerPreferences} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ConsumerPreferences}
 */
proto.bloombox.schema.identity.ConsumerPreferences.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.bloombox.schema.identity.MenuPreferences;
      reader.readMessage(value,proto.bloombox.schema.identity.MenuPreferences.deserializeBinaryFromReader);
      msg.setMenu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ConsumerPreferences.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ConsumerPreferences.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ConsumerPreferences} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerPreferences.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMenu();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.identity.MenuPreferences.serializeBinaryToWriter
    );
  }
};


/**
 * optional MenuPreferences menu = 10;
 * @return {?proto.bloombox.schema.identity.MenuPreferences}
 */
proto.bloombox.schema.identity.ConsumerPreferences.prototype.getMenu = function() {
  return /** @type{?proto.bloombox.schema.identity.MenuPreferences} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.MenuPreferences, 10));
};


/** @param {?proto.bloombox.schema.identity.MenuPreferences|undefined} value */
proto.bloombox.schema.identity.ConsumerPreferences.prototype.setMenu = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.bloombox.schema.identity.ConsumerPreferences.prototype.clearMenu = function() {
  this.setMenu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ConsumerPreferences.prototype.hasMenu = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.ConsumerMembership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.ConsumerMembership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.ConsumerMembership.displayName = 'proto.bloombox.schema.identity.ConsumerMembership';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.ConsumerMembership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.ConsumerMembership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerMembership.toObject = function(includeInstance, msg) {
  var f, obj = {
    referralSource: jspb.Message.getFieldWithDefault(msg, 1, 0),
    referralChannel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signedUpAt: (f = msg.getSignedUpAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    seen: (f = msg.getSeen()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    foreignId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.ConsumerMembership}
 */
proto.bloombox.schema.identity.ConsumerMembership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.ConsumerMembership;
  return proto.bloombox.schema.identity.ConsumerMembership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.ConsumerMembership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.ConsumerMembership}
 */
proto.bloombox.schema.identity.ConsumerMembership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (reader.readEnum());
      msg.setReferralSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferralChannel(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSignedUpAt(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSeen(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeignId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.ConsumerMembership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.ConsumerMembership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.ConsumerMembership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferralSource();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReferralChannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignedUpAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getSeen();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getForeignId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional EnrollmentSource referral_source = 1;
 * @return {!proto.bloombox.schema.identity.EnrollmentSource}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.getReferralSource = function() {
  return /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.EnrollmentSource} value */
proto.bloombox.schema.identity.ConsumerMembership.prototype.setReferralSource = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string referral_channel = 2;
 * @return {string}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.getReferralChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ConsumerMembership.prototype.setReferralChannel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant signed_up_at = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.getSignedUpAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.ConsumerMembership.prototype.setSignedUpAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.identity.ConsumerMembership.prototype.clearSignedUpAt = function() {
  this.setSignedUpAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.hasSignedUpAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.temporal.Instant seen = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.getSeen = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.identity.ConsumerMembership.prototype.setSeen = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.identity.ConsumerMembership.prototype.clearSeen = function() {
  this.setSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.hasSeen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string foreign_id = 5;
 * @return {string}
 */
proto.bloombox.schema.identity.ConsumerMembership.prototype.getForeignId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.identity.ConsumerMembership.prototype.setForeignId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.identity.IndustryProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.identity.IndustryProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.identity.IndustryProfile.displayName = 'proto.bloombox.schema.identity.IndustryProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.identity.IndustryProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.identity.IndustryProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.identity.IndustryProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.IndustryProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    partnersMap: (f = msg.getPartnersMap()) ? f.toObject(includeInstance, proto.bloombox.schema.security.access.PartnerAccess.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.identity.IndustryProfile}
 */
proto.bloombox.schema.identity.IndustryProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.identity.IndustryProfile;
  return proto.bloombox.schema.identity.IndustryProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.identity.IndustryProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.identity.IndustryProfile}
 */
proto.bloombox.schema.identity.IndustryProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = msg.getPartnersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bloombox.schema.security.access.PartnerAccess.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.identity.IndustryProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.identity.IndustryProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.identity.IndustryProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.identity.IndustryProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPartnersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bloombox.schema.security.access.PartnerAccess.serializeBinaryToWriter);
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.identity.IndustryProfile.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.identity.IndustryProfile.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * map<string, bloombox.schema.security.access.PartnerAccess> partners = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bloombox.schema.security.access.PartnerAccess>}
 */
proto.bloombox.schema.identity.IndustryProfile.prototype.getPartnersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bloombox.schema.security.access.PartnerAccess>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.bloombox.schema.security.access.PartnerAccess));
};


proto.bloombox.schema.identity.IndustryProfile.prototype.clearPartnersMap = function() {
  this.getPartnersMap().clear();
};


/**
 * @enum {number}
 */
proto.bloombox.schema.identity.UserMediaType = {
  PICTURE: 0,
  DRIVERS_LICENSE: 1,
  DOCTOR_REC: 2
};

/**
 * @enum {number}
 */
proto.bloombox.schema.identity.IdentityProvider = {
  EMAIL: 0,
  GOOGLE: 1,
  FACEBOOK: 2,
  TWITTER: 3
};

/**
 * @enum {number}
 */
proto.bloombox.schema.identity.EnrollmentSource = {
  UNSPECIFIED: 0,
  ONLINE: 1,
  INTERNAL_APP: 2,
  PARTNER_APP: 3,
  IN_STORE: 4,
  IMPORT: 5
};

/**
 * @enum {number}
 */
proto.bloombox.schema.identity.ConsumerType = {
  UNVALIDATED: 0,
  RECREATIONAL: 1,
  MEDICAL: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.security.AuthToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.security.AuthToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.security.AuthToken.displayName = 'proto.bloombox.schema.security.AuthToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.security.AuthToken.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.security.AuthToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.security.AuthToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.AuthToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoded: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.security.AuthToken}
 */
proto.bloombox.schema.security.AuthToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.security.AuthToken;
  return proto.bloombox.schema.security.AuthToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.security.AuthToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.security.AuthToken}
 */
proto.bloombox.schema.security.AuthToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.security.AuthToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.security.AuthToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.security.AuthToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.AuthToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoded();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string encoded = 1;
 * @return {string}
 */
proto.bloombox.schema.security.AuthToken.prototype.getEncoded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.security.AuthToken.prototype.setEncoded = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.security.DeviceToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.security.DeviceToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.security.DeviceToken.displayName = 'proto.bloombox.schema.security.DeviceToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.security.DeviceToken.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.security.DeviceToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.security.DeviceToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.DeviceToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.bloombox.schema.security.AuthToken.toObject(includeInstance, f),
    device: (f = msg.getDevice()) && proto.opencannabis.device.Device.toObject(includeInstance, f),
    issued: (f = msg.getIssued()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    expires: (f = msg.getExpires()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.security.DeviceToken}
 */
proto.bloombox.schema.security.DeviceToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.security.DeviceToken;
  return proto.bloombox.schema.security.DeviceToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.security.DeviceToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.security.DeviceToken}
 */
proto.bloombox.schema.security.DeviceToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.security.AuthToken;
      reader.readMessage(value,proto.bloombox.schema.security.AuthToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.opencannabis.device.Device;
      reader.readMessage(value,proto.opencannabis.device.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setIssued(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setExpires(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.security.DeviceToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.security.DeviceToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.security.DeviceToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.DeviceToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.security.AuthToken.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.device.Device.serializeBinaryToWriter
    );
  }
  f = message.getIssued();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getExpires();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuthToken token = 1;
 * @return {?proto.bloombox.schema.security.AuthToken}
 */
proto.bloombox.schema.security.DeviceToken.prototype.getToken = function() {
  return /** @type{?proto.bloombox.schema.security.AuthToken} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.security.AuthToken, 1));
};


/** @param {?proto.bloombox.schema.security.AuthToken|undefined} value */
proto.bloombox.schema.security.DeviceToken.prototype.setToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.security.DeviceToken.prototype.clearToken = function() {
  this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.DeviceToken.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.device.Device device = 2;
 * @return {?proto.opencannabis.device.Device}
 */
proto.bloombox.schema.security.DeviceToken.prototype.getDevice = function() {
  return /** @type{?proto.opencannabis.device.Device} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.device.Device, 2));
};


/** @param {?proto.opencannabis.device.Device|undefined} value */
proto.bloombox.schema.security.DeviceToken.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.security.DeviceToken.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.DeviceToken.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.temporal.Instant issued = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.security.DeviceToken.prototype.getIssued = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.security.DeviceToken.prototype.setIssued = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.security.DeviceToken.prototype.clearIssued = function() {
  this.setIssued(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.DeviceToken.prototype.hasIssued = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.temporal.Instant expires = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.security.DeviceToken.prototype.getExpires = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.security.DeviceToken.prototype.setExpires = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.security.DeviceToken.prototype.clearExpires = function() {
  this.setExpires(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.security.DeviceToken.prototype.hasExpires = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.security.IdentityToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.security.IdentityToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.security.IdentityToken.displayName = 'proto.bloombox.schema.security.IdentityToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.security.IdentityToken.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.security.IdentityToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.security.IdentityToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.IdentityToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    encoded: jspb.Message.getFieldWithDefault(msg, 2, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.security.IdentityToken}
 */
proto.bloombox.schema.security.IdentityToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.security.IdentityToken;
  return proto.bloombox.schema.security.IdentityToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.security.IdentityToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.security.IdentityToken}
 */
proto.bloombox.schema.security.IdentityToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoded(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.security.IdentityTokenIssuer} */ (reader.readEnum());
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.security.IdentityToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.security.IdentityToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.security.IdentityToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.security.IdentityToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEncoded();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIssuer();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.bloombox.schema.security.IdentityToken.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.security.IdentityToken.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string encoded = 2;
 * @return {string}
 */
proto.bloombox.schema.security.IdentityToken.prototype.getEncoded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.security.IdentityToken.prototype.setEncoded = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional IdentityTokenIssuer issuer = 3;
 * @return {!proto.bloombox.schema.security.IdentityTokenIssuer}
 */
proto.bloombox.schema.security.IdentityToken.prototype.getIssuer = function() {
  return /** @type {!proto.bloombox.schema.security.IdentityTokenIssuer} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.security.IdentityTokenIssuer} value */
proto.bloombox.schema.security.IdentityToken.prototype.setIssuer = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.security.IdentityTokenIssuer = {
  INTERNAL: 0,
  FIREBASE: 1,
  AUTH0: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.crypto.primitives.integrity.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_);
};
goog.inherits(proto.opencannabis.crypto.primitives.integrity.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.crypto.primitives.integrity.Hash.displayName = 'proto.opencannabis.crypto.primitives.integrity.Hash';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.DigestCase = {
  DIGEST_NOT_SET: 0,
  RAW: 2,
  HEX: 3,
  B64: 4
};

/**
 * @return {proto.opencannabis.crypto.primitives.integrity.Hash.DigestCase}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getDigestCase = function() {
  return /** @type {proto.opencannabis.crypto.primitives.integrity.Hash.DigestCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.crypto.primitives.integrity.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.crypto.primitives.integrity.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.crypto.primitives.integrity.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getFieldWithDefault(msg, 1, 0),
    raw: msg.getRaw_asB64(),
    hex: jspb.Message.getFieldWithDefault(msg, 3, ""),
    b64: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.crypto.primitives.integrity.Hash}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.crypto.primitives.integrity.Hash;
  return proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.crypto.primitives.integrity.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.crypto.primitives.integrity.Hash}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.crypto.primitives.integrity.HashAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setB64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.crypto.primitives.integrity.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.crypto.primitives.integrity.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.crypto.primitives.integrity.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional HashAlgorithm algorithm = 1;
 * @return {!proto.opencannabis.crypto.primitives.integrity.HashAlgorithm}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getAlgorithm = function() {
  return /** @type {!proto.opencannabis.crypto.primitives.integrity.HashAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.crypto.primitives.integrity.HashAlgorithm} value */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes raw = 2;
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw = 2;
 * This is a type-conversion wrapper around `getRaw()`
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getRaw_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRaw()));
};


/**
 * optional bytes raw = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRaw()`
 * @return {!Uint8Array}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getRaw_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRaw()));
};


/** @param {!(string|Uint8Array)} value */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.setRaw = function(value) {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], value);
};


proto.opencannabis.crypto.primitives.integrity.Hash.prototype.clearRaw = function() {
  jspb.Message.setOneofField(this, 2, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string hex = 3;
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.setHex = function(value) {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], value);
};


proto.opencannabis.crypto.primitives.integrity.Hash.prototype.clearHex = function() {
  jspb.Message.setOneofField(this, 3, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.hasHex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string b64 = 4;
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.getB64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.setB64 = function(value) {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], value);
};


proto.opencannabis.crypto.primitives.integrity.Hash.prototype.clearB64 = function() {
  jspb.Message.setOneofField(this, 4, proto.opencannabis.crypto.primitives.integrity.Hash.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.crypto.primitives.integrity.Hash.prototype.hasB64 = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.crypto.primitives.integrity.HashedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.crypto.primitives.integrity.HashedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.crypto.primitives.integrity.HashedData.displayName = 'proto.opencannabis.crypto.primitives.integrity.HashedData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.crypto.primitives.integrity.HashedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.crypto.primitives.integrity.HashedData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    hash: (f = msg.getHash()) && proto.opencannabis.crypto.primitives.integrity.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.crypto.primitives.integrity.HashedData}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.crypto.primitives.integrity.HashedData;
  return proto.opencannabis.crypto.primitives.integrity.HashedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.crypto.primitives.integrity.HashedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.crypto.primitives.integrity.HashedData}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.opencannabis.crypto.primitives.integrity.Hash;
      reader.readMessage(value,proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.crypto.primitives.integrity.HashedData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.crypto.primitives.integrity.HashedData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.crypto.primitives.integrity.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Hash hash = 2;
 * @return {?proto.opencannabis.crypto.primitives.integrity.Hash}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.getHash = function() {
  return /** @type{?proto.opencannabis.crypto.primitives.integrity.Hash} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.crypto.primitives.integrity.Hash, 2));
};


/** @param {?proto.opencannabis.crypto.primitives.integrity.Hash|undefined} value */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.setHash = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.clearHash = function() {
  this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.crypto.primitives.integrity.HashedData.prototype.hasHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.crypto.primitives.integrity.HashAlgorithm = {
  SHA1: 0,
  MD5: 1,
  SHA256: 2,
  SHA384: 3,
  SHA512: 4,
  MURMUR: 6
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.Shelf = {
  ECONOMY: 0,
  MIDSHELF: 1,
  TOPSHELF: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.Genetics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.Genetics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.Genetics.displayName = 'proto.opencannabis.structs.Genetics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.Genetics.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.Genetics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.Genetics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.Genetics.toObject = function(includeInstance, msg) {
  var f, obj = {
    male: (f = msg.getMale()) && proto.opencannabis.base.ProductReference.toObject(includeInstance, f),
    female: (f = msg.getFemale()) && proto.opencannabis.base.ProductReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.Genetics}
 */
proto.opencannabis.structs.Genetics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.Genetics;
  return proto.opencannabis.structs.Genetics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.Genetics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.Genetics}
 */
proto.opencannabis.structs.Genetics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductReference;
      reader.readMessage(value,proto.opencannabis.base.ProductReference.deserializeBinaryFromReader);
      msg.setMale(value);
      break;
    case 2:
      var value = new proto.opencannabis.base.ProductReference;
      reader.readMessage(value,proto.opencannabis.base.ProductReference.deserializeBinaryFromReader);
      msg.setFemale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.Genetics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.Genetics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.Genetics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.Genetics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMale();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductReference.serializeBinaryToWriter
    );
  }
  f = message.getFemale();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.base.ProductReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductReference male = 1;
 * @return {?proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.structs.Genetics.prototype.getMale = function() {
  return /** @type{?proto.opencannabis.base.ProductReference} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductReference, 1));
};


/** @param {?proto.opencannabis.base.ProductReference|undefined} value */
proto.opencannabis.structs.Genetics.prototype.setMale = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.structs.Genetics.prototype.clearMale = function() {
  this.setMale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.Genetics.prototype.hasMale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.base.ProductReference female = 2;
 * @return {?proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.structs.Genetics.prototype.getFemale = function() {
  return /** @type{?proto.opencannabis.base.ProductReference} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductReference, 2));
};


/** @param {?proto.opencannabis.base.ProductReference|undefined} value */
proto.opencannabis.structs.Genetics.prototype.setFemale = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.Genetics.prototype.clearFemale = function() {
  this.setFemale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.Genetics.prototype.hasFemale = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.distribution.DistributionPolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.distribution.DistributionPolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.distribution.DistributionPolicy.displayName = 'proto.opencannabis.products.distribution.DistributionPolicy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.distribution.DistributionPolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.distribution.DistributionPolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.distribution.DistributionPolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    suppress: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.distribution.DistributionPolicy}
 */
proto.opencannabis.products.distribution.DistributionPolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.distribution.DistributionPolicy;
  return proto.opencannabis.products.distribution.DistributionPolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.distribution.DistributionPolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.distribution.DistributionPolicy}
 */
proto.opencannabis.products.distribution.DistributionPolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.distribution.Channel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.products.distribution.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuppress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.distribution.DistributionPolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.distribution.DistributionPolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.distribution.DistributionPolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSuppress();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Channel channel = 2;
 * @return {!proto.opencannabis.products.distribution.Channel}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.getChannel = function() {
  return /** @type {!proto.opencannabis.products.distribution.Channel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.distribution.Channel} value */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.setChannel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ChannelType type = 3;
 * @return {!proto.opencannabis.products.distribution.ChannelType}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.distribution.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.products.distribution.ChannelType} value */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool suppress = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.getSuppress = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.opencannabis.products.distribution.DistributionPolicy.prototype.setSuppress = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.opencannabis.products.distribution.Channel = {
  UNSPECIFIED_CHANNEL: 0,
  RETAIL: 1,
  WHOLESALE: 2,
  BULK: 3
};

/**
 * @enum {number}
 */
proto.opencannabis.products.distribution.ChannelType = {
  UNSPECIFIED_CHANNEL_TYPE: 0,
  DIRECT: 1,
  MARKETPLACE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.MaterialsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.content.MaterialsData.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.content.MaterialsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.MaterialsData.displayName = 'proto.opencannabis.content.MaterialsData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.content.MaterialsData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.MaterialsData.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.MaterialsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.MaterialsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.MaterialsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    species: jspb.Message.getFieldWithDefault(msg, 1, 0),
    genetics: (f = msg.getGenetics()) && proto.opencannabis.structs.Genetics.toObject(includeInstance, f),
    grow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shelf: jspb.Message.getFieldWithDefault(msg, 4, 0),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.opencannabis.products.distribution.DistributionPolicy.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.content.MaterialsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.MaterialsData;
  return proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.MaterialsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.Species} */ (reader.readEnum());
      msg.setSpecies(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.Genetics;
      reader.readMessage(value,proto.opencannabis.structs.Genetics.deserializeBinaryFromReader);
      msg.setGenetics(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.structs.Grow} */ (reader.readEnum());
      msg.setGrow(value);
      break;
    case 4:
      var value = /** @type {!proto.opencannabis.structs.Shelf} */ (reader.readEnum());
      msg.setShelf(value);
      break;
    case 5:
      var value = new proto.opencannabis.products.distribution.DistributionPolicy;
      reader.readMessage(value,proto.opencannabis.products.distribution.DistributionPolicy.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.MaterialsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.MaterialsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.MaterialsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.MaterialsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecies();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGenetics();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.Genetics.serializeBinaryToWriter
    );
  }
  f = message.getGrow();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getShelf();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.opencannabis.products.distribution.DistributionPolicy.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.structs.Species species = 1;
 * @return {!proto.opencannabis.structs.Species}
 */
proto.opencannabis.content.MaterialsData.prototype.getSpecies = function() {
  return /** @type {!proto.opencannabis.structs.Species} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.Species} value */
proto.opencannabis.content.MaterialsData.prototype.setSpecies = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.structs.Genetics genetics = 2;
 * @return {?proto.opencannabis.structs.Genetics}
 */
proto.opencannabis.content.MaterialsData.prototype.getGenetics = function() {
  return /** @type{?proto.opencannabis.structs.Genetics} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.Genetics, 2));
};


/** @param {?proto.opencannabis.structs.Genetics|undefined} value */
proto.opencannabis.content.MaterialsData.prototype.setGenetics = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.content.MaterialsData.prototype.clearGenetics = function() {
  this.setGenetics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.MaterialsData.prototype.hasGenetics = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.structs.Grow grow = 3;
 * @return {!proto.opencannabis.structs.Grow}
 */
proto.opencannabis.content.MaterialsData.prototype.getGrow = function() {
  return /** @type {!proto.opencannabis.structs.Grow} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.structs.Grow} value */
proto.opencannabis.content.MaterialsData.prototype.setGrow = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional opencannabis.structs.Shelf shelf = 4;
 * @return {!proto.opencannabis.structs.Shelf}
 */
proto.opencannabis.content.MaterialsData.prototype.getShelf = function() {
  return /** @type {!proto.opencannabis.structs.Shelf} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.opencannabis.structs.Shelf} value */
proto.opencannabis.content.MaterialsData.prototype.setShelf = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated opencannabis.products.distribution.DistributionPolicy channels = 5;
 * @return {!Array.<!proto.opencannabis.products.distribution.DistributionPolicy>}
 */
proto.opencannabis.content.MaterialsData.prototype.getChannelsList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.distribution.DistributionPolicy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.distribution.DistributionPolicy, 5));
};


/** @param {!Array.<!proto.opencannabis.products.distribution.DistributionPolicy>} value */
proto.opencannabis.content.MaterialsData.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.opencannabis.products.distribution.DistributionPolicy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.distribution.DistributionPolicy}
 */
proto.opencannabis.content.MaterialsData.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.opencannabis.products.distribution.DistributionPolicy, opt_index);
};


proto.opencannabis.content.MaterialsData.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.Brand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.content.Brand.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.content.Brand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.Brand.displayName = 'proto.opencannabis.content.Brand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.content.Brand.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.Brand.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.Brand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.Brand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Brand.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.content.Name.toObject(includeInstance, f),
    parent: (f = msg.getParent()) && proto.opencannabis.content.Brand.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.opencannabis.media.MediaItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.Brand}
 */
proto.opencannabis.content.Brand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.Brand;
  return proto.opencannabis.content.Brand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.Brand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.Brand}
 */
proto.opencannabis.content.Brand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Name;
      reader.readMessage(value,proto.opencannabis.content.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.content.Brand;
      reader.readMessage(value,proto.opencannabis.content.Brand.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 3:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 20:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.Brand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.Brand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.Brand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.Brand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Name.serializeBinaryToWriter
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.content.Brand.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.opencannabis.content.Name}
 */
proto.opencannabis.content.Brand.prototype.getName = function() {
  return /** @type{?proto.opencannabis.content.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Name, 1));
};


/** @param {?proto.opencannabis.content.Name|undefined} value */
proto.opencannabis.content.Brand.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.content.Brand.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.Brand.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Brand parent = 2;
 * @return {?proto.opencannabis.content.Brand}
 */
proto.opencannabis.content.Brand.prototype.getParent = function() {
  return /** @type{?proto.opencannabis.content.Brand} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Brand, 2));
};


/** @param {?proto.opencannabis.content.Brand|undefined} value */
proto.opencannabis.content.Brand.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.content.Brand.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.Brand.prototype.hasParent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Content summary = 3;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.content.Brand.prototype.getSummary = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 3));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.content.Brand.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.content.Brand.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.Brand.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated opencannabis.media.MediaItem media = 20;
 * @return {!Array.<!proto.opencannabis.media.MediaItem>}
 */
proto.opencannabis.content.Brand.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.opencannabis.media.MediaItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.media.MediaItem, 20));
};


/** @param {!Array.<!proto.opencannabis.media.MediaItem>} value */
proto.opencannabis.content.Brand.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.opencannabis.media.MediaItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.content.Brand.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.opencannabis.media.MediaItem, opt_index);
};


proto.opencannabis.content.Brand.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * @enum {number}
 */
proto.opencannabis.structs.ProductFlag = {
  VISIBLE: 0,
  HIDDEN: 1,
  PREMIUM: 2,
  FEATURED: 3,
  ORGANIC: 4,
  EXCLUSIVE: 5,
  IN_HOUSE: 6,
  LAST_CHANCE: 7,
  LIMITED_TIME: 8,
  ON_SALE: 9,
  LOCAL: 10
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.PercentageDiscount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.PercentageDiscount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.PercentageDiscount.displayName = 'proto.opencannabis.structs.pricing.PercentageDiscount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.PercentageDiscount.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.PercentageDiscount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.PercentageDiscount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PercentageDiscount.toObject = function(includeInstance, msg) {
  var f, obj = {
    discount: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.PercentageDiscount}
 */
proto.opencannabis.structs.pricing.PercentageDiscount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.PercentageDiscount;
  return proto.opencannabis.structs.pricing.PercentageDiscount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.PercentageDiscount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.PercentageDiscount}
 */
proto.opencannabis.structs.pricing.PercentageDiscount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiscount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.PercentageDiscount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.PercentageDiscount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.PercentageDiscount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PercentageDiscount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * optional uint32 discount = 20;
 * @return {number}
 */
proto.opencannabis.structs.pricing.PercentageDiscount.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.PercentageDiscount.prototype.setDiscount = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.BOGODiscount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.BOGODiscount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.BOGODiscount.displayName = 'proto.opencannabis.structs.pricing.BOGODiscount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.BOGODiscount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.BOGODiscount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.BOGODiscount.toObject = function(includeInstance, msg) {
  var f, obj = {
    trigger: jspb.Message.getFieldWithDefault(msg, 21, 0),
    reward: jspb.Message.getFieldWithDefault(msg, 22, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.BOGODiscount}
 */
proto.opencannabis.structs.pricing.BOGODiscount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.BOGODiscount;
  return proto.opencannabis.structs.pricing.BOGODiscount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.BOGODiscount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.BOGODiscount}
 */
proto.opencannabis.structs.pricing.BOGODiscount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrigger(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.BOGODiscount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.BOGODiscount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.BOGODiscount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrigger();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getReward();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
};


/**
 * optional uint32 trigger = 21;
 * @return {number}
 */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.getTrigger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.setTrigger = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 reward = 22;
 * @return {number}
 */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.getReward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.BOGODiscount.prototype.setReward = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.LoyaltyDiscount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.LoyaltyDiscount.displayName = 'proto.opencannabis.structs.pricing.LoyaltyDiscount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.LoyaltyDiscount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.LoyaltyDiscount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.toObject = function(includeInstance, msg) {
  var f, obj = {
    trigger: jspb.Message.getFieldWithDefault(msg, 23, 0),
    reward: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.LoyaltyDiscount}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.LoyaltyDiscount;
  return proto.opencannabis.structs.pricing.LoyaltyDiscount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.LoyaltyDiscount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.LoyaltyDiscount}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrigger(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.LoyaltyDiscount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.LoyaltyDiscount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrigger();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getReward();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
};


/**
 * optional uint32 trigger = 23;
 * @return {number}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.getTrigger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.setTrigger = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint32 reward = 24;
 * @return {number}
 */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.getReward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.LoyaltyDiscount.prototype.setReward = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.SaleDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_);
};
goog.inherits(proto.opencannabis.structs.pricing.SaleDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.SaleDescriptor.displayName = 'proto.opencannabis.structs.pricing.SaleDescriptor';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_ = [[4,5,6]];

/**
 * @enum {number}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.SaleCase = {
  SALE_NOT_SET: 0,
  PERCENTAGE_OFF: 4,
  BOGO: 5,
  LOYALTY: 6
};

/**
 * @return {proto.opencannabis.structs.pricing.SaleDescriptor.SaleCase}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getSaleCase = function() {
  return /** @type {proto.opencannabis.structs.pricing.SaleDescriptor.SaleCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.SaleDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.SaleDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.SaleDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    effective: (f = msg.getEffective()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    percentageOff: (f = msg.getPercentageOff()) && proto.opencannabis.structs.pricing.PercentageDiscount.toObject(includeInstance, f),
    bogo: (f = msg.getBogo()) && proto.opencannabis.structs.pricing.BOGODiscount.toObject(includeInstance, f),
    loyalty: (f = msg.getLoyalty()) && proto.opencannabis.structs.pricing.LoyaltyDiscount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.SaleDescriptor}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.SaleDescriptor;
  return proto.opencannabis.structs.pricing.SaleDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.SaleDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.SaleDescriptor}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.pricing.SaleType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setEffective(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 4:
      var value = new proto.opencannabis.structs.pricing.PercentageDiscount;
      reader.readMessage(value,proto.opencannabis.structs.pricing.PercentageDiscount.deserializeBinaryFromReader);
      msg.setPercentageOff(value);
      break;
    case 5:
      var value = new proto.opencannabis.structs.pricing.BOGODiscount;
      reader.readMessage(value,proto.opencannabis.structs.pricing.BOGODiscount.deserializeBinaryFromReader);
      msg.setBogo(value);
      break;
    case 6:
      var value = new proto.opencannabis.structs.pricing.LoyaltyDiscount;
      reader.readMessage(value,proto.opencannabis.structs.pricing.LoyaltyDiscount.deserializeBinaryFromReader);
      msg.setLoyalty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.SaleDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.SaleDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.SaleDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEffective();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getPercentageOff();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.structs.pricing.PercentageDiscount.serializeBinaryToWriter
    );
  }
  f = message.getBogo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.structs.pricing.BOGODiscount.serializeBinaryToWriter
    );
  }
  f = message.getLoyalty();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.structs.pricing.LoyaltyDiscount.serializeBinaryToWriter
    );
  }
};


/**
 * optional SaleType type = 1;
 * @return {!proto.opencannabis.structs.pricing.SaleType}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getType = function() {
  return /** @type {!proto.opencannabis.structs.pricing.SaleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.pricing.SaleType} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Instant effective = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getEffective = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setEffective = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.pricing.SaleDescriptor.prototype.clearEffective = function() {
  this.setEffective(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.hasEffective = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.temporal.Instant expiration = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getExpiration = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.structs.pricing.SaleDescriptor.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PercentageDiscount percentage_off = 4;
 * @return {?proto.opencannabis.structs.pricing.PercentageDiscount}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getPercentageOff = function() {
  return /** @type{?proto.opencannabis.structs.pricing.PercentageDiscount} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.PercentageDiscount, 4));
};


/** @param {?proto.opencannabis.structs.pricing.PercentageDiscount|undefined} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setPercentageOff = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.SaleDescriptor.prototype.clearPercentageOff = function() {
  this.setPercentageOff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.hasPercentageOff = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BOGODiscount bogo = 5;
 * @return {?proto.opencannabis.structs.pricing.BOGODiscount}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getBogo = function() {
  return /** @type{?proto.opencannabis.structs.pricing.BOGODiscount} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.BOGODiscount, 5));
};


/** @param {?proto.opencannabis.structs.pricing.BOGODiscount|undefined} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setBogo = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.SaleDescriptor.prototype.clearBogo = function() {
  this.setBogo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.hasBogo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LoyaltyDiscount loyalty = 6;
 * @return {?proto.opencannabis.structs.pricing.LoyaltyDiscount}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.getLoyalty = function() {
  return /** @type{?proto.opencannabis.structs.pricing.LoyaltyDiscount} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.LoyaltyDiscount, 6));
};


/** @param {?proto.opencannabis.structs.pricing.LoyaltyDiscount|undefined} value */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.setLoyalty = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.opencannabis.structs.pricing.SaleDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.SaleDescriptor.prototype.clearLoyalty = function() {
  this.setLoyalty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.SaleDescriptor.prototype.hasLoyalty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.structs.pricing.SaleType = {
  PERCENTAGE_OFF: 0,
  BOGO: 1,
  LOYALTY: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.PricingTierAvailability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.PricingTierAvailability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.PricingTierAvailability.displayName = 'proto.opencannabis.structs.pricing.PricingTierAvailability';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.PricingTierAvailability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.PricingTierAvailability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.toObject = function(includeInstance, msg) {
  var f, obj = {
    offered: jspb.Message.getFieldWithDefault(msg, 1, false),
    available: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.PricingTierAvailability}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.PricingTierAvailability;
  return proto.opencannabis.structs.pricing.PricingTierAvailability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.PricingTierAvailability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.PricingTierAvailability}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffered(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.PricingTierAvailability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.PricingTierAvailability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffered();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAvailable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool offered = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.getOffered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.setOffered = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool available = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.pricing.PricingTierAvailability.prototype.setAvailable = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.pricing.UnitPricingDescriptor.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.pricing.UnitPricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.UnitPricingDescriptor.displayName = 'proto.opencannabis.structs.pricing.UnitPricingDescriptor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.UnitPricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.UnitPricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceValue: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    status: (f = msg.getStatus()) && proto.opencannabis.structs.pricing.PricingTierAvailability.toObject(includeInstance, f),
    discountsList: jspb.Message.toObjectList(msg.getDiscountsList(),
    proto.opencannabis.structs.pricing.SaleDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.UnitPricingDescriptor}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.UnitPricingDescriptor;
  return proto.opencannabis.structs.pricing.UnitPricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.UnitPricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.UnitPricingDescriptor}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPriceValue(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.pricing.PricingTierAvailability;
      reader.readMessage(value,proto.opencannabis.structs.pricing.PricingTierAvailability.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.opencannabis.structs.pricing.SaleDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.SaleDescriptor.deserializeBinaryFromReader);
      msg.addDiscounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.UnitPricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.UnitPricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.pricing.PricingTierAvailability.serializeBinaryToWriter
    );
  }
  f = message.getDiscountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opencannabis.structs.pricing.SaleDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional float price_value = 1;
 * @return {number}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.getPriceValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.setPriceValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional PricingTierAvailability status = 2;
 * @return {?proto.opencannabis.structs.pricing.PricingTierAvailability}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.getStatus = function() {
  return /** @type{?proto.opencannabis.structs.pricing.PricingTierAvailability} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.PricingTierAvailability, 2));
};


/** @param {?proto.opencannabis.structs.pricing.PricingTierAvailability|undefined} value */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SaleDescriptor discounts = 3;
 * @return {!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.getDiscountsList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.pricing.SaleDescriptor, 3));
};


/** @param {!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>} value */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.setDiscountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opencannabis.structs.pricing.SaleDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.pricing.SaleDescriptor}
 */
proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.addDiscounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opencannabis.structs.pricing.SaleDescriptor, opt_index);
};


proto.opencannabis.structs.pricing.UnitPricingDescriptor.prototype.clearDiscountsList = function() {
  this.setDiscountsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.WeightedPricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.WeightedPricingDescriptor.displayName = 'proto.opencannabis.structs.pricing.WeightedPricingDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.WeightedPricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.WeightedPricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    weight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tier: (f = msg.getTier()) && proto.opencannabis.structs.pricing.UnitPricingDescriptor.toObject(includeInstance, f),
    weightInGrams: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.WeightedPricingDescriptor}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.WeightedPricingDescriptor;
  return proto.opencannabis.structs.pricing.WeightedPricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.WeightedPricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.WeightedPricingDescriptor}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.pricing.PricingWeightTier} */ (reader.readEnum());
      msg.setWeight(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.pricing.UnitPricingDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.UnitPricingDescriptor.deserializeBinaryFromReader);
      msg.setTier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeightInGrams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.WeightedPricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.WeightedPricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.pricing.UnitPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getWeightInGrams();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional PricingWeightTier weight = 1;
 * @return {!proto.opencannabis.structs.pricing.PricingWeightTier}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.getWeight = function() {
  return /** @type {!proto.opencannabis.structs.pricing.PricingWeightTier} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.pricing.PricingWeightTier} value */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.setWeight = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional UnitPricingDescriptor tier = 2;
 * @return {?proto.opencannabis.structs.pricing.UnitPricingDescriptor}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.getTier = function() {
  return /** @type{?proto.opencannabis.structs.pricing.UnitPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.UnitPricingDescriptor, 2));
};


/** @param {?proto.opencannabis.structs.pricing.UnitPricingDescriptor|undefined} value */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.setTier = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.clearTier = function() {
  this.setTier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.hasTier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float weight_in_grams = 3;
 * @return {number}
 */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.getWeightInGrams = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.opencannabis.structs.pricing.WeightedPricingDescriptor.prototype.setWeightInGrams = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.structs.pricing.FreebiePricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.FreebiePricingDescriptor.displayName = 'proto.opencannabis.structs.pricing.FreebiePricingDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.FreebiePricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.FreebiePricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.FreebiePricingDescriptor}
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.FreebiePricingDescriptor;
  return proto.opencannabis.structs.pricing.FreebiePricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.FreebiePricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.FreebiePricingDescriptor}
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.FreebiePricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.FreebiePricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.FreebiePricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.PricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_);
};
goog.inherits(proto.opencannabis.structs.pricing.PricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.PricingDescriptor.displayName = 'proto.opencannabis.structs.pricing.PricingDescriptor';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_ = [[20,21,22]];

/**
 * @enum {number}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.PricingCase = {
  PRICING_NOT_SET: 0,
  UNIT: 20,
  WEIGHTED: 21,
  FREEBIE: 22
};

/**
 * @return {proto.opencannabis.structs.pricing.PricingDescriptor.PricingCase}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.getPricingCase = function() {
  return /** @type {proto.opencannabis.structs.pricing.PricingDescriptor.PricingCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.PricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.PricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unit: (f = msg.getUnit()) && proto.opencannabis.structs.pricing.UnitPricingDescriptor.toObject(includeInstance, f),
    weighted: (f = msg.getWeighted()) && proto.opencannabis.structs.pricing.WeightedPricingDescriptor.toObject(includeInstance, f),
    freebie: (f = msg.getFreebie()) && proto.opencannabis.structs.pricing.FreebiePricingDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.PricingDescriptor}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.PricingDescriptor;
  return proto.opencannabis.structs.pricing.PricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.PricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.PricingDescriptor}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.structs.pricing.PricingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 20:
      var value = new proto.opencannabis.structs.pricing.UnitPricingDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.UnitPricingDescriptor.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 21:
      var value = new proto.opencannabis.structs.pricing.WeightedPricingDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.WeightedPricingDescriptor.deserializeBinaryFromReader);
      msg.setWeighted(value);
      break;
    case 22:
      var value = new proto.opencannabis.structs.pricing.FreebiePricingDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.FreebiePricingDescriptor.deserializeBinaryFromReader);
      msg.setFreebie(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.PricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.PricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.PricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.opencannabis.structs.pricing.UnitPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getWeighted();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.opencannabis.structs.pricing.WeightedPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getFreebie();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.opencannabis.structs.pricing.FreebiePricingDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional PricingType type = 1;
 * @return {!proto.opencannabis.structs.pricing.PricingType}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.getType = function() {
  return /** @type {!proto.opencannabis.structs.pricing.PricingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.structs.pricing.PricingType} value */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional UnitPricingDescriptor unit = 20;
 * @return {?proto.opencannabis.structs.pricing.UnitPricingDescriptor}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.getUnit = function() {
  return /** @type{?proto.opencannabis.structs.pricing.UnitPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.UnitPricingDescriptor, 20));
};


/** @param {?proto.opencannabis.structs.pricing.UnitPricingDescriptor|undefined} value */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.setUnit = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.PricingDescriptor.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional WeightedPricingDescriptor weighted = 21;
 * @return {?proto.opencannabis.structs.pricing.WeightedPricingDescriptor}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.getWeighted = function() {
  return /** @type{?proto.opencannabis.structs.pricing.WeightedPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.WeightedPricingDescriptor, 21));
};


/** @param {?proto.opencannabis.structs.pricing.WeightedPricingDescriptor|undefined} value */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.setWeighted = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.PricingDescriptor.prototype.clearWeighted = function() {
  this.setWeighted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.hasWeighted = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional FreebiePricingDescriptor freebie = 22;
 * @return {?proto.opencannabis.structs.pricing.FreebiePricingDescriptor}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.getFreebie = function() {
  return /** @type{?proto.opencannabis.structs.pricing.FreebiePricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.FreebiePricingDescriptor, 22));
};


/** @param {?proto.opencannabis.structs.pricing.FreebiePricingDescriptor|undefined} value */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.setFreebie = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.opencannabis.structs.pricing.PricingDescriptor.oneofGroups_[0], value);
};


proto.opencannabis.structs.pricing.PricingDescriptor.prototype.clearFreebie = function() {
  this.setFreebie(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.pricing.PricingDescriptor.prototype.hasFreebie = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.pricing.ProductPricing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.pricing.ProductPricing.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.pricing.ProductPricing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.pricing.ProductPricing.displayName = 'proto.opencannabis.structs.pricing.ProductPricing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.pricing.ProductPricing.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.pricing.ProductPricing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.pricing.ProductPricing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.ProductPricing.toObject = function(includeInstance, msg) {
  var f, obj = {
    discountsList: jspb.Message.toObjectList(msg.getDiscountsList(),
    proto.opencannabis.structs.pricing.SaleDescriptor.toObject, includeInstance),
    manifestList: jspb.Message.toObjectList(msg.getManifestList(),
    proto.opencannabis.structs.pricing.PricingDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.pricing.ProductPricing}
 */
proto.opencannabis.structs.pricing.ProductPricing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.pricing.ProductPricing;
  return proto.opencannabis.structs.pricing.ProductPricing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.pricing.ProductPricing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.pricing.ProductPricing}
 */
proto.opencannabis.structs.pricing.ProductPricing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.structs.pricing.SaleDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.SaleDescriptor.deserializeBinaryFromReader);
      msg.addDiscounts(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.pricing.PricingDescriptor;
      reader.readMessage(value,proto.opencannabis.structs.pricing.PricingDescriptor.deserializeBinaryFromReader);
      msg.addManifest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.pricing.ProductPricing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.pricing.ProductPricing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.pricing.ProductPricing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencannabis.structs.pricing.SaleDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getManifestList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.structs.pricing.PricingDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleDescriptor discounts = 1;
 * @return {!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.getDiscountsList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.pricing.SaleDescriptor, 1));
};


/** @param {!Array.<!proto.opencannabis.structs.pricing.SaleDescriptor>} value */
proto.opencannabis.structs.pricing.ProductPricing.prototype.setDiscountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencannabis.structs.pricing.SaleDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.pricing.SaleDescriptor}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.addDiscounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencannabis.structs.pricing.SaleDescriptor, opt_index);
};


proto.opencannabis.structs.pricing.ProductPricing.prototype.clearDiscountsList = function() {
  this.setDiscountsList([]);
};


/**
 * repeated PricingDescriptor manifest = 2;
 * @return {!Array.<!proto.opencannabis.structs.pricing.PricingDescriptor>}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.getManifestList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.pricing.PricingDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.pricing.PricingDescriptor, 2));
};


/** @param {!Array.<!proto.opencannabis.structs.pricing.PricingDescriptor>} value */
proto.opencannabis.structs.pricing.ProductPricing.prototype.setManifestList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.structs.pricing.PricingDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.pricing.PricingDescriptor}
 */
proto.opencannabis.structs.pricing.ProductPricing.prototype.addManifest = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.structs.pricing.PricingDescriptor, opt_index);
};


proto.opencannabis.structs.pricing.ProductPricing.prototype.clearManifestList = function() {
  this.setManifestList([]);
};


/**
 * @enum {number}
 */
proto.opencannabis.structs.pricing.PricingType = {
  UNIT: 0,
  WEIGHTED: 1,
  FREEBIE: 2
};

/**
 * @enum {number}
 */
proto.opencannabis.structs.pricing.PricingWeightTier = {
  OTHER: 0,
  GRAM: 1,
  HALFGRAM: 2,
  QUARTERGRAM: 3,
  DUB: 4,
  EIGHTH: 5,
  QUARTER: 6,
  HALF: 7,
  OUNCE: 8,
  POUND: 9
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.ProductTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.content.ProductTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.ProductTimestamps.displayName = 'proto.opencannabis.content.ProductTimestamps';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.ProductTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.ProductTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.ProductTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.ProductTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: (f = msg.getCreated()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    modified: (f = msg.getModified()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    published: (f = msg.getPublished()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.ProductTimestamps}
 */
proto.opencannabis.content.ProductTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.ProductTimestamps;
  return proto.opencannabis.content.ProductTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.ProductTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.ProductTimestamps}
 */
proto.opencannabis.content.ProductTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setModified(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setPublished(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.ProductTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.ProductTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.ProductTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.ProductTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getModified();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getPublished();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.temporal.Instant created = 1;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.content.ProductTimestamps.prototype.getCreated = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 1));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.content.ProductTimestamps.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.content.ProductTimestamps.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductTimestamps.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.temporal.Instant modified = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.content.ProductTimestamps.prototype.getModified = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.content.ProductTimestamps.prototype.setModified = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.content.ProductTimestamps.prototype.clearModified = function() {
  this.setModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductTimestamps.prototype.hasModified = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.temporal.Instant published = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.content.ProductTimestamps.prototype.getPublished = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.content.ProductTimestamps.prototype.setPublished = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.content.ProductTimestamps.prototype.clearPublished = function() {
  this.setPublished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductTimestamps.prototype.hasPublished = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.content.ProductContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.content.ProductContent.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.content.ProductContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.content.ProductContent.displayName = 'proto.opencannabis.content.ProductContent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.content.ProductContent.repeatedFields_ = [6,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.content.ProductContent.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.content.ProductContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.content.ProductContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.ProductContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.opencannabis.content.Name.toObject(includeInstance, f),
    brand: (f = msg.getBrand()) && proto.opencannabis.content.Brand.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    usage: (f = msg.getUsage()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    dosage: (f = msg.getDosage()) && proto.opencannabis.content.Content.toObject(includeInstance, f),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.opencannabis.media.MediaItem.toObject, includeInstance),
    pricing: (f = msg.getPricing()) && proto.opencannabis.structs.pricing.ProductPricing.toObject(includeInstance, f),
    testing: (f = msg.getTesting()) && proto.opencannabis.structs.labtesting.TestResults.toObject(includeInstance, f),
    flagsList: jspb.Message.getRepeatedField(msg, 9),
    ts: (f = msg.getTs()) && proto.opencannabis.content.ProductTimestamps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.content.ProductContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.content.ProductContent;
  return proto.opencannabis.content.ProductContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.content.ProductContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.content.ProductContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.content.Name;
      reader.readMessage(value,proto.opencannabis.content.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.opencannabis.content.Brand;
      reader.readMessage(value,proto.opencannabis.content.Brand.deserializeBinaryFromReader);
      msg.setBrand(value);
      break;
    case 3:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setUsage(value);
      break;
    case 5:
      var value = new proto.opencannabis.content.Content;
      reader.readMessage(value,proto.opencannabis.content.Content.deserializeBinaryFromReader);
      msg.setDosage(value);
      break;
    case 6:
      var value = new proto.opencannabis.media.MediaItem;
      reader.readMessage(value,proto.opencannabis.media.MediaItem.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    case 7:
      var value = new proto.opencannabis.structs.pricing.ProductPricing;
      reader.readMessage(value,proto.opencannabis.structs.pricing.ProductPricing.deserializeBinaryFromReader);
      msg.setPricing(value);
      break;
    case 8:
      var value = new proto.opencannabis.structs.labtesting.TestResults;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestResults.deserializeBinaryFromReader);
      msg.setTesting(value);
      break;
    case 9:
      var value = /** @type {!Array.<!proto.opencannabis.structs.ProductFlag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    case 10:
      var value = new proto.opencannabis.content.ProductTimestamps;
      reader.readMessage(value,proto.opencannabis.content.ProductTimestamps.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.content.ProductContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.content.ProductContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.content.ProductContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.content.ProductContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.content.Name.serializeBinaryToWriter
    );
  }
  f = message.getBrand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.content.Brand.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getUsage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getDosage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.content.Content.serializeBinaryToWriter
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.opencannabis.media.MediaItem.serializeBinaryToWriter
    );
  }
  f = message.getPricing();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.structs.pricing.ProductPricing.serializeBinaryToWriter
    );
  }
  f = message.getTesting();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opencannabis.structs.labtesting.TestResults.serializeBinaryToWriter
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencannabis.content.ProductTimestamps.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.opencannabis.content.Name}
 */
proto.opencannabis.content.ProductContent.prototype.getName = function() {
  return /** @type{?proto.opencannabis.content.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Name, 1));
};


/** @param {?proto.opencannabis.content.Name|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.content.ProductContent.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Brand brand = 2;
 * @return {?proto.opencannabis.content.Brand}
 */
proto.opencannabis.content.ProductContent.prototype.getBrand = function() {
  return /** @type{?proto.opencannabis.content.Brand} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Brand, 2));
};


/** @param {?proto.opencannabis.content.Brand|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setBrand = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.content.ProductContent.prototype.clearBrand = function() {
  this.setBrand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Content summary = 3;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.content.ProductContent.prototype.getSummary = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 3));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.content.ProductContent.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Content usage = 4;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.content.ProductContent.prototype.getUsage = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 4));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setUsage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.content.ProductContent.prototype.clearUsage = function() {
  this.setUsage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasUsage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Content dosage = 5;
 * @return {?proto.opencannabis.content.Content}
 */
proto.opencannabis.content.ProductContent.prototype.getDosage = function() {
  return /** @type{?proto.opencannabis.content.Content} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.Content, 5));
};


/** @param {?proto.opencannabis.content.Content|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setDosage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.content.ProductContent.prototype.clearDosage = function() {
  this.setDosage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasDosage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated opencannabis.media.MediaItem media = 6;
 * @return {!Array.<!proto.opencannabis.media.MediaItem>}
 */
proto.opencannabis.content.ProductContent.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.opencannabis.media.MediaItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.media.MediaItem, 6));
};


/** @param {!Array.<!proto.opencannabis.media.MediaItem>} value */
proto.opencannabis.content.ProductContent.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.opencannabis.media.MediaItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.media.MediaItem}
 */
proto.opencannabis.content.ProductContent.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.opencannabis.media.MediaItem, opt_index);
};


proto.opencannabis.content.ProductContent.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * optional opencannabis.structs.pricing.ProductPricing pricing = 7;
 * @return {?proto.opencannabis.structs.pricing.ProductPricing}
 */
proto.opencannabis.content.ProductContent.prototype.getPricing = function() {
  return /** @type{?proto.opencannabis.structs.pricing.ProductPricing} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.pricing.ProductPricing, 7));
};


/** @param {?proto.opencannabis.structs.pricing.ProductPricing|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setPricing = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.opencannabis.content.ProductContent.prototype.clearPricing = function() {
  this.setPricing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasPricing = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional opencannabis.structs.labtesting.TestResults testing = 8;
 * @return {?proto.opencannabis.structs.labtesting.TestResults}
 */
proto.opencannabis.content.ProductContent.prototype.getTesting = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.TestResults} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.TestResults, 8));
};


/** @param {?proto.opencannabis.structs.labtesting.TestResults|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setTesting = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.opencannabis.content.ProductContent.prototype.clearTesting = function() {
  this.setTesting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasTesting = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated opencannabis.structs.ProductFlag flags = 9;
 * @return {!Array.<!proto.opencannabis.structs.ProductFlag>}
 */
proto.opencannabis.content.ProductContent.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.structs.ProductFlag>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<!proto.opencannabis.structs.ProductFlag>} value */
proto.opencannabis.content.ProductContent.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!proto.opencannabis.structs.ProductFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.content.ProductContent.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.opencannabis.content.ProductContent.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional ProductTimestamps ts = 10;
 * @return {?proto.opencannabis.content.ProductTimestamps}
 */
proto.opencannabis.content.ProductContent.prototype.getTs = function() {
  return /** @type{?proto.opencannabis.content.ProductTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductTimestamps, 10));
};


/** @param {?proto.opencannabis.content.ProductTimestamps|undefined} value */
proto.opencannabis.content.ProductContent.prototype.setTs = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.opencannabis.content.ProductContent.prototype.clearTs = function() {
  this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.content.ProductContent.prototype.hasTs = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Apothecary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.Apothecary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Apothecary.displayName = 'proto.opencannabis.products.Apothecary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Apothecary.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Apothecary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Apothecary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Apothecary.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Apothecary}
 */
proto.opencannabis.products.Apothecary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Apothecary;
  return proto.opencannabis.products.Apothecary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Apothecary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Apothecary}
 */
proto.opencannabis.products.Apothecary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.ApothecaryType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Apothecary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Apothecary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Apothecary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Apothecary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Apothecary.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Apothecary.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Apothecary.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Apothecary.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ApothecaryType type = 2;
 * @return {!proto.opencannabis.products.ApothecaryType}
 */
proto.opencannabis.products.Apothecary.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.ApothecaryType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.ApothecaryType} value */
proto.opencannabis.products.Apothecary.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.content.ProductContent product = 3;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Apothecary.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 3));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Apothecary.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.products.Apothecary.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Apothecary.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 4;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Apothecary.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 4));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Apothecary.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Apothecary.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Apothecary.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.ApothecaryType = {
  UNSPECIFIED_APOTHECARY: 0,
  TOPICAL: 1,
  TINCTURE: 2,
  CAPSULE: 3,
  INJECTOR: 4,
  SUBLINGUAL: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Cartridge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.Cartridge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Cartridge.displayName = 'proto.opencannabis.products.Cartridge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Cartridge.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Cartridge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Cartridge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Cartridge.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Cartridge}
 */
proto.opencannabis.products.Cartridge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Cartridge;
  return proto.opencannabis.products.Cartridge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Cartridge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Cartridge}
 */
proto.opencannabis.products.Cartridge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.CartridgeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Cartridge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Cartridge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Cartridge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Cartridge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Cartridge.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Cartridge.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Cartridge.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Cartridge.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CartridgeType type = 2;
 * @return {!proto.opencannabis.products.CartridgeType}
 */
proto.opencannabis.products.Cartridge.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.CartridgeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.CartridgeType} value */
proto.opencannabis.products.Cartridge.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.content.ProductContent product = 3;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Cartridge.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 3));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Cartridge.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.products.Cartridge.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Cartridge.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 4;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Cartridge.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 4));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Cartridge.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Cartridge.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Cartridge.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.CartridgeType = {
  UNSPECIFIED_CARTRIDGE: 0,
  CARTRIDGE: 1,
  BATTERY: 2,
  KIT: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.EdibleIngredient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.EdibleIngredient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.EdibleIngredient.displayName = 'proto.opencannabis.products.EdibleIngredient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.EdibleIngredient.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.EdibleIngredient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.EdibleIngredient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.EdibleIngredient.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.EdibleIngredient}
 */
proto.opencannabis.products.EdibleIngredient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.EdibleIngredient;
  return proto.opencannabis.products.EdibleIngredient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.EdibleIngredient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.EdibleIngredient}
 */
proto.opencannabis.products.EdibleIngredient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.EdibleIngredient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.EdibleIngredient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.EdibleIngredient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.EdibleIngredient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.opencannabis.products.EdibleIngredient.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.products.EdibleIngredient.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.opencannabis.products.EdibleIngredient.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.products.EdibleIngredient.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Edible = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.Edible.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.Edible, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Edible.displayName = 'proto.opencannabis.products.Edible';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.Edible.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Edible.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Edible.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Edible} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Edible.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flagsList: jspb.Message.getRepeatedField(msg, 3),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f),
    ingredientsList: jspb.Message.toObjectList(msg.getIngredientsList(),
    proto.opencannabis.products.EdibleIngredient.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Edible}
 */
proto.opencannabis.products.Edible.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Edible;
  return proto.opencannabis.products.Edible.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Edible} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Edible}
 */
proto.opencannabis.products.Edible.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.EdibleType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.opencannabis.products.EdibleFlag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 5:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    case 6:
      var value = new proto.opencannabis.products.EdibleIngredient;
      reader.readMessage(value,proto.opencannabis.products.EdibleIngredient.deserializeBinaryFromReader);
      msg.addIngredients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Edible.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Edible.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Edible} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Edible.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
  f = message.getIngredientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.opencannabis.products.EdibleIngredient.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Edible.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Edible.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Edible.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Edible.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EdibleType type = 2;
 * @return {!proto.opencannabis.products.EdibleType}
 */
proto.opencannabis.products.Edible.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.EdibleType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.EdibleType} value */
proto.opencannabis.products.Edible.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated EdibleFlag flags = 3;
 * @return {!Array.<!proto.opencannabis.products.EdibleFlag>}
 */
proto.opencannabis.products.Edible.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.EdibleFlag>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.opencannabis.products.EdibleFlag>} value */
proto.opencannabis.products.Edible.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.opencannabis.products.EdibleFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.Edible.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.opencannabis.products.Edible.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional opencannabis.content.ProductContent product = 4;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Edible.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 4));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Edible.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Edible.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Edible.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 5;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Edible.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 5));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Edible.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.products.Edible.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Edible.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated EdibleIngredient ingredients = 6;
 * @return {!Array.<!proto.opencannabis.products.EdibleIngredient>}
 */
proto.opencannabis.products.Edible.prototype.getIngredientsList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.EdibleIngredient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.EdibleIngredient, 6));
};


/** @param {!Array.<!proto.opencannabis.products.EdibleIngredient>} value */
proto.opencannabis.products.Edible.prototype.setIngredientsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.opencannabis.products.EdibleIngredient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.EdibleIngredient}
 */
proto.opencannabis.products.Edible.prototype.addIngredients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.opencannabis.products.EdibleIngredient, opt_index);
};


proto.opencannabis.products.Edible.prototype.clearIngredientsList = function() {
  this.setIngredientsList([]);
};


/**
 * @enum {number}
 */
proto.opencannabis.products.EdibleType = {
  UNSPECIFIED_EDIBLE: 0,
  CHOCOLATE: 1,
  BAKED_GOOD: 2,
  CANDY: 3,
  DRINK: 4
};

/**
 * @enum {number}
 */
proto.opencannabis.products.EdibleFlag = {
  NO_EDIBLE_FLAG: 0,
  VEGAN: 1,
  GLUTEN_FREE: 2,
  SUGAR_FREE: 3,
  FAIR_TRADE: 4,
  ORGANIC: 5,
  LOCAL: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Extract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.Extract.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.Extract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Extract.displayName = 'proto.opencannabis.products.Extract';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.Extract.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Extract.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Extract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Extract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Extract.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flagList: jspb.Message.getRepeatedField(msg, 3),
    flower: (f = msg.getFlower()) && proto.opencannabis.base.ProductReference.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Extract}
 */
proto.opencannabis.products.Extract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Extract;
  return proto.opencannabis.products.Extract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Extract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Extract}
 */
proto.opencannabis.products.Extract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.ExtractType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.opencannabis.products.ExtractFlag>} */ (reader.readPackedEnum());
      msg.setFlagList(value);
      break;
    case 4:
      var value = new proto.opencannabis.base.ProductReference;
      reader.readMessage(value,proto.opencannabis.base.ProductReference.deserializeBinaryFromReader);
      msg.setFlower(value);
      break;
    case 5:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 6:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Extract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Extract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Extract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Extract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFlagList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getFlower();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.base.ProductReference.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Extract.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Extract.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Extract.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Extract.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExtractType type = 2;
 * @return {!proto.opencannabis.products.ExtractType}
 */
proto.opencannabis.products.Extract.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.ExtractType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.ExtractType} value */
proto.opencannabis.products.Extract.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated ExtractFlag flag = 3;
 * @return {!Array.<!proto.opencannabis.products.ExtractFlag>}
 */
proto.opencannabis.products.Extract.prototype.getFlagList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.ExtractFlag>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.opencannabis.products.ExtractFlag>} value */
proto.opencannabis.products.Extract.prototype.setFlagList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.opencannabis.products.ExtractFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.Extract.prototype.addFlag = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.opencannabis.products.Extract.prototype.clearFlagList = function() {
  this.setFlagList([]);
};


/**
 * optional opencannabis.base.ProductReference flower = 4;
 * @return {?proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.products.Extract.prototype.getFlower = function() {
  return /** @type{?proto.opencannabis.base.ProductReference} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductReference, 4));
};


/** @param {?proto.opencannabis.base.ProductReference|undefined} value */
proto.opencannabis.products.Extract.prototype.setFlower = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Extract.prototype.clearFlower = function() {
  this.setFlower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Extract.prototype.hasFlower = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional opencannabis.content.ProductContent product = 5;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Extract.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 5));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Extract.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.products.Extract.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Extract.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 6;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Extract.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 6));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Extract.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.products.Extract.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Extract.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.ExtractType = {
  UNSPECIFIED_EXTRACT: 0,
  OIL: 1,
  WAX: 2,
  SHATTER: 3,
  KIEF: 4,
  HASH: 5,
  LIVE_RESIN: 6,
  ROSIN: 7
};

/**
 * @enum {number}
 */
proto.opencannabis.products.ExtractFlag = {
  NO_EXTRACT_FLAGS: 0,
  SOLVENTLESS: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Flower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.Flower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Flower.displayName = 'proto.opencannabis.products.Flower';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Flower.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Flower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Flower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Flower.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Flower}
 */
proto.opencannabis.products.Flower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Flower;
  return proto.opencannabis.products.Flower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Flower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Flower}
 */
proto.opencannabis.products.Flower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 3:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Flower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Flower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Flower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Flower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Flower.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Flower.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Flower.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Flower.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.content.ProductContent product = 2;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Flower.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 2));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Flower.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.products.Flower.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Flower.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 3;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Flower.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 3));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Flower.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.products.Flower.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Flower.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Merchandise = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.Merchandise.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.Merchandise, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Merchandise.displayName = 'proto.opencannabis.products.Merchandise';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.Merchandise.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Merchandise.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Merchandise.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Merchandise} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Merchandise.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flagsList: jspb.Message.getRepeatedField(msg, 3),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Merchandise}
 */
proto.opencannabis.products.Merchandise.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Merchandise;
  return proto.opencannabis.products.Merchandise.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Merchandise} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Merchandise}
 */
proto.opencannabis.products.Merchandise.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.MerchandiseType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.opencannabis.products.MerchandiseFlag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Merchandise.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Merchandise.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Merchandise} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Merchandise.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Merchandise.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Merchandise.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Merchandise.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Merchandise.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MerchandiseType type = 2;
 * @return {!proto.opencannabis.products.MerchandiseType}
 */
proto.opencannabis.products.Merchandise.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.MerchandiseType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.MerchandiseType} value */
proto.opencannabis.products.Merchandise.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated MerchandiseFlag flags = 3;
 * @return {!Array.<!proto.opencannabis.products.MerchandiseFlag>}
 */
proto.opencannabis.products.Merchandise.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.MerchandiseFlag>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.opencannabis.products.MerchandiseFlag>} value */
proto.opencannabis.products.Merchandise.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.opencannabis.products.MerchandiseFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.Merchandise.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.opencannabis.products.Merchandise.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional opencannabis.content.ProductContent product = 4;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Merchandise.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 4));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Merchandise.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Merchandise.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Merchandise.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.MerchandiseType = {
  UNSPECIFIED_MERCHANDISE: 0,
  CLOTHING: 1,
  GLASSWARE: 2,
  CONTAINER: 3,
  LIGHTER: 4
};

/**
 * @enum {number}
 */
proto.opencannabis.products.MerchandiseFlag = {
  NO_MERCHANDISE_FLAGS: 0,
  MEDICAL_ONLY: 1,
  BRAND_SWAG: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Plant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.Plant.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.Plant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Plant.displayName = 'proto.opencannabis.products.Plant';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.Plant.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Plant.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Plant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Plant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Plant.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    originList: jspb.Message.toObjectList(msg.getOriginList(),
    proto.opencannabis.base.ProductReference.toObject, includeInstance),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Plant}
 */
proto.opencannabis.products.Plant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Plant;
  return proto.opencannabis.products.Plant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Plant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Plant}
 */
proto.opencannabis.products.Plant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.products.PlantType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.opencannabis.base.ProductReference;
      reader.readMessage(value,proto.opencannabis.base.ProductReference.deserializeBinaryFromReader);
      msg.addOrigin(value);
      break;
    case 4:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 5:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Plant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Plant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Plant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Plant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOriginList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opencannabis.base.ProductReference.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Plant.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Plant.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Plant.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Plant.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlantType type = 2;
 * @return {!proto.opencannabis.products.PlantType}
 */
proto.opencannabis.products.Plant.prototype.getType = function() {
  return /** @type {!proto.opencannabis.products.PlantType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.products.PlantType} value */
proto.opencannabis.products.Plant.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated opencannabis.base.ProductReference origin = 3;
 * @return {!Array.<!proto.opencannabis.base.ProductReference>}
 */
proto.opencannabis.products.Plant.prototype.getOriginList = function() {
  return /** @type{!Array.<!proto.opencannabis.base.ProductReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.base.ProductReference, 3));
};


/** @param {!Array.<!proto.opencannabis.base.ProductReference>} value */
proto.opencannabis.products.Plant.prototype.setOriginList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opencannabis.base.ProductReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.products.Plant.prototype.addOrigin = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opencannabis.base.ProductReference, opt_index);
};


proto.opencannabis.products.Plant.prototype.clearOriginList = function() {
  this.setOriginList([]);
};


/**
 * optional opencannabis.content.ProductContent product = 4;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Plant.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 4));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Plant.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.Plant.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Plant.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 5;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Plant.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 5));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Plant.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.products.Plant.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Plant.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.PlantType = {
  UNSPECIFIED_PLANT: 0,
  SEED: 1,
  CLONE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.Preroll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.Preroll.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.Preroll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.Preroll.displayName = 'proto.opencannabis.products.Preroll';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.Preroll.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.Preroll.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.Preroll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.Preroll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Preroll.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    flower: (f = msg.getFlower()) && proto.opencannabis.base.ProductReference.toObject(includeInstance, f),
    length: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    thickness: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    flagsList: jspb.Message.getRepeatedField(msg, 5),
    product: (f = msg.getProduct()) && proto.opencannabis.content.ProductContent.toObject(includeInstance, f),
    material: (f = msg.getMaterial()) && proto.opencannabis.content.MaterialsData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.Preroll}
 */
proto.opencannabis.products.Preroll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.Preroll;
  return proto.opencannabis.products.Preroll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.Preroll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.Preroll}
 */
proto.opencannabis.products.Preroll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.opencannabis.base.ProductReference;
      reader.readMessage(value,proto.opencannabis.base.ProductReference.deserializeBinaryFromReader);
      msg.setFlower(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThickness(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.opencannabis.products.PrerollFlag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    case 6:
      var value = new proto.opencannabis.content.ProductContent;
      reader.readMessage(value,proto.opencannabis.content.ProductContent.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 7:
      var value = new proto.opencannabis.content.MaterialsData;
      reader.readMessage(value,proto.opencannabis.content.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.Preroll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.Preroll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.Preroll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.Preroll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getFlower();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.base.ProductReference.serializeBinaryToWriter
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getThickness();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.content.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencannabis.content.MaterialsData.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.Preroll.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.Preroll.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.Preroll.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Preroll.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.base.ProductReference flower = 2;
 * @return {?proto.opencannabis.base.ProductReference}
 */
proto.opencannabis.products.Preroll.prototype.getFlower = function() {
  return /** @type{?proto.opencannabis.base.ProductReference} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductReference, 2));
};


/** @param {?proto.opencannabis.base.ProductReference|undefined} value */
proto.opencannabis.products.Preroll.prototype.setFlower = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.products.Preroll.prototype.clearFlower = function() {
  this.setFlower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Preroll.prototype.hasFlower = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double length = 3;
 * @return {number}
 */
proto.opencannabis.products.Preroll.prototype.getLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.opencannabis.products.Preroll.prototype.setLength = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double thickness = 4;
 * @return {number}
 */
proto.opencannabis.products.Preroll.prototype.getThickness = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.opencannabis.products.Preroll.prototype.setThickness = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated PrerollFlag flags = 5;
 * @return {!Array.<!proto.opencannabis.products.PrerollFlag>}
 */
proto.opencannabis.products.Preroll.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.PrerollFlag>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.opencannabis.products.PrerollFlag>} value */
proto.opencannabis.products.Preroll.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.opencannabis.products.PrerollFlag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.Preroll.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.opencannabis.products.Preroll.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional opencannabis.content.ProductContent product = 6;
 * @return {?proto.opencannabis.content.ProductContent}
 */
proto.opencannabis.products.Preroll.prototype.getProduct = function() {
  return /** @type{?proto.opencannabis.content.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.ProductContent, 6));
};


/** @param {?proto.opencannabis.content.ProductContent|undefined} value */
proto.opencannabis.products.Preroll.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.products.Preroll.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Preroll.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional opencannabis.content.MaterialsData material = 7;
 * @return {?proto.opencannabis.content.MaterialsData}
 */
proto.opencannabis.products.Preroll.prototype.getMaterial = function() {
  return /** @type{?proto.opencannabis.content.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.content.MaterialsData, 7));
};


/** @param {?proto.opencannabis.content.MaterialsData|undefined} value */
proto.opencannabis.products.Preroll.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.opencannabis.products.Preroll.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.Preroll.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.PrerollFlag = {
  NO_PREROLL_FLAGS: 0,
  HASH_INFUSED: 1,
  KIEF_INFUSED: 2,
  FORTIFIED: 3,
  FULL_FLOWER: 4,
  CONTAINS_TOBACCO: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.MenuSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.menu.MenuSettings.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.menu.MenuSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.MenuSettings.displayName = 'proto.opencannabis.products.menu.MenuSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.menu.MenuSettings.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.MenuSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.MenuSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.MenuSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    full: jspb.Message.getFieldWithDefault(msg, 1, false),
    keysOnly: jspb.Message.getFieldWithDefault(msg, 2, false),
    snapshot: (f = msg.getSnapshot()) && proto.opencannabis.crypto.primitives.integrity.Hash.toObject(includeInstance, f),
    fingerprint: (f = msg.getFingerprint()) && proto.opencannabis.crypto.primitives.integrity.Hash.toObject(includeInstance, f),
    sectionList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.MenuSettings}
 */
proto.opencannabis.products.menu.MenuSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.MenuSettings;
  return proto.opencannabis.products.menu.MenuSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.MenuSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.MenuSettings}
 */
proto.opencannabis.products.menu.MenuSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFull(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    case 3:
      var value = new proto.opencannabis.crypto.primitives.integrity.Hash;
      reader.readMessage(value,proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 4:
      var value = new proto.opencannabis.crypto.primitives.integrity.Hash;
      reader.readMessage(value,proto.opencannabis.crypto.primitives.integrity.Hash.deserializeBinaryFromReader);
      msg.setFingerprint(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (reader.readPackedEnum());
      msg.setSectionList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.MenuSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.MenuSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.MenuSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFull();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.crypto.primitives.integrity.Hash.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.crypto.primitives.integrity.Hash.serializeBinaryToWriter
    );
  }
  f = message.getSectionList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional bool full = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.getFull = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.products.menu.MenuSettings.prototype.setFull = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool keys_only = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.opencannabis.products.menu.MenuSettings.prototype.setKeysOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.crypto.primitives.integrity.Hash snapshot = 3;
 * @return {?proto.opencannabis.crypto.primitives.integrity.Hash}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.getSnapshot = function() {
  return /** @type{?proto.opencannabis.crypto.primitives.integrity.Hash} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.crypto.primitives.integrity.Hash, 3));
};


/** @param {?proto.opencannabis.crypto.primitives.integrity.Hash|undefined} value */
proto.opencannabis.products.menu.MenuSettings.prototype.setSnapshot = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.products.menu.MenuSettings.prototype.clearSnapshot = function() {
  this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.crypto.primitives.integrity.Hash fingerprint = 4;
 * @return {?proto.opencannabis.crypto.primitives.integrity.Hash}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.getFingerprint = function() {
  return /** @type{?proto.opencannabis.crypto.primitives.integrity.Hash} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.crypto.primitives.integrity.Hash, 4));
};


/** @param {?proto.opencannabis.crypto.primitives.integrity.Hash|undefined} value */
proto.opencannabis.products.menu.MenuSettings.prototype.setFingerprint = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.products.menu.MenuSettings.prototype.clearFingerprint = function() {
  this.setFingerprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated section.Section section = 5;
 * @return {!Array.<!proto.opencannabis.products.menu.section.Section>}
 */
proto.opencannabis.products.menu.MenuSettings.prototype.getSectionList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.opencannabis.products.menu.section.Section>} value */
proto.opencannabis.products.menu.MenuSettings.prototype.setSectionList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.opencannabis.products.menu.section.Section} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.menu.MenuSettings.prototype.addSection = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.opencannabis.products.menu.MenuSettings.prototype.clearSectionList = function() {
  this.setSectionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.menu.Metadata.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.menu.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.Metadata.displayName = 'proto.opencannabis.products.menu.Metadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.menu.Metadata.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flagsList: jspb.Message.getRepeatedField(msg, 4),
    published: (f = msg.getPublished()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && proto.opencannabis.products.menu.MenuSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.Metadata}
 */
proto.opencannabis.products.menu.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.Metadata;
  return proto.opencannabis.products.menu.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.Metadata}
 */
proto.opencannabis.products.menu.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.products.menu.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.opencannabis.products.menu.Flag>} */ (reader.readPackedEnum());
      msg.setFlagsList(value);
      break;
    case 5:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setPublished(value);
      break;
    case 6:
      var value = new proto.opencannabis.products.menu.MenuSettings;
      reader.readMessage(value,proto.opencannabis.products.menu.MenuSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getPublished();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.products.menu.MenuSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.opencannabis.products.menu.Metadata.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.products.menu.Metadata.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.opencannabis.products.menu.Metadata.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.opencannabis.products.menu.Metadata.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Status status = 3;
 * @return {!proto.opencannabis.products.menu.Status}
 */
proto.opencannabis.products.menu.Metadata.prototype.getStatus = function() {
  return /** @type {!proto.opencannabis.products.menu.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.products.menu.Status} value */
proto.opencannabis.products.menu.Metadata.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Flag flags = 4;
 * @return {!Array.<!proto.opencannabis.products.menu.Flag>}
 */
proto.opencannabis.products.menu.Metadata.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.menu.Flag>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.opencannabis.products.menu.Flag>} value */
proto.opencannabis.products.menu.Metadata.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.opencannabis.products.menu.Flag} value
 * @param {number=} opt_index
 */
proto.opencannabis.products.menu.Metadata.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.opencannabis.products.menu.Metadata.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional opencannabis.temporal.Instant published = 5;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.products.menu.Metadata.prototype.getPublished = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 5));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.products.menu.Metadata.prototype.setPublished = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.products.menu.Metadata.prototype.clearPublished = function() {
  this.setPublished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.Metadata.prototype.hasPublished = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MenuSettings settings = 6;
 * @return {?proto.opencannabis.products.menu.MenuSettings}
 */
proto.opencannabis.products.menu.Metadata.prototype.getSettings = function() {
  return /** @type{?proto.opencannabis.products.menu.MenuSettings} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.MenuSettings, 6));
};


/** @param {?proto.opencannabis.products.menu.MenuSettings|undefined} value */
proto.opencannabis.products.menu.Metadata.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.products.menu.Metadata.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.Metadata.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.MenuProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.products.menu.MenuProduct.oneofGroups_);
};
goog.inherits(proto.opencannabis.products.menu.MenuProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.MenuProduct.displayName = 'proto.opencannabis.products.menu.MenuProduct';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.products.menu.MenuProduct.oneofGroups_ = [[10,11,12,13,14,15,16,17]];

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.MenuProduct.ProductCase = {
  PRODUCT_NOT_SET: 0,
  APOTHECARY: 10,
  CARTRIDGE: 11,
  EDIBLE: 12,
  EXTRACT: 13,
  FLOWER: 14,
  MERCHANDISE: 15,
  PLANT: 16,
  PREROLL: 17
};

/**
 * @return {proto.opencannabis.products.menu.MenuProduct.ProductCase}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getProductCase = function() {
  return /** @type {proto.opencannabis.products.menu.MenuProduct.ProductCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.MenuProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.MenuProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.MenuProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    apothecary: (f = msg.getApothecary()) && proto.opencannabis.products.Apothecary.toObject(includeInstance, f),
    cartridge: (f = msg.getCartridge()) && proto.opencannabis.products.Cartridge.toObject(includeInstance, f),
    edible: (f = msg.getEdible()) && proto.opencannabis.products.Edible.toObject(includeInstance, f),
    extract: (f = msg.getExtract()) && proto.opencannabis.products.Extract.toObject(includeInstance, f),
    flower: (f = msg.getFlower()) && proto.opencannabis.products.Flower.toObject(includeInstance, f),
    merchandise: (f = msg.getMerchandise()) && proto.opencannabis.products.Merchandise.toObject(includeInstance, f),
    plant: (f = msg.getPlant()) && proto.opencannabis.products.Plant.toObject(includeInstance, f),
    preroll: (f = msg.getPreroll()) && proto.opencannabis.products.Preroll.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.MenuProduct}
 */
proto.opencannabis.products.menu.MenuProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.MenuProduct;
  return proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.MenuProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.MenuProduct}
 */
proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 10:
      var value = new proto.opencannabis.products.Apothecary;
      reader.readMessage(value,proto.opencannabis.products.Apothecary.deserializeBinaryFromReader);
      msg.setApothecary(value);
      break;
    case 11:
      var value = new proto.opencannabis.products.Cartridge;
      reader.readMessage(value,proto.opencannabis.products.Cartridge.deserializeBinaryFromReader);
      msg.setCartridge(value);
      break;
    case 12:
      var value = new proto.opencannabis.products.Edible;
      reader.readMessage(value,proto.opencannabis.products.Edible.deserializeBinaryFromReader);
      msg.setEdible(value);
      break;
    case 13:
      var value = new proto.opencannabis.products.Extract;
      reader.readMessage(value,proto.opencannabis.products.Extract.deserializeBinaryFromReader);
      msg.setExtract(value);
      break;
    case 14:
      var value = new proto.opencannabis.products.Flower;
      reader.readMessage(value,proto.opencannabis.products.Flower.deserializeBinaryFromReader);
      msg.setFlower(value);
      break;
    case 15:
      var value = new proto.opencannabis.products.Merchandise;
      reader.readMessage(value,proto.opencannabis.products.Merchandise.deserializeBinaryFromReader);
      msg.setMerchandise(value);
      break;
    case 16:
      var value = new proto.opencannabis.products.Plant;
      reader.readMessage(value,proto.opencannabis.products.Plant.deserializeBinaryFromReader);
      msg.setPlant(value);
      break;
    case 17:
      var value = new proto.opencannabis.products.Preroll;
      reader.readMessage(value,proto.opencannabis.products.Preroll.deserializeBinaryFromReader);
      msg.setPreroll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.MenuProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getApothecary();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencannabis.products.Apothecary.serializeBinaryToWriter
    );
  }
  f = message.getCartridge();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.opencannabis.products.Cartridge.serializeBinaryToWriter
    );
  }
  f = message.getEdible();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.opencannabis.products.Edible.serializeBinaryToWriter
    );
  }
  f = message.getExtract();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.opencannabis.products.Extract.serializeBinaryToWriter
    );
  }
  f = message.getFlower();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.opencannabis.products.Flower.serializeBinaryToWriter
    );
  }
  f = message.getMerchandise();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.opencannabis.products.Merchandise.serializeBinaryToWriter
    );
  }
  f = message.getPlant();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.opencannabis.products.Plant.serializeBinaryToWriter
    );
  }
  f = message.getPreroll();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.opencannabis.products.Preroll.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.products.Apothecary apothecary = 10;
 * @return {?proto.opencannabis.products.Apothecary}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getApothecary = function() {
  return /** @type{?proto.opencannabis.products.Apothecary} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Apothecary, 10));
};


/** @param {?proto.opencannabis.products.Apothecary|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setApothecary = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearApothecary = function() {
  this.setApothecary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasApothecary = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional opencannabis.products.Cartridge cartridge = 11;
 * @return {?proto.opencannabis.products.Cartridge}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getCartridge = function() {
  return /** @type{?proto.opencannabis.products.Cartridge} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Cartridge, 11));
};


/** @param {?proto.opencannabis.products.Cartridge|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setCartridge = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearCartridge = function() {
  this.setCartridge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasCartridge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional opencannabis.products.Edible edible = 12;
 * @return {?proto.opencannabis.products.Edible}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getEdible = function() {
  return /** @type{?proto.opencannabis.products.Edible} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Edible, 12));
};


/** @param {?proto.opencannabis.products.Edible|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setEdible = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearEdible = function() {
  this.setEdible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasEdible = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional opencannabis.products.Extract extract = 13;
 * @return {?proto.opencannabis.products.Extract}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getExtract = function() {
  return /** @type{?proto.opencannabis.products.Extract} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Extract, 13));
};


/** @param {?proto.opencannabis.products.Extract|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setExtract = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearExtract = function() {
  this.setExtract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasExtract = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional opencannabis.products.Flower flower = 14;
 * @return {?proto.opencannabis.products.Flower}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getFlower = function() {
  return /** @type{?proto.opencannabis.products.Flower} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Flower, 14));
};


/** @param {?proto.opencannabis.products.Flower|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setFlower = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearFlower = function() {
  this.setFlower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasFlower = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional opencannabis.products.Merchandise merchandise = 15;
 * @return {?proto.opencannabis.products.Merchandise}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getMerchandise = function() {
  return /** @type{?proto.opencannabis.products.Merchandise} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Merchandise, 15));
};


/** @param {?proto.opencannabis.products.Merchandise|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setMerchandise = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearMerchandise = function() {
  this.setMerchandise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasMerchandise = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional opencannabis.products.Plant plant = 16;
 * @return {?proto.opencannabis.products.Plant}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getPlant = function() {
  return /** @type{?proto.opencannabis.products.Plant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Plant, 16));
};


/** @param {?proto.opencannabis.products.Plant|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setPlant = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearPlant = function() {
  this.setPlant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasPlant = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional opencannabis.products.Preroll preroll = 17;
 * @return {?proto.opencannabis.products.Preroll}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.getPreroll = function() {
  return /** @type{?proto.opencannabis.products.Preroll} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.Preroll, 17));
};


/** @param {?proto.opencannabis.products.Preroll|undefined} value */
proto.opencannabis.products.menu.MenuProduct.prototype.setPreroll = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.opencannabis.products.menu.MenuProduct.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.MenuProduct.prototype.clearPreroll = function() {
  this.setPreroll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.MenuProduct.prototype.hasPreroll = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.SectionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.menu.SectionData.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.menu.SectionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.SectionData.displayName = 'proto.opencannabis.products.menu.SectionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.menu.SectionData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.SectionData.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.SectionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.SectionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.SectionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    section: (f = msg.getSection()) && proto.opencannabis.products.menu.section.SectionSpec.toObject(includeInstance, f),
    productList: jspb.Message.toObjectList(msg.getProductList(),
    proto.opencannabis.products.menu.MenuProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.SectionData}
 */
proto.opencannabis.products.menu.SectionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.SectionData;
  return proto.opencannabis.products.menu.SectionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.SectionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.SectionData}
 */
proto.opencannabis.products.menu.SectionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.opencannabis.products.menu.section.SectionSpec;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader);
      msg.setSection(value);
      break;
    case 3:
      var value = new proto.opencannabis.products.menu.MenuProduct;
      reader.readMessage(value,proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader);
      msg.addProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.SectionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.SectionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.SectionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.SectionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter
    );
  }
  f = message.getProductList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.opencannabis.products.menu.SectionData.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.opencannabis.products.menu.SectionData.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional section.SectionSpec section = 2;
 * @return {?proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.opencannabis.products.menu.SectionData.prototype.getSection = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionSpec, 2));
};


/** @param {?proto.opencannabis.products.menu.section.SectionSpec|undefined} value */
proto.opencannabis.products.menu.SectionData.prototype.setSection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.products.menu.SectionData.prototype.clearSection = function() {
  this.setSection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.SectionData.prototype.hasSection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MenuProduct product = 3;
 * @return {!Array.<!proto.opencannabis.products.menu.MenuProduct>}
 */
proto.opencannabis.products.menu.SectionData.prototype.getProductList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.menu.MenuProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.menu.MenuProduct, 3));
};


/** @param {!Array.<!proto.opencannabis.products.menu.MenuProduct>} value */
proto.opencannabis.products.menu.SectionData.prototype.setProductList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opencannabis.products.menu.MenuProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.menu.MenuProduct}
 */
proto.opencannabis.products.menu.SectionData.prototype.addProduct = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opencannabis.products.menu.MenuProduct, opt_index);
};


proto.opencannabis.products.menu.SectionData.prototype.clearProductList = function() {
  this.setProductList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.SectionedMenu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.products.menu.SectionedMenu.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.products.menu.SectionedMenu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.SectionedMenu.displayName = 'proto.opencannabis.products.menu.SectionedMenu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.products.menu.SectionedMenu.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.SectionedMenu.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.SectionedMenu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.SectionedMenu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.SectionedMenu.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payloadList: jspb.Message.toObjectList(msg.getPayloadList(),
    proto.opencannabis.products.menu.SectionData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.SectionedMenu}
 */
proto.opencannabis.products.menu.SectionedMenu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.SectionedMenu;
  return proto.opencannabis.products.menu.SectionedMenu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.SectionedMenu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.SectionedMenu}
 */
proto.opencannabis.products.menu.SectionedMenu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.opencannabis.products.menu.SectionData;
      reader.readMessage(value,proto.opencannabis.products.menu.SectionData.deserializeBinaryFromReader);
      msg.addPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.SectionedMenu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.SectionedMenu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.SectionedMenu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.SectionedMenu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPayloadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.products.menu.SectionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.opencannabis.products.menu.SectionedMenu.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.opencannabis.products.menu.SectionedMenu.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SectionData payload = 2;
 * @return {!Array.<!proto.opencannabis.products.menu.SectionData>}
 */
proto.opencannabis.products.menu.SectionedMenu.prototype.getPayloadList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.menu.SectionData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.menu.SectionData, 2));
};


/** @param {!Array.<!proto.opencannabis.products.menu.SectionData>} value */
proto.opencannabis.products.menu.SectionedMenu.prototype.setPayloadList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.products.menu.SectionData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.menu.SectionData}
 */
proto.opencannabis.products.menu.SectionedMenu.prototype.addPayload = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.products.menu.SectionData, opt_index);
};


proto.opencannabis.products.menu.SectionedMenu.prototype.clearPayloadList = function() {
  this.setPayloadList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.StaticMenu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.products.menu.StaticMenu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.StaticMenu.displayName = 'proto.opencannabis.products.menu.StaticMenu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.StaticMenu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.StaticMenu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.StaticMenu.toObject = function(includeInstance, msg) {
  var f, obj = {
    apothecaryMap: (f = msg.getApothecaryMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Apothecary.toObject) : [],
    cartridgesMap: (f = msg.getCartridgesMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Cartridge.toObject) : [],
    ediblesMap: (f = msg.getEdiblesMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Edible.toObject) : [],
    extractsMap: (f = msg.getExtractsMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Extract.toObject) : [],
    flowersMap: (f = msg.getFlowersMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Flower.toObject) : [],
    merchandiseMap: (f = msg.getMerchandiseMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Merchandise.toObject) : [],
    plantsMap: (f = msg.getPlantsMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Plant.toObject) : [],
    prerollsMap: (f = msg.getPrerollsMap()) ? f.toObject(includeInstance, proto.opencannabis.products.Preroll.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.StaticMenu}
 */
proto.opencannabis.products.menu.StaticMenu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.StaticMenu;
  return proto.opencannabis.products.menu.StaticMenu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.StaticMenu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.StaticMenu}
 */
proto.opencannabis.products.menu.StaticMenu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getApothecaryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Apothecary.deserializeBinaryFromReader);
         });
      break;
    case 2:
      var value = msg.getCartridgesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Cartridge.deserializeBinaryFromReader);
         });
      break;
    case 3:
      var value = msg.getEdiblesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Edible.deserializeBinaryFromReader);
         });
      break;
    case 4:
      var value = msg.getExtractsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Extract.deserializeBinaryFromReader);
         });
      break;
    case 5:
      var value = msg.getFlowersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Flower.deserializeBinaryFromReader);
         });
      break;
    case 6:
      var value = msg.getMerchandiseMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Merchandise.deserializeBinaryFromReader);
         });
      break;
    case 7:
      var value = msg.getPlantsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Plant.deserializeBinaryFromReader);
         });
      break;
    case 8:
      var value = msg.getPrerollsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencannabis.products.Preroll.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.StaticMenu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.StaticMenu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.StaticMenu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApothecaryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Apothecary.serializeBinaryToWriter);
  }
  f = message.getCartridgesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Cartridge.serializeBinaryToWriter);
  }
  f = message.getEdiblesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Edible.serializeBinaryToWriter);
  }
  f = message.getExtractsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Extract.serializeBinaryToWriter);
  }
  f = message.getFlowersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Flower.serializeBinaryToWriter);
  }
  f = message.getMerchandiseMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Merchandise.serializeBinaryToWriter);
  }
  f = message.getPlantsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Plant.serializeBinaryToWriter);
  }
  f = message.getPrerollsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencannabis.products.Preroll.serializeBinaryToWriter);
  }
};


/**
 * map<string, opencannabis.products.Apothecary> apothecary = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Apothecary>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getApothecaryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Apothecary>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.opencannabis.products.Apothecary));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearApothecaryMap = function() {
  this.getApothecaryMap().clear();
};


/**
 * map<string, opencannabis.products.Cartridge> cartridges = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Cartridge>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getCartridgesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Cartridge>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.opencannabis.products.Cartridge));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearCartridgesMap = function() {
  this.getCartridgesMap().clear();
};


/**
 * map<string, opencannabis.products.Edible> edibles = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Edible>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getEdiblesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Edible>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.opencannabis.products.Edible));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearEdiblesMap = function() {
  this.getEdiblesMap().clear();
};


/**
 * map<string, opencannabis.products.Extract> extracts = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Extract>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getExtractsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Extract>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.opencannabis.products.Extract));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearExtractsMap = function() {
  this.getExtractsMap().clear();
};


/**
 * map<string, opencannabis.products.Flower> flowers = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Flower>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getFlowersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Flower>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.opencannabis.products.Flower));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearFlowersMap = function() {
  this.getFlowersMap().clear();
};


/**
 * map<string, opencannabis.products.Merchandise> merchandise = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Merchandise>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getMerchandiseMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Merchandise>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.opencannabis.products.Merchandise));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearMerchandiseMap = function() {
  this.getMerchandiseMap().clear();
};


/**
 * map<string, opencannabis.products.Plant> plants = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Plant>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getPlantsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Plant>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.opencannabis.products.Plant));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearPlantsMap = function() {
  this.getPlantsMap().clear();
};


/**
 * map<string, opencannabis.products.Preroll> prerolls = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencannabis.products.Preroll>}
 */
proto.opencannabis.products.menu.StaticMenu.prototype.getPrerollsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencannabis.products.Preroll>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.opencannabis.products.Preroll));
};


proto.opencannabis.products.menu.StaticMenu.prototype.clearPrerollsMap = function() {
  this.getPrerollsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.products.menu.Menu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.products.menu.Menu.oneofGroups_);
};
goog.inherits(proto.opencannabis.products.menu.Menu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.products.menu.Menu.displayName = 'proto.opencannabis.products.menu.Menu';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.products.menu.Menu.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.Menu.ContentCase = {
  CONTENT_NOT_SET: 0,
  PAYLOAD: 3,
  MENU: 4
};

/**
 * @return {proto.opencannabis.products.menu.Menu.ContentCase}
 */
proto.opencannabis.products.menu.Menu.prototype.getContentCase = function() {
  return /** @type {proto.opencannabis.products.menu.Menu.ContentCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.products.menu.Menu.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.products.menu.Menu.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.products.menu.Menu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.products.menu.Menu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.Menu.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.opencannabis.products.menu.Metadata.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.opencannabis.products.menu.SectionedMenu.toObject(includeInstance, f),
    menu: (f = msg.getMenu()) && proto.opencannabis.products.menu.StaticMenu.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.products.menu.Menu}
 */
proto.opencannabis.products.menu.Menu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.products.menu.Menu;
  return proto.opencannabis.products.menu.Menu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.products.menu.Menu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.products.menu.Menu}
 */
proto.opencannabis.products.menu.Menu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.Metadata;
      reader.readMessage(value,proto.opencannabis.products.menu.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new proto.opencannabis.products.menu.SectionedMenu;
      reader.readMessage(value,proto.opencannabis.products.menu.SectionedMenu.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = new proto.opencannabis.products.menu.StaticMenu;
      reader.readMessage(value,proto.opencannabis.products.menu.StaticMenu.deserializeBinaryFromReader);
      msg.setMenu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.products.menu.Menu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.products.menu.Menu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.products.menu.Menu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.products.menu.Menu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.products.menu.SectionedMenu.serializeBinaryToWriter
    );
  }
  f = message.getMenu();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.products.menu.StaticMenu.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.opencannabis.products.menu.Metadata}
 */
proto.opencannabis.products.menu.Menu.prototype.getMetadata = function() {
  return /** @type{?proto.opencannabis.products.menu.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.Metadata, 1));
};


/** @param {?proto.opencannabis.products.menu.Metadata|undefined} value */
proto.opencannabis.products.menu.Menu.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.products.menu.Menu.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.Menu.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SectionedMenu payload = 3;
 * @return {?proto.opencannabis.products.menu.SectionedMenu}
 */
proto.opencannabis.products.menu.Menu.prototype.getPayload = function() {
  return /** @type{?proto.opencannabis.products.menu.SectionedMenu} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.SectionedMenu, 3));
};


/** @param {?proto.opencannabis.products.menu.SectionedMenu|undefined} value */
proto.opencannabis.products.menu.Menu.prototype.setPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.opencannabis.products.menu.Menu.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.Menu.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.Menu.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StaticMenu menu = 4;
 * @return {?proto.opencannabis.products.menu.StaticMenu}
 */
proto.opencannabis.products.menu.Menu.prototype.getMenu = function() {
  return /** @type{?proto.opencannabis.products.menu.StaticMenu} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.StaticMenu, 4));
};


/** @param {?proto.opencannabis.products.menu.StaticMenu|undefined} value */
proto.opencannabis.products.menu.Menu.prototype.setMenu = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.opencannabis.products.menu.Menu.oneofGroups_[0], value);
};


proto.opencannabis.products.menu.Menu.prototype.clearMenu = function() {
  this.setMenu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.products.menu.Menu.prototype.hasMenu = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.opencannabis.products.menu.Status = {
  UNPUBLISHED: 0,
  LIVE: 1
};

/**
 * @enum {number}
 */
proto.opencannabis.products.menu.Flag = {
  DRAFT: 0,
  PRIVATE: 1,
  OUT_OF_DATE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.ProductSearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.ProductSearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.ProductSearchResult.displayName = 'proto.bloombox.schema.search.ProductSearchResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.ProductSearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.ProductSearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.ProductSearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductSearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.opencannabis.products.menu.MenuProduct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.ProductSearchResult}
 */
proto.bloombox.schema.search.ProductSearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.ProductSearchResult;
  return proto.bloombox.schema.search.ProductSearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.ProductSearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.ProductSearchResult}
 */
proto.bloombox.schema.search.ProductSearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.MenuProduct;
      reader.readMessage(value,proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.ProductSearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.ProductSearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.ProductSearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductSearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.products.menu.MenuProduct item = 1;
 * @return {?proto.opencannabis.products.menu.MenuProduct}
 */
proto.bloombox.schema.search.ProductSearchResult.prototype.getItem = function() {
  return /** @type{?proto.opencannabis.products.menu.MenuProduct} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.MenuProduct, 1));
};


/** @param {?proto.opencannabis.products.menu.MenuProduct|undefined} value */
proto.bloombox.schema.search.ProductSearchResult.prototype.setItem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.search.ProductSearchResult.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.ProductSearchResult.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.UserSearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.UserSearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.UserSearchResult.displayName = 'proto.bloombox.schema.search.UserSearchResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.UserSearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.UserSearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.UserSearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.bloombox.schema.identity.UserKey.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.bloombox.schema.identity.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.UserSearchResult}
 */
proto.bloombox.schema.search.UserSearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.UserSearchResult;
  return proto.bloombox.schema.search.UserSearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.UserSearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.UserSearchResult}
 */
proto.bloombox.schema.search.UserSearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.identity.UserKey;
      reader.readMessage(value,proto.bloombox.schema.identity.UserKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.identity.User;
      reader.readMessage(value,proto.bloombox.schema.identity.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.UserSearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.UserSearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.UserSearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.identity.UserKey.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.identity.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.identity.UserKey key = 1;
 * @return {?proto.bloombox.schema.identity.UserKey}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.getKey = function() {
  return /** @type{?proto.bloombox.schema.identity.UserKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.UserKey, 1));
};


/** @param {?proto.bloombox.schema.identity.UserKey|undefined} value */
proto.bloombox.schema.search.UserSearchResult.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.search.UserSearchResult.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.identity.User user = 2;
 * @return {?proto.bloombox.schema.identity.User}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.getUser = function() {
  return /** @type{?proto.bloombox.schema.identity.User} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.User, 2));
};


/** @param {?proto.bloombox.schema.identity.User|undefined} value */
proto.bloombox.schema.search.UserSearchResult.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.search.UserSearchResult.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.UserSearchResult.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.PartnerSearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.PartnerSearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.PartnerSearchResult.displayName = 'proto.bloombox.schema.search.PartnerSearchResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.PartnerSearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.PartnerSearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.PartnerSearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.PartnerSearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.PartnerSearchResult}
 */
proto.bloombox.schema.search.PartnerSearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.PartnerSearchResult;
  return proto.bloombox.schema.search.PartnerSearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.PartnerSearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.PartnerSearchResult}
 */
proto.bloombox.schema.search.PartnerSearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.PartnerSearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.PartnerSearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.PartnerSearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.PartnerSearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.bloombox.schema.search.PartnerSearchResult.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.search.PartnerSearchResult.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.search.SearchResult.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.search.SearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchResult.displayName = 'proto.bloombox.schema.search.SearchResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.search.SearchResult.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.bloombox.schema.search.SearchResult.ResultCase = {
  RESULT_NOT_SET: 0,
  PRODUCT: 10,
  PROFILE: 11,
  PARTNER: 12
};

/**
 * @return {proto.bloombox.schema.search.SearchResult.ResultCase}
 */
proto.bloombox.schema.search.SearchResult.prototype.getResultCase = function() {
  return /** @type {proto.bloombox.schema.search.SearchResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.search.SearchResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    rank: jspb.Message.getFieldWithDefault(msg, 1, 0),
    relevance: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    fields: (f = msg.getFields()) && proto.google.protobuf.FieldMask.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.bloombox.schema.search.ProductSearchResult.toObject(includeInstance, f),
    profile: (f = msg.getProfile()) && proto.bloombox.schema.search.UserSearchResult.toObject(includeInstance, f),
    partner: (f = msg.getPartner()) && proto.bloombox.schema.search.PartnerSearchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchResult}
 */
proto.bloombox.schema.search.SearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchResult;
  return proto.bloombox.schema.search.SearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchResult}
 */
proto.bloombox.schema.search.SearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRank(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelevance(value);
      break;
    case 3:
      var value = new proto.google.protobuf.FieldMask;
      reader.readMessage(value,proto.google.protobuf.FieldMask.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.search.ProductSearchResult;
      reader.readMessage(value,proto.bloombox.schema.search.ProductSearchResult.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.search.UserSearchResult;
      reader.readMessage(value,proto.bloombox.schema.search.UserSearchResult.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    case 12:
      var value = new proto.bloombox.schema.search.PartnerSearchResult;
      reader.readMessage(value,proto.bloombox.schema.search.PartnerSearchResult.deserializeBinaryFromReader);
      msg.setPartner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRank();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRelevance();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.search.ProductSearchResult.serializeBinaryToWriter
    );
  }
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.search.UserSearchResult.serializeBinaryToWriter
    );
  }
  f = message.getPartner();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bloombox.schema.search.PartnerSearchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 rank = 1;
 * @return {number}
 */
proto.bloombox.schema.search.SearchResult.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.search.SearchResult.prototype.setRank = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double relevance = 2;
 * @return {number}
 */
proto.bloombox.schema.search.SearchResult.prototype.getRelevance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.search.SearchResult.prototype.setRelevance = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional google.protobuf.FieldMask fields = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.bloombox.schema.search.SearchResult.prototype.getFields = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.bloombox.schema.search.SearchResult.prototype.setFields = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.search.SearchResult.prototype.clearFields = function() {
  this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResult.prototype.hasFields = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProductSearchResult product = 10;
 * @return {?proto.bloombox.schema.search.ProductSearchResult}
 */
proto.bloombox.schema.search.SearchResult.prototype.getProduct = function() {
  return /** @type{?proto.bloombox.schema.search.ProductSearchResult} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.ProductSearchResult, 10));
};


/** @param {?proto.bloombox.schema.search.ProductSearchResult|undefined} value */
proto.bloombox.schema.search.SearchResult.prototype.setProduct = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.search.SearchResult.oneofGroups_[0], value);
};


proto.bloombox.schema.search.SearchResult.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResult.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional UserSearchResult profile = 11;
 * @return {?proto.bloombox.schema.search.UserSearchResult}
 */
proto.bloombox.schema.search.SearchResult.prototype.getProfile = function() {
  return /** @type{?proto.bloombox.schema.search.UserSearchResult} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.UserSearchResult, 11));
};


/** @param {?proto.bloombox.schema.search.UserSearchResult|undefined} value */
proto.bloombox.schema.search.SearchResult.prototype.setProfile = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.search.SearchResult.oneofGroups_[0], value);
};


proto.bloombox.schema.search.SearchResult.prototype.clearProfile = function() {
  this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResult.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PartnerSearchResult partner = 12;
 * @return {?proto.bloombox.schema.search.PartnerSearchResult}
 */
proto.bloombox.schema.search.SearchResult.prototype.getPartner = function() {
  return /** @type{?proto.bloombox.schema.search.PartnerSearchResult} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.PartnerSearchResult, 12));
};


/** @param {?proto.bloombox.schema.search.PartnerSearchResult|undefined} value */
proto.bloombox.schema.search.SearchResult.prototype.setPartner = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.bloombox.schema.search.SearchResult.oneofGroups_[0], value);
};


proto.bloombox.schema.search.SearchResult.prototype.clearPartner = function() {
  this.setPartner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResult.prototype.hasPartner = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchBounds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.SearchBounds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchBounds.displayName = 'proto.bloombox.schema.search.SearchBounds';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchBounds.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchBounds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchBounds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchBounds.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchBounds}
 */
proto.bloombox.schema.search.SearchBounds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchBounds;
  return proto.bloombox.schema.search.SearchBounds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchBounds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchBounds}
 */
proto.bloombox.schema.search.SearchBounds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchBounds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchBounds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchBounds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchBounds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.bloombox.schema.search.SearchBounds.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.search.SearchBounds.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.bloombox.schema.search.SearchBounds.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.search.SearchBounds.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.search.SearchOptions.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.search.SearchOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchOptions.displayName = 'proto.bloombox.schema.search.SearchOptions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.search.SearchOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sectionList: jspb.Message.getRepeatedField(msg, 2),
    hidden: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchOptions}
 */
proto.bloombox.schema.search.SearchOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchOptions;
  return proto.bloombox.schema.search.SearchOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchOptions}
 */
proto.bloombox.schema.search.SearchOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (reader.readPackedEnum());
      msg.setSectionList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSectionList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.bloombox.schema.search.SearchOptions.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.search.SearchOptions.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated opencannabis.products.menu.section.Section section = 2;
 * @return {!Array.<!proto.opencannabis.products.menu.section.Section>}
 */
proto.bloombox.schema.search.SearchOptions.prototype.getSectionList = function() {
  return /** @type {!Array.<!proto.opencannabis.products.menu.section.Section>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.opencannabis.products.menu.section.Section>} value */
proto.bloombox.schema.search.SearchOptions.prototype.setSectionList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.opencannabis.products.menu.section.Section} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.search.SearchOptions.prototype.addSection = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.bloombox.schema.search.SearchOptions.prototype.clearSectionList = function() {
  this.setSectionList([]);
};


/**
 * optional bool hidden = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.search.SearchOptions.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.search.SearchOptions.prototype.setHidden = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchResultOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.search.SearchResultOptions.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.search.SearchResultOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchResultOptions.displayName = 'proto.bloombox.schema.search.SearchResultOptions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.search.SearchResultOptions.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchResultOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchResultOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysOnly: jspb.Message.getFieldWithDefault(msg, 1, false),
    highlight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    includeList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchResultOptions}
 */
proto.bloombox.schema.search.SearchResultOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchResultOptions;
  return proto.bloombox.schema.search.SearchResultOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchResultOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchResultOptions}
 */
proto.bloombox.schema.search.SearchResultOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.search.ResultHighlightMode} */ (reader.readEnum());
      msg.setHighlight(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.bloombox.schema.search.SearchResultExtension>} */ (reader.readPackedEnum());
      msg.setIncludeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchResultOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchResultOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHighlight();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional bool keys_only = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.search.SearchResultOptions.prototype.setKeysOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ResultHighlightMode highlight = 2;
 * @return {!proto.bloombox.schema.search.ResultHighlightMode}
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.getHighlight = function() {
  return /** @type {!proto.bloombox.schema.search.ResultHighlightMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.search.ResultHighlightMode} value */
proto.bloombox.schema.search.SearchResultOptions.prototype.setHighlight = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated SearchResultExtension include = 3;
 * @return {!Array.<!proto.bloombox.schema.search.SearchResultExtension>}
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.getIncludeList = function() {
  return /** @type {!Array.<!proto.bloombox.schema.search.SearchResultExtension>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.bloombox.schema.search.SearchResultExtension>} value */
proto.bloombox.schema.search.SearchResultOptions.prototype.setIncludeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.bloombox.schema.search.SearchResultExtension} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.search.SearchResultOptions.prototype.addInclude = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.bloombox.schema.search.SearchResultOptions.prototype.clearIncludeList = function() {
  this.setIncludeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.SearchSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchSpec.displayName = 'proto.bloombox.schema.search.SearchSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: jspb.Message.getFieldWithDefault(msg, 1, ""),
    options: (f = msg.getOptions()) && proto.bloombox.schema.search.SearchOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchSpec}
 */
proto.bloombox.schema.search.SearchSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchSpec;
  return proto.bloombox.schema.search.SearchSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchSpec}
 */
proto.bloombox.schema.search.SearchSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.search.SearchOptions;
      reader.readMessage(value,proto.bloombox.schema.search.SearchOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.search.SearchOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string term = 1;
 * @return {string}
 */
proto.bloombox.schema.search.SearchSpec.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.search.SearchSpec.prototype.setTerm = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SearchOptions options = 2;
 * @return {?proto.bloombox.schema.search.SearchOptions}
 */
proto.bloombox.schema.search.SearchSpec.prototype.getOptions = function() {
  return /** @type{?proto.bloombox.schema.search.SearchOptions} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.SearchOptions, 2));
};


/** @param {?proto.bloombox.schema.search.SearchOptions|undefined} value */
proto.bloombox.schema.search.SearchSpec.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.search.SearchSpec.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchSpec.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.ResultsetCategoricalCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.ResultsetCategoricalCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.ResultsetCategoricalCount.displayName = 'proto.bloombox.schema.search.ResultsetCategoricalCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.ResultsetCategoricalCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.ResultsetCategoricalCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.ResultsetCategoricalCount}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.ResultsetCategoricalCount;
  return proto.bloombox.schema.search.ResultsetCategoricalCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.ResultsetCategoricalCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.ResultsetCategoricalCount}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.search.SearchableCollection} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.ResultsetCategoricalCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.ResultsetCategoricalCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional SearchableCollection type = 1;
 * @return {!proto.bloombox.schema.search.SearchableCollection}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.search.SearchableCollection} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.search.SearchableCollection} value */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.search.ResultsetCategoricalCount.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.ProductResultBound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.ProductResultBound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.ProductResultBound.displayName = 'proto.bloombox.schema.search.ProductResultBound';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.ProductResultBound.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.ProductResultBound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.ProductResultBound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductResultBound.toObject = function(includeInstance, msg) {
  var f, obj = {
    low: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    high: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.ProductResultBound}
 */
proto.bloombox.schema.search.ProductResultBound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.ProductResultBound;
  return proto.bloombox.schema.search.ProductResultBound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.ProductResultBound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.ProductResultBound}
 */
proto.bloombox.schema.search.ProductResultBound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.ProductResultBound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.ProductResultBound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.ProductResultBound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductResultBound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double low = 1;
 * @return {number}
 */
proto.bloombox.schema.search.ProductResultBound.prototype.getLow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.search.ProductResultBound.prototype.setLow = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double high = 2;
 * @return {number}
 */
proto.bloombox.schema.search.ProductResultBound.prototype.getHigh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.search.ProductResultBound.prototype.setHigh = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.ProductResultMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.search.ProductResultMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.ProductResultMetadata.displayName = 'proto.bloombox.schema.search.ProductResultMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.ProductResultMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.ProductResultMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductResultMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: (f = msg.getPrice()) && proto.bloombox.schema.search.ProductResultBound.toObject(includeInstance, f),
    thc: (f = msg.getThc()) && proto.bloombox.schema.search.ProductResultBound.toObject(includeInstance, f),
    cbd: (f = msg.getCbd()) && proto.bloombox.schema.search.ProductResultBound.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.ProductResultMetadata}
 */
proto.bloombox.schema.search.ProductResultMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.ProductResultMetadata;
  return proto.bloombox.schema.search.ProductResultMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.ProductResultMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.ProductResultMetadata}
 */
proto.bloombox.schema.search.ProductResultMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.search.ProductResultBound;
      reader.readMessage(value,proto.bloombox.schema.search.ProductResultBound.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.search.ProductResultBound;
      reader.readMessage(value,proto.bloombox.schema.search.ProductResultBound.deserializeBinaryFromReader);
      msg.setThc(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.search.ProductResultBound;
      reader.readMessage(value,proto.bloombox.schema.search.ProductResultBound.deserializeBinaryFromReader);
      msg.setCbd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.ProductResultMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.ProductResultMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.ProductResultMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.search.ProductResultBound.serializeBinaryToWriter
    );
  }
  f = message.getThc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.search.ProductResultBound.serializeBinaryToWriter
    );
  }
  f = message.getCbd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.search.ProductResultBound.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProductResultBound price = 1;
 * @return {?proto.bloombox.schema.search.ProductResultBound}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.getPrice = function() {
  return /** @type{?proto.bloombox.schema.search.ProductResultBound} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.ProductResultBound, 1));
};


/** @param {?proto.bloombox.schema.search.ProductResultBound|undefined} value */
proto.bloombox.schema.search.ProductResultMetadata.prototype.setPrice = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.search.ProductResultMetadata.prototype.clearPrice = function() {
  this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductResultBound thc = 2;
 * @return {?proto.bloombox.schema.search.ProductResultBound}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.getThc = function() {
  return /** @type{?proto.bloombox.schema.search.ProductResultBound} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.ProductResultBound, 2));
};


/** @param {?proto.bloombox.schema.search.ProductResultBound|undefined} value */
proto.bloombox.schema.search.ProductResultMetadata.prototype.setThc = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.search.ProductResultMetadata.prototype.clearThc = function() {
  this.setThc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.hasThc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProductResultBound cbd = 3;
 * @return {?proto.bloombox.schema.search.ProductResultBound}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.getCbd = function() {
  return /** @type{?proto.bloombox.schema.search.ProductResultBound} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.ProductResultBound, 3));
};


/** @param {?proto.bloombox.schema.search.ProductResultBound|undefined} value */
proto.bloombox.schema.search.ProductResultMetadata.prototype.setCbd = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.search.ProductResultMetadata.prototype.clearCbd = function() {
  this.setCbd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.ProductResultMetadata.prototype.hasCbd = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchResultsetMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.search.SearchResultsetMetadata.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.search.SearchResultsetMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchResultsetMetadata.displayName = 'proto.bloombox.schema.search.SearchResultsetMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.search.SearchResultsetMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchResultsetMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchResultsetMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultsetMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    countList: jspb.Message.toObjectList(msg.getCountList(),
    proto.bloombox.schema.search.ResultsetCategoricalCount.toObject, includeInstance),
    products: (f = msg.getProducts()) && proto.bloombox.schema.search.ProductResultMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchResultsetMetadata}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchResultsetMetadata;
  return proto.bloombox.schema.search.SearchResultsetMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchResultsetMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchResultsetMetadata}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.search.ResultsetCategoricalCount;
      reader.readMessage(value,proto.bloombox.schema.search.ResultsetCategoricalCount.deserializeBinaryFromReader);
      msg.addCount(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.search.ProductResultMetadata;
      reader.readMessage(value,proto.bloombox.schema.search.ProductResultMetadata.deserializeBinaryFromReader);
      msg.setProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchResultsetMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchResultsetMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultsetMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bloombox.schema.search.ResultsetCategoricalCount.serializeBinaryToWriter
    );
  }
  f = message.getProducts();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.search.ProductResultMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResultsetCategoricalCount count = 1;
 * @return {!Array.<!proto.bloombox.schema.search.ResultsetCategoricalCount>}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.getCountList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.search.ResultsetCategoricalCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.search.ResultsetCategoricalCount, 1));
};


/** @param {!Array.<!proto.bloombox.schema.search.ResultsetCategoricalCount>} value */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.setCountList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bloombox.schema.search.ResultsetCategoricalCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.search.ResultsetCategoricalCount}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.addCount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bloombox.schema.search.ResultsetCategoricalCount, opt_index);
};


proto.bloombox.schema.search.SearchResultsetMetadata.prototype.clearCountList = function() {
  this.setCountList([]);
};


/**
 * optional ProductResultMetadata products = 2;
 * @return {?proto.bloombox.schema.search.ProductResultMetadata}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.getProducts = function() {
  return /** @type{?proto.bloombox.schema.search.ProductResultMetadata} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.ProductResultMetadata, 2));
};


/** @param {?proto.bloombox.schema.search.ProductResultMetadata|undefined} value */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.setProducts = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.search.SearchResultsetMetadata.prototype.clearProducts = function() {
  this.setProducts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResultsetMetadata.prototype.hasProducts = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.search.SearchResultset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.search.SearchResultset.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.search.SearchResultset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.search.SearchResultset.displayName = 'proto.bloombox.schema.search.SearchResultset';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.search.SearchResultset.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.search.SearchResultset.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.search.SearchResultset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.search.SearchResultset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultset.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.bloombox.schema.search.SearchResultsetMetadata.toObject(includeInstance, f),
    payloadList: jspb.Message.toObjectList(msg.getPayloadList(),
    proto.bloombox.schema.search.SearchResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.search.SearchResultset}
 */
proto.bloombox.schema.search.SearchResultset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.search.SearchResultset;
  return proto.bloombox.schema.search.SearchResultset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.search.SearchResultset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.search.SearchResultset}
 */
proto.bloombox.schema.search.SearchResultset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.search.SearchResultsetMetadata;
      reader.readMessage(value,proto.bloombox.schema.search.SearchResultsetMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.search.SearchResult;
      reader.readMessage(value,proto.bloombox.schema.search.SearchResult.deserializeBinaryFromReader);
      msg.addPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.search.SearchResultset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.search.SearchResultset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.search.SearchResultset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.search.SearchResultset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.search.SearchResultsetMetadata.serializeBinaryToWriter
    );
  }
  f = message.getPayloadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bloombox.schema.search.SearchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional SearchResultsetMetadata metadata = 1;
 * @return {?proto.bloombox.schema.search.SearchResultsetMetadata}
 */
proto.bloombox.schema.search.SearchResultset.prototype.getMetadata = function() {
  return /** @type{?proto.bloombox.schema.search.SearchResultsetMetadata} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.SearchResultsetMetadata, 1));
};


/** @param {?proto.bloombox.schema.search.SearchResultsetMetadata|undefined} value */
proto.bloombox.schema.search.SearchResultset.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.search.SearchResultset.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.search.SearchResultset.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SearchResult payload = 2;
 * @return {!Array.<!proto.bloombox.schema.search.SearchResult>}
 */
proto.bloombox.schema.search.SearchResultset.prototype.getPayloadList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.search.SearchResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.search.SearchResult, 2));
};


/** @param {!Array.<!proto.bloombox.schema.search.SearchResult>} value */
proto.bloombox.schema.search.SearchResultset.prototype.setPayloadList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bloombox.schema.search.SearchResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.search.SearchResult}
 */
proto.bloombox.schema.search.SearchResultset.prototype.addPayload = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bloombox.schema.search.SearchResult, opt_index);
};


proto.bloombox.schema.search.SearchResultset.prototype.clearPayloadList = function() {
  this.setPayloadList([]);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.search.SearchableCollection = {
  GLOBAL: 0,
  PRODUCTS: 1,
  USERS: 2,
  PARTNERS: 3
};

/**
 * @enum {number}
 */
proto.bloombox.schema.search.SearchResultExtension = {
  NAME: 0,
  DESCRIPTION: 1,
  MEDIA: 2,
  LABS: 3,
  PRICING: 4,
  RELATED: 5
};

/**
 * @enum {number}
 */
proto.bloombox.schema.search.ResultHighlightMode = {
  NO_HIGHLIGHTING: 0,
  HTML: 1,
  MARKDOWN: 2,
  SNIPPET: 3
};

/**
 * @enum {number}
 */
proto.bloombox.schema.search.SearchSortMode = {
  NATURAL: 0,
  LEXICOGRAPHIC: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.displayName = 'proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apiKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings;
  return proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string api_key = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.setApiKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string auth_token = 3;
 * @return {string}
 */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.prototype.setAuthToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.integrations.GenericIntegrationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.displayName = 'proto.bloombox.schema.partner.integrations.GenericIntegrationSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    partner: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enabled: jspb.Message.getFieldWithDefault(msg, 2, false),
    fullySetup: jspb.Message.getFieldWithDefault(msg, 3, false),
    lastTested: (f = msg.getLastTested()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.integrations.GenericIntegrationSettings;
  return proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.partner.integrations.IntegrationPartner} */ (reader.readEnum());
      msg.setPartner(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullySetup(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setLastTested(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartner();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFullySetup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLastTested();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional IntegrationPartner partner = 1;
 * @return {!proto.bloombox.schema.partner.integrations.IntegrationPartner}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.getPartner = function() {
  return /** @type {!proto.bloombox.schema.partner.integrations.IntegrationPartner} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.partner.integrations.IntegrationPartner} value */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.setPartner = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool fully_setup = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.getFullySetup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.setFullySetup = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional opencannabis.temporal.Instant last_tested = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.getLastTested = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.setLastTested = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.clearLastTested = function() {
  this.setLastTested(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.prototype.hasLastTested = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.integrations.LocationIntegrationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.displayName = 'proto.bloombox.schema.partner.integrations.LocationIntegrationSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.integrations.LocationIntegrationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    integrationsList: jspb.Message.getRepeatedField(msg, 1),
    genericMap: (f = msg.getGenericMap()) ? f.toObject(includeInstance, proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.toObject) : [],
    greenbits: (f = msg.getGreenbits()) && proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.integrations.LocationIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.integrations.LocationIntegrationSettings;
  return proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.integrations.LocationIntegrationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.integrations.LocationIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.bloombox.schema.partner.integrations.IntegrationPartner>} */ (reader.readPackedEnum());
      msg.setIntegrationsList(value);
      break;
    case 2:
      var value = msg.getGenericMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.deserializeBinaryFromReader);
         });
      break;
    case 10:
      var value = new proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.deserializeBinaryFromReader);
      msg.setGreenbits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.integrations.LocationIntegrationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntegrationsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getGenericMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bloombox.schema.partner.integrations.GenericIntegrationSettings.serializeBinaryToWriter);
  }
  f = message.getGreenbits();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IntegrationPartner integrations = 1;
 * @return {!Array.<!proto.bloombox.schema.partner.integrations.IntegrationPartner>}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.getIntegrationsList = function() {
  return /** @type {!Array.<!proto.bloombox.schema.partner.integrations.IntegrationPartner>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.bloombox.schema.partner.integrations.IntegrationPartner>} value */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.setIntegrationsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bloombox.schema.partner.integrations.IntegrationPartner} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.addIntegrations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.clearIntegrationsList = function() {
  this.setIntegrationsList([]);
};


/**
 * map<string, GenericIntegrationSettings> generic = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings>}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.getGenericMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bloombox.schema.partner.integrations.GenericIntegrationSettings>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.bloombox.schema.partner.integrations.GenericIntegrationSettings));
};


proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.clearGenericMap = function() {
  this.getGenericMap().clear();
};


/**
 * optional greenbits.GreenbitsSettings greenbits = 10;
 * @return {?proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.getGreenbits = function() {
  return /** @type{?proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings, 10));
};


/** @param {?proto.bloombox.schema.partner.integrations.greenbits.GreenbitsSettings|undefined} value */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.setGreenbits = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.clearGreenbits = function() {
  this.setGreenbits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.prototype.hasGreenbits = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.displayName = 'proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings;
  return proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings}
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.partner.integrations.IntegrationPartner = {
  INTERNAL: 0,
  SALSIFY: 1,
  KEEN: 2,
  GREENBITS: 3,
  MAILCHIMP: 4,
  TWILIO: 5,
  ONFLEET: 6,
  GSUITE: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.APISettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.APISettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.APISettings.displayName = 'proto.bloombox.schema.partner.settings.APISettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.APISettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.APISettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.APISettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.APISettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    embed: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.APISettings}
 */
proto.bloombox.schema.partner.settings.APISettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.APISettings;
  return proto.bloombox.schema.partner.settings.APISettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.APISettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.APISettings}
 */
proto.bloombox.schema.partner.settings.APISettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmbed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.APISettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.APISettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.APISettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.APISettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmbed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string embed = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.APISettings.prototype.getEmbed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.APISettings.prototype.setEmbed = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.InHouseBrand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.settings.InHouseBrand.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.InHouseBrand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.InHouseBrand.displayName = 'proto.bloombox.schema.partner.settings.InHouseBrand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.settings.InHouseBrand.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.InHouseBrand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.InHouseBrand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.InHouseBrand.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    brandList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.InHouseBrand}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.InHouseBrand;
  return proto.bloombox.schema.partner.settings.InHouseBrand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.InHouseBrand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.InHouseBrand}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBrand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.InHouseBrand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.InHouseBrand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.InHouseBrand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrandList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string brand = 2;
 * @return {!Array.<string>}
 */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.getBrandList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.setBrandList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.bloombox.schema.partner.settings.InHouseBrand.prototype.addBrand = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.bloombox.schema.partner.settings.InHouseBrand.prototype.clearBrandList = function() {
  this.setBrandList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.settings.ProductBrandSettings.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ProductBrandSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ProductBrandSettings.displayName = 'proto.bloombox.schema.partner.settings.ProductBrandSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ProductBrandSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ProductBrandSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    inhouseList: jspb.Message.toObjectList(msg.getInhouseList(),
    proto.bloombox.schema.partner.settings.InHouseBrand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ProductBrandSettings}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ProductBrandSettings;
  return proto.bloombox.schema.partner.settings.ProductBrandSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ProductBrandSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ProductBrandSettings}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.InHouseBrand;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.InHouseBrand.deserializeBinaryFromReader);
      msg.addInhouse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ProductBrandSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ProductBrandSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInhouseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.InHouseBrand.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InHouseBrand inhouse = 1;
 * @return {!Array.<!proto.bloombox.schema.partner.settings.InHouseBrand>}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.getInhouseList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.partner.settings.InHouseBrand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.partner.settings.InHouseBrand, 1));
};


/** @param {!Array.<!proto.bloombox.schema.partner.settings.InHouseBrand>} value */
proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.setInhouseList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bloombox.schema.partner.settings.InHouseBrand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.partner.settings.InHouseBrand}
 */
proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.addInhouse = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bloombox.schema.partner.settings.InHouseBrand, opt_index);
};


proto.bloombox.schema.partner.settings.ProductBrandSettings.prototype.clearInhouseList = function() {
  this.setInhouseList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PublishSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PublishSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PublishSettings.displayName = 'proto.bloombox.schema.partner.settings.PublishSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PublishSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PublishSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PublishSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    menu: jspb.Message.getFieldWithDefault(msg, 1, false),
    profile: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PublishSettings}
 */
proto.bloombox.schema.partner.settings.PublishSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PublishSettings;
  return proto.bloombox.schema.partner.settings.PublishSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PublishSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PublishSettings}
 */
proto.bloombox.schema.partner.settings.PublishSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMenu(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PublishSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PublishSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PublishSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMenu();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getProfile();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool menu = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.getMenu = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.setMenu = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool profile = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.getProfile = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PublishSettings.prototype.setProfile = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.partner.settings.CustomSectionSettings.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.partner.settings.CustomSectionSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.CustomSectionSettings.displayName = 'proto.bloombox.schema.partner.settings.CustomSectionSettings';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.SettingsCase = {
  SETTINGS_NOT_SET: 0,
  FILTER: 2
};

/**
 * @return {proto.bloombox.schema.partner.settings.CustomSectionSettings.SettingsCase}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.getSettingsCase = function() {
  return /** @type {proto.bloombox.schema.partner.settings.CustomSectionSettings.SettingsCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.partner.settings.CustomSectionSettings.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.CustomSectionSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.CustomSectionSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.CustomSectionSettings}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.CustomSectionSettings;
  return proto.bloombox.schema.partner.settings.CustomSectionSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.CustomSectionSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.CustomSectionSettings}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.partner.settings.FilteredSectionType} */ (reader.readEnum());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.CustomSectionSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.CustomSectionSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.bloombox.schema.partner.settings.FilteredSectionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.setSpec = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FilteredSectionType filter = 2;
 * @return {!proto.bloombox.schema.partner.settings.FilteredSectionType}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.getFilter = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.FilteredSectionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.FilteredSectionType} value */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.setFilter = function(value) {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.partner.settings.CustomSectionSettings.oneofGroups_[0], value);
};


proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.clearFilter = function() {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.partner.settings.CustomSectionSettings.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.CustomSectionSettings.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.partner.settings.SectionSettingsPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.SectionSettingsPayload.displayName = 'proto.bloombox.schema.partner.settings.SectionSettingsPayload';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.KindCase = {
  KIND_NOT_SET: 0,
  TYPE: 5,
  CUSTOM: 6
};

/**
 * @return {proto.bloombox.schema.partner.settings.SectionSettingsPayload.KindCase}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getKindCase = function() {
  return /** @type {proto.bloombox.schema.partner.settings.SectionSettingsPayload.KindCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.SectionSettingsPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    hide: jspb.Message.getFieldWithDefault(msg, 1, false),
    label: jspb.Message.getFieldWithDefault(msg, 2, false),
    media: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    custom: (f = msg.getCustom()) && proto.bloombox.schema.partner.settings.CustomSectionSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
  return proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.SectionSettingsPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHide(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMedia(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {!proto.bloombox.schema.partner.settings.SectionSettingsType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.settings.CustomSectionSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.CustomSectionSettings.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.SectionSettingsPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHide();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMedia();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.bloombox.schema.partner.settings.SectionSettingsType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.settings.CustomSectionSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool hide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getHide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setHide = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool label = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getLabel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setLabel = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string media = 3;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getMedia = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setMedia = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SectionSettingsType type = 5;
 * @return {!proto.bloombox.schema.partner.settings.SectionSettingsType}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.SectionSettingsType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.SectionSettingsType} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setType = function(value) {
  jspb.Message.setOneofField(this, 5, proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_[0], value);
};


proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.clearType = function() {
  jspb.Message.setOneofField(this, 5, proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CustomSectionSettings custom = 6;
 * @return {?proto.bloombox.schema.partner.settings.CustomSectionSettings}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.getCustom = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.CustomSectionSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.CustomSectionSettings, 6));
};


/** @param {?proto.bloombox.schema.partner.settings.CustomSectionSettings|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.setCustom = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.bloombox.schema.partner.settings.SectionSettingsPayload.oneofGroups_[0], value);
};


proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.clearCustom = function() {
  this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettingsPayload.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.SectionSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.SectionSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.SectionSettings.displayName = 'proto.bloombox.schema.partner.settings.SectionSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.SectionSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.SectionSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SectionSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    apothecary: (f = msg.getApothecary()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    cartridges: (f = msg.getCartridges()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    concentrates: (f = msg.getConcentrates()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    edibles: (f = msg.getEdibles()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    flowers: (f = msg.getFlowers()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    prerolls: (f = msg.getPrerolls()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    merchandise: (f = msg.getMerchandise()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    plants: (f = msg.getPlants()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    cbd: (f = msg.getCbd()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    house: (f = msg.getHouse()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f),
    onsale: (f = msg.getOnsale()) && proto.bloombox.schema.partner.settings.SectionSettingsPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.SectionSettings}
 */
proto.bloombox.schema.partner.settings.SectionSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.SectionSettings;
  return proto.bloombox.schema.partner.settings.SectionSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.SectionSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.SectionSettings}
 */
proto.bloombox.schema.partner.settings.SectionSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setApothecary(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setCartridges(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setConcentrates(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setEdibles(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setFlowers(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setPrerolls(value);
      break;
    case 7:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setMerchandise(value);
      break;
    case 8:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setPlants(value);
      break;
    case 20:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setCbd(value);
      break;
    case 21:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setHouse(value);
      break;
    case 22:
      var value = new proto.bloombox.schema.partner.settings.SectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettingsPayload.deserializeBinaryFromReader);
      msg.setOnsale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.SectionSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.SectionSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SectionSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApothecary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getCartridges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getConcentrates();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getEdibles();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getFlowers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getPrerolls();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getMerchandise();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getPlants();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getCbd();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getHouse();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getOnsale();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.bloombox.schema.partner.settings.SectionSettingsPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional SectionSettingsPayload apothecary = 1;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getApothecary = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setApothecary = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearApothecary = function() {
  this.setApothecary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasApothecary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SectionSettingsPayload cartridges = 2;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getCartridges = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setCartridges = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearCartridges = function() {
  this.setCartridges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasCartridges = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SectionSettingsPayload concentrates = 3;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getConcentrates = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setConcentrates = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearConcentrates = function() {
  this.setConcentrates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasConcentrates = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SectionSettingsPayload edibles = 4;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getEdibles = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 4));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setEdibles = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearEdibles = function() {
  this.setEdibles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasEdibles = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SectionSettingsPayload flowers = 5;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getFlowers = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 5));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setFlowers = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearFlowers = function() {
  this.setFlowers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasFlowers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SectionSettingsPayload prerolls = 6;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getPrerolls = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 6));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setPrerolls = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearPrerolls = function() {
  this.setPrerolls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasPrerolls = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SectionSettingsPayload merchandise = 7;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getMerchandise = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 7));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setMerchandise = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearMerchandise = function() {
  this.setMerchandise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasMerchandise = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SectionSettingsPayload plants = 8;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getPlants = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 8));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setPlants = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearPlants = function() {
  this.setPlants(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasPlants = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SectionSettingsPayload cbd = 20;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getCbd = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 20));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setCbd = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearCbd = function() {
  this.setCbd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasCbd = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SectionSettingsPayload house = 21;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getHouse = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 21));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setHouse = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearHouse = function() {
  this.setHouse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasHouse = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional SectionSettingsPayload onsale = 22;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.getOnsale = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettingsPayload, 22));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.setOnsale = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.bloombox.schema.partner.settings.SectionSettings.prototype.clearOnsale = function() {
  this.setOnsale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SectionSettings.prototype.hasOnsale = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.TVBannerSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.TVBannerSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.TVBannerSettings.displayName = 'proto.bloombox.schema.partner.settings.TVBannerSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.TVBannerSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.TVBannerSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    bannerText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.TVBannerSettings}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.TVBannerSettings;
  return proto.bloombox.schema.partner.settings.TVBannerSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.TVBannerSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.TVBannerSettings}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBannerText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.TVBannerSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.TVBannerSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBannerText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string banner_text = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.getBannerText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.setBannerText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.TVBannerSettings.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.displayName = 'proto.bloombox.schema.partner.settings.TVSectionSettingsPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    sort: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
  return proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 sort = 1;
 * @return {number}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.getSort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.setSort = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.TVMenuSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.TVMenuSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.TVMenuSettings.displayName = 'proto.bloombox.schema.partner.settings.TVMenuSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.TVMenuSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.TVMenuSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    apothecary: (f = msg.getApothecary()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    cartridges: (f = msg.getCartridges()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    concentrates: (f = msg.getConcentrates()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    edibles: (f = msg.getEdibles()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    flowers: (f = msg.getFlowers()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    prerolls: (f = msg.getPrerolls()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    merchandise: (f = msg.getMerchandise()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f),
    plants: (f = msg.getPlants()) && proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.TVMenuSettings}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.TVMenuSettings;
  return proto.bloombox.schema.partner.settings.TVMenuSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.TVMenuSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.TVMenuSettings}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setApothecary(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setCartridges(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setConcentrates(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setEdibles(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setFlowers(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setPrerolls(value);
      break;
    case 7:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setMerchandise(value);
      break;
    case 8:
      var value = new proto.bloombox.schema.partner.settings.TVSectionSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.deserializeBinaryFromReader);
      msg.setPlants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.TVMenuSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.TVMenuSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApothecary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getCartridges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getConcentrates();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getEdibles();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getFlowers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getPrerolls();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getMerchandise();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getPlants();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bloombox.schema.partner.settings.TVSectionSettingsPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional TVSectionSettingsPayload apothecary = 1;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getApothecary = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setApothecary = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearApothecary = function() {
  this.setApothecary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasApothecary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TVSectionSettingsPayload cartridges = 2;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getCartridges = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setCartridges = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearCartridges = function() {
  this.setCartridges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasCartridges = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TVSectionSettingsPayload concentrates = 3;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getConcentrates = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setConcentrates = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearConcentrates = function() {
  this.setConcentrates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasConcentrates = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TVSectionSettingsPayload edibles = 4;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getEdibles = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 4));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setEdibles = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearEdibles = function() {
  this.setEdibles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasEdibles = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TVSectionSettingsPayload flowers = 5;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getFlowers = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 5));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setFlowers = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearFlowers = function() {
  this.setFlowers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasFlowers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TVSectionSettingsPayload prerolls = 6;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getPrerolls = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 6));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setPrerolls = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearPrerolls = function() {
  this.setPrerolls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasPrerolls = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TVSectionSettingsPayload merchandise = 7;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getMerchandise = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 7));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setMerchandise = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearMerchandise = function() {
  this.setMerchandise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasMerchandise = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TVSectionSettingsPayload plants = 8;
 * @return {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.getPlants = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSectionSettingsPayload, 8));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSectionSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.setPlants = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.clearPlants = function() {
  this.setPlants(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVMenuSettings.prototype.hasPlants = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.TVSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.TVSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.TVSettings.displayName = 'proto.bloombox.schema.partner.settings.TVSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.TVSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.TVSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    banner: (f = msg.getBanner()) && proto.bloombox.schema.partner.settings.TVBannerSettings.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && proto.bloombox.schema.partner.settings.TVMenuSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.TVSettings}
 */
proto.bloombox.schema.partner.settings.TVSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.TVSettings;
  return proto.bloombox.schema.partner.settings.TVSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.TVSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.TVSettings}
 */
proto.bloombox.schema.partner.settings.TVSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.TVBannerSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVBannerSettings.deserializeBinaryFromReader);
      msg.setBanner(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.TVMenuSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVMenuSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.TVSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.TVSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.TVSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBanner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.TVBannerSettings.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.TVMenuSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional TVBannerSettings banner = 1;
 * @return {?proto.bloombox.schema.partner.settings.TVBannerSettings}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.getBanner = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVBannerSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVBannerSettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.TVBannerSettings|undefined} value */
proto.bloombox.schema.partner.settings.TVSettings.prototype.setBanner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.TVSettings.prototype.clearBanner = function() {
  this.setBanner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.hasBanner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TVMenuSettings settings = 2;
 * @return {?proto.bloombox.schema.partner.settings.TVMenuSettings}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.getSettings = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVMenuSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVMenuSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.TVMenuSettings|undefined} value */
proto.bloombox.schema.partner.settings.TVSettings.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.TVSettings.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.TVSettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.HoursSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.HoursSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.HoursSpec.displayName = 'proto.bloombox.schema.partner.settings.HoursSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.HoursSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.HoursSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.HoursSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    hour: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.HoursSpec}
 */
proto.bloombox.schema.partner.settings.HoursSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.HoursSpec;
  return proto.bloombox.schema.partner.settings.HoursSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.HoursSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.HoursSpec}
 */
proto.bloombox.schema.partner.settings.HoursSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHour(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.HoursSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.HoursSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.HoursSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHour();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 hour = 1;
 * @return {number}
 */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.setHour = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minute = 2;
 * @return {number}
 */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.partner.settings.HoursSpec.prototype.setMinute = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.HoursBoundary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.HoursBoundary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.HoursBoundary.displayName = 'proto.bloombox.schema.partner.settings.HoursBoundary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.HoursBoundary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.HoursBoundary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.HoursBoundary.toObject = function(includeInstance, msg) {
  var f, obj = {
    begin: (f = msg.getBegin()) && proto.bloombox.schema.partner.settings.HoursSpec.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.bloombox.schema.partner.settings.HoursSpec.toObject(includeInstance, f),
    span: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.HoursBoundary}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.HoursBoundary;
  return proto.bloombox.schema.partner.settings.HoursBoundary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.HoursBoundary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.HoursBoundary}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.HoursSpec;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.HoursSpec.deserializeBinaryFromReader);
      msg.setBegin(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.HoursSpec;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.HoursSpec.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.partner.settings.HoursSpan} */ (reader.readEnum());
      msg.setSpan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.HoursBoundary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.HoursBoundary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.HoursBoundary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBegin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.HoursSpec.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.HoursSpec.serializeBinaryToWriter
    );
  }
  f = message.getSpan();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional HoursSpec begin = 1;
 * @return {?proto.bloombox.schema.partner.settings.HoursSpec}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.getBegin = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.HoursSpec} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.HoursSpec, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.HoursSpec|undefined} value */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.setBegin = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.HoursBoundary.prototype.clearBegin = function() {
  this.setBegin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.hasBegin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HoursSpec end = 2;
 * @return {?proto.bloombox.schema.partner.settings.HoursSpec}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.getEnd = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.HoursSpec} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.HoursSpec, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.HoursSpec|undefined} value */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.HoursBoundary.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HoursSpan span = 3;
 * @return {!proto.bloombox.schema.partner.settings.HoursSpan}
 */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.getSpan = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.HoursSpan} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.HoursSpan} value */
proto.bloombox.schema.partner.settings.HoursBoundary.prototype.setSpan = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.RegularHoursSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.RegularHoursSettings.displayName = 'proto.bloombox.schema.partner.settings.RegularHoursSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.RegularHoursSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.RegularHoursSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    bounds: (f = msg.getBounds()) && proto.bloombox.schema.partner.settings.HoursBoundary.toObject(includeInstance, f),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.RegularHoursSettings}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.RegularHoursSettings;
  return proto.bloombox.schema.partner.settings.RegularHoursSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.RegularHoursSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.RegularHoursSettings}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.HoursBoundary;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.HoursBoundary.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.RegularHoursSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.RegularHoursSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.HoursBoundary.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional HoursBoundary bounds = 1;
 * @return {?proto.bloombox.schema.partner.settings.HoursBoundary}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.getBounds = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.HoursBoundary} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.HoursBoundary, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.HoursBoundary|undefined} value */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.setBounds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.clearBounds = function() {
  this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShopStatus mode = 2;
 * @return {!proto.bloombox.schema.partner.settings.ShopStatus}
 */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.getMode = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.ShopStatus} value */
proto.bloombox.schema.partner.settings.RegularHoursSettings.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.SpecialHoursSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.SpecialHoursSettings.displayName = 'proto.bloombox.schema.partner.settings.SpecialHoursSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.SpecialHoursSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.SpecialHoursSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    bounds: (f = msg.getBounds()) && proto.bloombox.schema.partner.settings.HoursBoundary.toObject(includeInstance, f),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    date: (f = msg.getDate()) && proto.opencannabis.temporal.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.SpecialHoursSettings}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.SpecialHoursSettings;
  return proto.bloombox.schema.partner.settings.SpecialHoursSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.SpecialHoursSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.SpecialHoursSettings}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.HoursBoundary;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.HoursBoundary.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Date;
      reader.readMessage(value,proto.opencannabis.temporal.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.SpecialHoursSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.SpecialHoursSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.HoursBoundary.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional HoursBoundary bounds = 1;
 * @return {?proto.bloombox.schema.partner.settings.HoursBoundary}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.getBounds = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.HoursBoundary} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.HoursBoundary, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.HoursBoundary|undefined} value */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.setBounds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.clearBounds = function() {
  this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShopStatus mode = 2;
 * @return {!proto.bloombox.schema.partner.settings.ShopStatus}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.getMode = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.ShopStatus} value */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Date date = 3;
 * @return {?proto.opencannabis.temporal.Date}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.getDate = function() {
  return /** @type{?proto.opencannabis.temporal.Date} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Date, 3));
};


/** @param {?proto.opencannabis.temporal.Date|undefined} value */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.SpecialHoursSettings.prototype.hasDate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.settings.ShopHoursSettings.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopHoursSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopHoursSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopHoursSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopHoursSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopHoursSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    regularList: jspb.Message.toObjectList(msg.getRegularList(),
    proto.bloombox.schema.partner.settings.RegularHoursSettings.toObject, includeInstance),
    specialMap: (f = msg.getSpecialMap()) ? f.toObject(includeInstance, proto.bloombox.schema.partner.settings.SpecialHoursSettings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopHoursSettings}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopHoursSettings;
  return proto.bloombox.schema.partner.settings.ShopHoursSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopHoursSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopHoursSettings}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.RegularHoursSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.RegularHoursSettings.deserializeBinaryFromReader);
      msg.addRegular(value);
      break;
    case 2:
      var value = msg.getSpecialMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bloombox.schema.partner.settings.SpecialHoursSettings.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopHoursSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopHoursSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegularList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.RegularHoursSettings.serializeBinaryToWriter
    );
  }
  f = message.getSpecialMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bloombox.schema.partner.settings.SpecialHoursSettings.serializeBinaryToWriter);
  }
};


/**
 * repeated RegularHoursSettings regular = 1;
 * @return {!Array.<!proto.bloombox.schema.partner.settings.RegularHoursSettings>}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.getRegularList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.partner.settings.RegularHoursSettings>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.partner.settings.RegularHoursSettings, 1));
};


/** @param {!Array.<!proto.bloombox.schema.partner.settings.RegularHoursSettings>} value */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.setRegularList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bloombox.schema.partner.settings.RegularHoursSettings=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.partner.settings.RegularHoursSettings}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.addRegular = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bloombox.schema.partner.settings.RegularHoursSettings, opt_index);
};


proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.clearRegularList = function() {
  this.setRegularList([]);
};


/**
 * map<string, SpecialHoursSettings> special = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bloombox.schema.partner.settings.SpecialHoursSettings>}
 */
proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.getSpecialMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bloombox.schema.partner.settings.SpecialHoursSettings>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.bloombox.schema.partner.settings.SpecialHoursSettings));
};


proto.bloombox.schema.partner.settings.ShopHoursSettings.prototype.clearSpecialMap = function() {
  this.getSpecialMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopServiceSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopServiceSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopServiceSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopServiceSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopServiceSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    delivery: jspb.Message.getFieldWithDefault(msg, 1, false),
    express: jspb.Message.getFieldWithDefault(msg, 2, false),
    pickup: jspb.Message.getFieldWithDefault(msg, 3, false),
    storefront: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopServiceSettings}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopServiceSettings;
  return proto.bloombox.schema.partner.settings.ShopServiceSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopServiceSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopServiceSettings}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelivery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpress(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPickup(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStorefront(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopServiceSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopServiceSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelivery();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getExpress();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPickup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStorefront();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool delivery = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.getDelivery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.setDelivery = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool express = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.getExpress = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.setExpress = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool pickup = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.getPickup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.setPickup = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool storefront = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.getStorefront = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopServiceSettings.prototype.setStorefront = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.displayName = 'proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    zipcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    enabled: jspb.Message.getFieldWithDefault(msg, 2, false),
    deliveryMinimum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings;
  return proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipcode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeliveryMinimum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZipcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDeliveryMinimum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string zipcode = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.getZipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.setZipcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 delivery_minimum = 3;
 * @return {number}
 */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.getDeliveryMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.prototype.setDeliveryMinimum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.DeliverySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.DeliverySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.DeliverySettings.displayName = 'proto.bloombox.schema.partner.settings.DeliverySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.DeliverySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.DeliverySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.DeliverySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    globalMinimum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    zipcodesMap: (f = msg.getZipcodesMap()) ? f.toObject(includeInstance, proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.DeliverySettings}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.DeliverySettings;
  return proto.bloombox.schema.partner.settings.DeliverySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.DeliverySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.DeliverySettings}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGlobalMinimum(value);
      break;
    case 2:
      var value = msg.getZipcodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.DeliverySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.DeliverySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.DeliverySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobalMinimum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getZipcodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings.serializeBinaryToWriter);
  }
};


/**
 * optional uint32 global_minimum = 1;
 * @return {number}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.prototype.getGlobalMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.partner.settings.DeliverySettings.prototype.setGlobalMinimum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, DeliveryZipcodeSettings> zipcodes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings>}
 */
proto.bloombox.schema.partner.settings.DeliverySettings.prototype.getZipcodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.bloombox.schema.partner.settings.DeliveryZipcodeSettings));
};


proto.bloombox.schema.partner.settings.DeliverySettings.prototype.clearZipcodesMap = function() {
  this.getZipcodesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopContactChannelSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopContactChannelSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopContactChannelSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopContactChannelSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopContactChannelSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, false),
    sms: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopContactChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopContactChannelSettings;
  return proto.bloombox.schema.partner.settings.ShopContactChannelSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopContactChannelSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopContactChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopContactChannelSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopContactChannelSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSms();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool email = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.getEmail = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.setEmail = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool sms = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.getSms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopContactChannelSettings.prototype.setSms = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopChannelSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopChannelSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopChannelSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopChannelSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopChannelSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    orders: (f = msg.getOrders()) && proto.bloombox.schema.partner.settings.ShopContactChannelSettings.toObject(includeInstance, f),
    enrollment: (f = msg.getEnrollment()) && proto.bloombox.schema.partner.settings.ShopContactChannelSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopChannelSettings;
  return proto.bloombox.schema.partner.settings.ShopChannelSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopChannelSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.ShopContactChannelSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopContactChannelSettings.deserializeBinaryFromReader);
      msg.setOrders(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.ShopContactChannelSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopContactChannelSettings.deserializeBinaryFromReader);
      msg.setEnrollment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopChannelSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopChannelSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrders();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.ShopContactChannelSettings.serializeBinaryToWriter
    );
  }
  f = message.getEnrollment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.ShopContactChannelSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShopContactChannelSettings orders = 1;
 * @return {?proto.bloombox.schema.partner.settings.ShopContactChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.getOrders = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopContactChannelSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopContactChannelSettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopContactChannelSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.setOrders = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.clearOrders = function() {
  this.setOrders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.hasOrders = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShopContactChannelSettings enrollment = 2;
 * @return {?proto.bloombox.schema.partner.settings.ShopContactChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.getEnrollment = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopContactChannelSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopContactChannelSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopContactChannelSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.setEnrollment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.clearEnrollment = function() {
  this.setEnrollment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopChannelSettings.prototype.hasEnrollment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopContactTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopContactTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopContactTarget.displayName = 'proto.bloombox.schema.partner.settings.ShopContactTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopContactTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopContactTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    debug: jspb.Message.getFieldWithDefault(msg, 2, false),
    email: (f = msg.getEmail()) && proto.opencannabis.contact.EmailAddress.toObject(includeInstance, f),
    phone: (f = msg.getPhone()) && proto.opencannabis.contact.PhoneNumber.toObject(includeInstance, f),
    channels: (f = msg.getChannels()) && proto.bloombox.schema.partner.settings.ShopChannelSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopContactTarget}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopContactTarget;
  return proto.bloombox.schema.partner.settings.ShopContactTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopContactTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopContactTarget}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 3:
      var value = new proto.opencannabis.contact.EmailAddress;
      reader.readMessage(value,proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 4:
      var value = new proto.opencannabis.contact.PhoneNumber;
      reader.readMessage(value,proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.settings.ShopChannelSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopChannelSettings.deserializeBinaryFromReader);
      msg.setChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopContactTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopContactTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getChannels();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.settings.ShopChannelSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool debug = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.setDebug = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.contact.EmailAddress email = 3;
 * @return {?proto.opencannabis.contact.EmailAddress}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.getEmail = function() {
  return /** @type{?proto.opencannabis.contact.EmailAddress} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.EmailAddress, 3));
};


/** @param {?proto.opencannabis.contact.EmailAddress|undefined} value */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.setEmail = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.clearEmail = function() {
  this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.contact.PhoneNumber phone = 4;
 * @return {?proto.opencannabis.contact.PhoneNumber}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.getPhone = function() {
  return /** @type{?proto.opencannabis.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.PhoneNumber, 4));
};


/** @param {?proto.opencannabis.contact.PhoneNumber|undefined} value */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.setPhone = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.clearPhone = function() {
  this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ShopChannelSettings channels = 5;
 * @return {?proto.bloombox.schema.partner.settings.ShopChannelSettings}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.getChannels = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopChannelSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopChannelSettings, 5));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopChannelSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.setChannels = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.clearChannels = function() {
  this.setChannels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopContactTarget.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.CommsSenderSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.CommsSenderSettings.displayName = 'proto.bloombox.schema.partner.settings.CommsSenderSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.CommsSenderSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.CommsSenderSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: (f = msg.getEmail()) && proto.opencannabis.contact.EmailAddress.toObject(includeInstance, f),
    phone: (f = msg.getPhone()) && proto.opencannabis.contact.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.CommsSenderSettings}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.CommsSenderSettings;
  return proto.bloombox.schema.partner.settings.CommsSenderSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.CommsSenderSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.CommsSenderSettings}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.contact.EmailAddress;
      reader.readMessage(value,proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 2:
      var value = new proto.opencannabis.contact.PhoneNumber;
      reader.readMessage(value,proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.CommsSenderSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.CommsSenderSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.contact.EmailAddress email = 1;
 * @return {?proto.opencannabis.contact.EmailAddress}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.getEmail = function() {
  return /** @type{?proto.opencannabis.contact.EmailAddress} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.EmailAddress, 1));
};


/** @param {?proto.opencannabis.contact.EmailAddress|undefined} value */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.setEmail = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.clearEmail = function() {
  this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.contact.PhoneNumber phone = 2;
 * @return {?proto.opencannabis.contact.PhoneNumber}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.getPhone = function() {
  return /** @type{?proto.opencannabis.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.PhoneNumber, 2));
};


/** @param {?proto.opencannabis.contact.PhoneNumber|undefined} value */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.setPhone = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.clearPhone = function() {
  this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.CommsSenderSettings.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.settings.CommsSettingsPayload.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.CommsSettingsPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.CommsSettingsPayload.displayName = 'proto.bloombox.schema.partner.settings.CommsSettingsPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.CommsSettingsPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.CommsSettingsPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contactsList: jspb.Message.toObjectList(msg.getContactsList(),
    proto.bloombox.schema.partner.settings.ShopContactTarget.toObject, includeInstance),
    sender: (f = msg.getSender()) && proto.bloombox.schema.partner.settings.CommsSenderSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.CommsSettingsPayload}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.CommsSettingsPayload;
  return proto.bloombox.schema.partner.settings.CommsSettingsPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.CommsSettingsPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.CommsSettingsPayload}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.partner.settings.ShopCommsType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.ShopContactTarget;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopContactTarget.deserializeBinaryFromReader);
      msg.addContacts(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.CommsSenderSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.CommsSenderSettings.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.CommsSettingsPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.CommsSettingsPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.ShopContactTarget.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.CommsSenderSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShopCommsType type = 1;
 * @return {!proto.bloombox.schema.partner.settings.ShopCommsType}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.ShopCommsType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.ShopCommsType} value */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ShopContactTarget contacts = 2;
 * @return {!Array.<!proto.bloombox.schema.partner.settings.ShopContactTarget>}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.getContactsList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.partner.settings.ShopContactTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.partner.settings.ShopContactTarget, 2));
};


/** @param {!Array.<!proto.bloombox.schema.partner.settings.ShopContactTarget>} value */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.setContactsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bloombox.schema.partner.settings.ShopContactTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.partner.settings.ShopContactTarget}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.addContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bloombox.schema.partner.settings.ShopContactTarget, opt_index);
};


proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.clearContactsList = function() {
  this.setContactsList([]);
};


/**
 * optional CommsSenderSettings sender = 3;
 * @return {?proto.bloombox.schema.partner.settings.CommsSenderSettings}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.getSender = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.CommsSenderSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.CommsSenderSettings, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.CommsSenderSettings|undefined} value */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.CommsSettingsPayload.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopCommsSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopCommsSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopCommsSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopCommsSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopCommsSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    internal: (f = msg.getInternal()) && proto.bloombox.schema.partner.settings.CommsSettingsPayload.toObject(includeInstance, f),
    external: (f = msg.getExternal()) && proto.bloombox.schema.partner.settings.CommsSettingsPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopCommsSettings}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopCommsSettings;
  return proto.bloombox.schema.partner.settings.ShopCommsSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopCommsSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopCommsSettings}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.CommsSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.CommsSettingsPayload.deserializeBinaryFromReader);
      msg.setInternal(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.CommsSettingsPayload;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.CommsSettingsPayload.deserializeBinaryFromReader);
      msg.setExternal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopCommsSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopCommsSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInternal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.CommsSettingsPayload.serializeBinaryToWriter
    );
  }
  f = message.getExternal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.CommsSettingsPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommsSettingsPayload internal = 1;
 * @return {?proto.bloombox.schema.partner.settings.CommsSettingsPayload}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.getInternal = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.CommsSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.CommsSettingsPayload, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.CommsSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.setInternal = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.clearInternal = function() {
  this.setInternal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.hasInternal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommsSettingsPayload external = 2;
 * @return {?proto.bloombox.schema.partner.settings.CommsSettingsPayload}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.getExternal = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.CommsSettingsPayload} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.CommsSettingsPayload, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.CommsSettingsPayload|undefined} value */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.setExternal = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.clearExternal = function() {
  this.setExternal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopCommsSettings.prototype.hasExternal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.OnlineShopSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.OnlineShopSettings.displayName = 'proto.bloombox.schema.partner.settings.OnlineShopSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.OnlineShopSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.OnlineShopSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    origin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comms: (f = msg.getComms()) && proto.bloombox.schema.partner.settings.ShopCommsSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.OnlineShopSettings}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.OnlineShopSettings;
  return proto.bloombox.schema.partner.settings.OnlineShopSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.OnlineShopSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.OnlineShopSettings}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.ShopCommsSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopCommsSettings.deserializeBinaryFromReader);
      msg.setComms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.OnlineShopSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.OnlineShopSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComms();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.ShopCommsSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string origin = 1;
 * @return {string}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.setOrigin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ShopCommsSettings comms = 2;
 * @return {?proto.bloombox.schema.partner.settings.ShopCommsSettings}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.getComms = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopCommsSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopCommsSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopCommsSettings|undefined} value */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.setComms = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.clearComms = function() {
  this.setComms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.OnlineShopSettings.prototype.hasComms = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.displayName = 'proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.opencannabis.geo.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings;
  return proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.geo.Location location = 1;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.getLocation = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 1));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.StorefrontSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.StorefrontSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.StorefrontSettings.displayName = 'proto.bloombox.schema.partner.settings.StorefrontSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.StorefrontSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.StorefrontSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    delivery: (f = msg.getDelivery()) && proto.bloombox.schema.partner.settings.DeliverySettings.toObject(includeInstance, f),
    online: (f = msg.getOnline()) && proto.bloombox.schema.partner.settings.OnlineShopSettings.toObject(includeInstance, f),
    physical: (f = msg.getPhysical()) && proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.StorefrontSettings}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.StorefrontSettings;
  return proto.bloombox.schema.partner.settings.StorefrontSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.StorefrontSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.StorefrontSettings}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.DeliverySettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.DeliverySettings.deserializeBinaryFromReader);
      msg.setDelivery(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.OnlineShopSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.OnlineShopSettings.deserializeBinaryFromReader);
      msg.setOnline(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.deserializeBinaryFromReader);
      msg.setPhysical(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.StorefrontSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.StorefrontSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelivery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.DeliverySettings.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.OnlineShopSettings.serializeBinaryToWriter
    );
  }
  f = message.getPhysical();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeliverySettings delivery = 1;
 * @return {?proto.bloombox.schema.partner.settings.DeliverySettings}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.getDelivery = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.DeliverySettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.DeliverySettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.DeliverySettings|undefined} value */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.setDelivery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.clearDelivery = function() {
  this.setDelivery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.hasDelivery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnlineShopSettings online = 2;
 * @return {?proto.bloombox.schema.partner.settings.OnlineShopSettings}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.getOnline = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.OnlineShopSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.OnlineShopSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.OnlineShopSettings|undefined} value */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.setOnline = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.clearOnline = function() {
  this.setOnline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.hasOnline = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PhysicalStorefrontSettings physical = 3;
 * @return {?proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.getPhysical = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.PhysicalStorefrontSettings|undefined} value */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.setPhysical = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.clearPhysical = function() {
  this.setPhysical(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.StorefrontSettings.prototype.hasPhysical = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.ShopSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.ShopSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.ShopSettings.displayName = 'proto.bloombox.schema.partner.settings.ShopSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.ShopSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.ShopSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    hours: (f = msg.getHours()) && proto.bloombox.schema.partner.settings.ShopHoursSettings.toObject(includeInstance, f),
    services: (f = msg.getServices()) && proto.bloombox.schema.partner.settings.ShopServiceSettings.toObject(includeInstance, f),
    storefront: (f = msg.getStorefront()) && proto.bloombox.schema.partner.settings.StorefrontSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.ShopSettings}
 */
proto.bloombox.schema.partner.settings.ShopSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.ShopSettings;
  return proto.bloombox.schema.partner.settings.ShopSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.ShopSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.ShopSettings}
 */
proto.bloombox.schema.partner.settings.ShopSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.ShopHoursSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopHoursSettings.deserializeBinaryFromReader);
      msg.setHours(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.ShopServiceSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopServiceSettings.deserializeBinaryFromReader);
      msg.setServices(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.StorefrontSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.StorefrontSettings.deserializeBinaryFromReader);
      msg.setStorefront(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.ShopSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.ShopSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.ShopSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHours();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.ShopHoursSettings.serializeBinaryToWriter
    );
  }
  f = message.getServices();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.ShopServiceSettings.serializeBinaryToWriter
    );
  }
  f = message.getStorefront();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.StorefrontSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShopHoursSettings hours = 1;
 * @return {?proto.bloombox.schema.partner.settings.ShopHoursSettings}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.getHours = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopHoursSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopHoursSettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopHoursSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.setHours = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.ShopSettings.prototype.clearHours = function() {
  this.setHours(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.hasHours = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShopServiceSettings services = 2;
 * @return {?proto.bloombox.schema.partner.settings.ShopServiceSettings}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.getServices = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopServiceSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopServiceSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopServiceSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.setServices = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.ShopSettings.prototype.clearServices = function() {
  this.setServices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.hasServices = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StorefrontSettings storefront = 3;
 * @return {?proto.bloombox.schema.partner.settings.StorefrontSettings}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.getStorefront = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.StorefrontSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.StorefrontSettings, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.StorefrontSettings|undefined} value */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.setStorefront = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.ShopSettings.prototype.clearStorefront = function() {
  this.setStorefront(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.ShopSettings.prototype.hasStorefront = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PartnerLocationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PartnerLocationSettings.displayName = 'proto.bloombox.schema.partner.settings.PartnerLocationSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PartnerLocationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PartnerLocationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: (f = msg.getApi()) && proto.bloombox.schema.partner.settings.APISettings.toObject(includeInstance, f),
    brands: (f = msg.getBrands()) && proto.bloombox.schema.partner.settings.ProductBrandSettings.toObject(includeInstance, f),
    publish: (f = msg.getPublish()) && proto.bloombox.schema.partner.settings.PublishSettings.toObject(includeInstance, f),
    sections: (f = msg.getSections()) && proto.bloombox.schema.partner.settings.SectionSettings.toObject(includeInstance, f),
    shop: (f = msg.getShop()) && proto.bloombox.schema.partner.settings.ShopSettings.toObject(includeInstance, f),
    tv: (f = msg.getTv()) && proto.bloombox.schema.partner.settings.TVSettings.toObject(includeInstance, f),
    partners: (f = msg.getPartners()) && proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PartnerLocationSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PartnerLocationSettings;
  return proto.bloombox.schema.partner.settings.PartnerLocationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PartnerLocationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PartnerLocationSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.APISettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.APISettings.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.ProductBrandSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ProductBrandSettings.deserializeBinaryFromReader);
      msg.setBrands(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.PublishSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.PublishSettings.deserializeBinaryFromReader);
      msg.setPublish(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.partner.settings.SectionSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SectionSettings.deserializeBinaryFromReader);
      msg.setSections(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.partner.settings.ShopSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.ShopSettings.deserializeBinaryFromReader);
      msg.setShop(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.settings.TVSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.TVSettings.deserializeBinaryFromReader);
      msg.setTv(value);
      break;
    case 7:
      var value = new proto.bloombox.schema.partner.integrations.LocationIntegrationSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.deserializeBinaryFromReader);
      msg.setPartners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PartnerLocationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PartnerLocationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.APISettings.serializeBinaryToWriter
    );
  }
  f = message.getBrands();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.ProductBrandSettings.serializeBinaryToWriter
    );
  }
  f = message.getPublish();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.PublishSettings.serializeBinaryToWriter
    );
  }
  f = message.getSections();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.partner.settings.SectionSettings.serializeBinaryToWriter
    );
  }
  f = message.getShop();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.partner.settings.ShopSettings.serializeBinaryToWriter
    );
  }
  f = message.getTv();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.settings.TVSettings.serializeBinaryToWriter
    );
  }
  f = message.getPartners();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bloombox.schema.partner.integrations.LocationIntegrationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional APISettings api = 1;
 * @return {?proto.bloombox.schema.partner.settings.APISettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getApi = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.APISettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.APISettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.APISettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setApi = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearApi = function() {
  this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasApi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductBrandSettings brands = 2;
 * @return {?proto.bloombox.schema.partner.settings.ProductBrandSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getBrands = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ProductBrandSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ProductBrandSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.ProductBrandSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setBrands = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearBrands = function() {
  this.setBrands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasBrands = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublishSettings publish = 3;
 * @return {?proto.bloombox.schema.partner.settings.PublishSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getPublish = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.PublishSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.PublishSettings, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.PublishSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setPublish = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearPublish = function() {
  this.setPublish(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasPublish = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SectionSettings sections = 4;
 * @return {?proto.bloombox.schema.partner.settings.SectionSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getSections = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SectionSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SectionSettings, 4));
};


/** @param {?proto.bloombox.schema.partner.settings.SectionSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setSections = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearSections = function() {
  this.setSections(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasSections = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ShopSettings shop = 5;
 * @return {?proto.bloombox.schema.partner.settings.ShopSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getShop = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.ShopSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.ShopSettings, 5));
};


/** @param {?proto.bloombox.schema.partner.settings.ShopSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setShop = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearShop = function() {
  this.setShop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasShop = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TVSettings tv = 6;
 * @return {?proto.bloombox.schema.partner.settings.TVSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getTv = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.TVSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.TVSettings, 6));
};


/** @param {?proto.bloombox.schema.partner.settings.TVSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setTv = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearTv = function() {
  this.setTv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasTv = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bloombox.schema.partner.integrations.LocationIntegrationSettings partners = 7;
 * @return {?proto.bloombox.schema.partner.integrations.LocationIntegrationSettings}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.getPartners = function() {
  return /** @type{?proto.bloombox.schema.partner.integrations.LocationIntegrationSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.integrations.LocationIntegrationSettings, 7));
};


/** @param {?proto.bloombox.schema.partner.integrations.LocationIntegrationSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.setPartners = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.clearPartners = function() {
  this.setPartners(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerLocationSettings.prototype.hasPartners = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.SectionSettingsType = {
  STANDARD: 0,
  FILTERED: 1
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.FilteredSectionType = {
  CBD: 0,
  HOUSE: 1,
  ONSALE: 2
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.CustomSettingsType = {
  FILTER: 0
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.HoursSpan = {
  EVERYDAY: 0,
  WEEKDAYS: 1,
  WEEKENDS: 2,
  MONDAY: 3,
  TUESDAY: 4,
  WEDNESDAY: 5,
  THURSDAY: 6,
  FRIDAY: 7,
  SATURDAY: 8,
  SUNDAY: 9
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.ShopStatus = {
  OPEN: 0,
  CLOSED: 1,
  DELIVERY_ONLY: 2,
  PICKUP_ONLY: 3
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.ShopCommsType = {
  INTERNAL: 0,
  EXTERNAL: 1
};

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.ShopContactChannel = {
  ORDERING: 0,
  ENROLLMENT: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.partner.settings.PartnerNotificationTarget.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.partner.settings.PartnerNotificationTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PartnerNotificationTarget.displayName = 'proto.bloombox.schema.partner.settings.PartnerNotificationTarget';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.ContactCase = {
  CONTACT_NOT_SET: 0,
  PHONE: 10,
  EMAIL: 11
};

/**
 * @return {proto.bloombox.schema.partner.settings.PartnerNotificationTarget.ContactCase}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.getContactCase = function() {
  return /** @type {proto.bloombox.schema.partner.settings.PartnerNotificationTarget.ContactCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.partner.settings.PartnerNotificationTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PartnerNotificationTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    disabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    phone: (f = msg.getPhone()) && proto.opencannabis.contact.PhoneNumber.toObject(includeInstance, f),
    email: (f = msg.getEmail()) && proto.opencannabis.contact.EmailAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PartnerNotificationTarget;
  return proto.bloombox.schema.partner.settings.PartnerNotificationTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 10:
      var value = new proto.opencannabis.contact.PhoneNumber;
      reader.readMessage(value,proto.opencannabis.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    case 11:
      var value = new proto.opencannabis.contact.EmailAddress;
      reader.readMessage(value,proto.opencannabis.contact.EmailAddress.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PartnerNotificationTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencannabis.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.opencannabis.contact.EmailAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool disabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional opencannabis.contact.PhoneNumber phone = 10;
 * @return {?proto.opencannabis.contact.PhoneNumber}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.getPhone = function() {
  return /** @type{?proto.opencannabis.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.PhoneNumber, 10));
};


/** @param {?proto.opencannabis.contact.PhoneNumber|undefined} value */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.setPhone = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.partner.settings.PartnerNotificationTarget.oneofGroups_[0], value);
};


proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.clearPhone = function() {
  this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional opencannabis.contact.EmailAddress email = 11;
 * @return {?proto.opencannabis.contact.EmailAddress}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.getEmail = function() {
  return /** @type{?proto.opencannabis.contact.EmailAddress} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.contact.EmailAddress, 11));
};


/** @param {?proto.opencannabis.contact.EmailAddress|undefined} value */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.setEmail = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.partner.settings.PartnerNotificationTarget.oneofGroups_[0], value);
};


proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.clearEmail = function() {
  this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerNotificationTarget.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.displayName = 'proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    promo: jspb.Message.getFieldWithDefault(msg, 1, false),
    security: jspb.Message.getFieldWithDefault(msg, 2, false),
    volume: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings;
  return proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPromo(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecurity(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromo();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSecurity();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getVolume();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool promo = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.getPromo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.setPromo = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool security = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.getSecurity = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.setSecurity = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool volume = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.getVolume = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.prototype.setVolume = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.partner.settings.PartnerAlertSettings.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PartnerAlertSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PartnerAlertSettings.displayName = 'proto.bloombox.schema.partner.settings.PartnerAlertSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PartnerAlertSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PartnerAlertSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    events: (f = msg.getEvents()) && proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.toObject(includeInstance, f),
    recipientsList: jspb.Message.toObjectList(msg.getRecipientsList(),
    proto.bloombox.schema.partner.settings.PartnerNotificationTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PartnerAlertSettings}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PartnerAlertSettings;
  return proto.bloombox.schema.partner.settings.PartnerAlertSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PartnerAlertSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PartnerAlertSettings}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.deserializeBinaryFromReader);
      msg.setEvents(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.PartnerNotificationTarget;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.PartnerNotificationTarget.deserializeBinaryFromReader);
      msg.addRecipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PartnerAlertSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PartnerAlertSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvents();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings.serializeBinaryToWriter
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.PartnerNotificationTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartnerEventAlertingSettings events = 1;
 * @return {?proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.getEvents = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.PartnerEventAlertingSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.setEvents = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.clearEvents = function() {
  this.setEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.hasEvents = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PartnerNotificationTarget recipients = 2;
 * @return {!Array.<!proto.bloombox.schema.partner.settings.PartnerNotificationTarget>}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.getRecipientsList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.partner.settings.PartnerNotificationTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.partner.settings.PartnerNotificationTarget, 2));
};


/** @param {!Array.<!proto.bloombox.schema.partner.settings.PartnerNotificationTarget>} value */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.setRecipientsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.partner.settings.PartnerNotificationTarget}
 */
proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.addRecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bloombox.schema.partner.settings.PartnerNotificationTarget, opt_index);
};


proto.bloombox.schema.partner.settings.PartnerAlertSettings.prototype.clearRecipientsList = function() {
  this.setRecipientsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.BetaSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.BetaSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.BetaSettings.displayName = 'proto.bloombox.schema.partner.settings.BetaSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.BetaSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.BetaSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.BetaSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getFieldWithDefault(msg, 1, false),
    sandbox: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.BetaSettings}
 */
proto.bloombox.schema.partner.settings.BetaSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.BetaSettings;
  return proto.bloombox.schema.partner.settings.BetaSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.BetaSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.BetaSettings}
 */
proto.bloombox.schema.partner.settings.BetaSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSandbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.BetaSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.BetaSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.BetaSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSandbox();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.setEnable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool sandbox = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.getSandbox = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.BetaSettings.prototype.setSandbox = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.FeatureStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.FeatureStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.FeatureStatus.displayName = 'proto.bloombox.schema.partner.settings.FeatureStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.FeatureStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.FeatureStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.FeatureStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    analytics: jspb.Message.getFieldWithDefault(msg, 1, false),
    beta: jspb.Message.getFieldWithDefault(msg, 2, false),
    offline: jspb.Message.getFieldWithDefault(msg, 3, false),
    shop: jspb.Message.getFieldWithDefault(msg, 4, false),
    checkin: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.FeatureStatus}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.FeatureStatus;
  return proto.bloombox.schema.partner.settings.FeatureStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.FeatureStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.FeatureStatus}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnalytics(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeta(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffline(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShop(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.FeatureStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.FeatureStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.FeatureStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnalytics();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBeta();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOffline();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getShop();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCheckin();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool analytics = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.getAnalytics = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.setAnalytics = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool beta = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.getBeta = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.setBeta = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool offline = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.getOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.setOffline = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool shop = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.getShop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.setShop = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool checkin = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.getCheckin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.FeatureStatus.prototype.setCheckin = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.SearchSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.SearchSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.SearchSettings.displayName = 'proto.bloombox.schema.partner.settings.SearchSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.SearchSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.SearchSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SearchSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    media: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.SearchSettings}
 */
proto.bloombox.schema.partner.settings.SearchSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.SearchSettings;
  return proto.bloombox.schema.partner.settings.SearchSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.SearchSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.SearchSettings}
 */
proto.bloombox.schema.partner.settings.SearchSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.SearchSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.SearchSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.SearchSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMedia();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool media = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.getMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.partner.settings.SearchSettings.prototype.setMedia = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.partner.settings.PartnerSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.partner.settings.PartnerSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.partner.settings.PartnerSettings.displayName = 'proto.bloombox.schema.partner.settings.PartnerSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.partner.settings.PartnerSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.partner.settings.PartnerSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    alerts: (f = msg.getAlerts()) && proto.bloombox.schema.partner.settings.PartnerAlertSettings.toObject(includeInstance, f),
    beta: (f = msg.getBeta()) && proto.bloombox.schema.partner.settings.BetaSettings.toObject(includeInstance, f),
    features: (f = msg.getFeatures()) && proto.bloombox.schema.partner.settings.FeatureStatus.toObject(includeInstance, f),
    search: (f = msg.getSearch()) && proto.bloombox.schema.partner.settings.SearchSettings.toObject(includeInstance, f),
    partners: (f = msg.getPartners()) && proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.partner.settings.PartnerSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.partner.settings.PartnerSettings;
  return proto.bloombox.schema.partner.settings.PartnerSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.partner.settings.PartnerSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.partner.settings.PartnerSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.settings.PartnerAlertSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.PartnerAlertSettings.deserializeBinaryFromReader);
      msg.setAlerts(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.settings.BetaSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.BetaSettings.deserializeBinaryFromReader);
      msg.setBeta(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.settings.FeatureStatus;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.FeatureStatus.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.partner.settings.SearchSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.settings.SearchSettings.deserializeBinaryFromReader);
      msg.setSearch(value);
      break;
    case 7:
      var value = new proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings;
      reader.readMessage(value,proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.deserializeBinaryFromReader);
      msg.setPartners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.partner.settings.PartnerSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.partner.settings.PartnerSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.partner.settings.PartnerSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlerts();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.settings.PartnerAlertSettings.serializeBinaryToWriter
    );
  }
  f = message.getBeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.settings.BetaSettings.serializeBinaryToWriter
    );
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.settings.FeatureStatus.serializeBinaryToWriter
    );
  }
  f = message.getSearch();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.partner.settings.SearchSettings.serializeBinaryToWriter
    );
  }
  f = message.getPartners();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartnerAlertSettings alerts = 1;
 * @return {?proto.bloombox.schema.partner.settings.PartnerAlertSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.getAlerts = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.PartnerAlertSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.PartnerAlertSettings, 1));
};


/** @param {?proto.bloombox.schema.partner.settings.PartnerAlertSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.setAlerts = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.partner.settings.PartnerSettings.prototype.clearAlerts = function() {
  this.setAlerts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.hasAlerts = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BetaSettings beta = 2;
 * @return {?proto.bloombox.schema.partner.settings.BetaSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.getBeta = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.BetaSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.BetaSettings, 2));
};


/** @param {?proto.bloombox.schema.partner.settings.BetaSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.setBeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.partner.settings.PartnerSettings.prototype.clearBeta = function() {
  this.setBeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FeatureStatus features = 3;
 * @return {?proto.bloombox.schema.partner.settings.FeatureStatus}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.getFeatures = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.FeatureStatus} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.FeatureStatus, 3));
};


/** @param {?proto.bloombox.schema.partner.settings.FeatureStatus|undefined} value */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.setFeatures = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.partner.settings.PartnerSettings.prototype.clearFeatures = function() {
  this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SearchSettings search = 4;
 * @return {?proto.bloombox.schema.partner.settings.SearchSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.getSearch = function() {
  return /** @type{?proto.bloombox.schema.partner.settings.SearchSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.settings.SearchSettings, 4));
};


/** @param {?proto.bloombox.schema.partner.settings.SearchSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.setSearch = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.partner.settings.PartnerSettings.prototype.clearSearch = function() {
  this.setSearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bloombox.schema.partner.integrations.PartnerIntegrationSettings partners = 7;
 * @return {?proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.getPartners = function() {
  return /** @type{?proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings, 7));
};


/** @param {?proto.bloombox.schema.partner.integrations.PartnerIntegrationSettings|undefined} value */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.setPartners = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.partner.settings.PartnerSettings.prototype.clearPartners = function() {
  this.setPartners(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.partner.settings.PartnerSettings.prototype.hasPartners = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.partner.PartnerScope = {
  AUTH: 0,
  CONTACT: 1,
  DASHBOARD: 2,
  MENU_DATA_READ: 10,
  MENU_DATA_WRITE: 20,
  SETTINGS_READ: 50,
  SETTINGS_WRITE: 51,
  ADMIN: 100
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.ServiceStatus = {
  UNKNOWN: 0,
  UP: 1,
  DOWN: 2,
  MAINTENANCE: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.Scope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.Scope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.Scope.displayName = 'proto.bloombox.schema.analytics.Scope';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.Scope.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.Scope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.Scope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.Scope.toObject = function(includeInstance, msg) {
  var f, obj = {
    partner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commercial: jspb.Message.getFieldWithDefault(msg, 2, ""),
    order: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.Scope}
 */
proto.bloombox.schema.analytics.Scope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.Scope;
  return proto.bloombox.schema.analytics.Scope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.Scope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.Scope}
 */
proto.bloombox.schema.analytics.Scope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommercial(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.Scope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.Scope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.Scope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.Scope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommercial();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrder();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string partner = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.Scope.prototype.getPartner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Scope.prototype.setPartner = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commercial = 2;
 * @return {string}
 */
proto.bloombox.schema.analytics.Scope.prototype.getCommercial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Scope.prototype.setCommercial = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string order = 3;
 * @return {string}
 */
proto.bloombox.schema.analytics.Scope.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Scope.prototype.setOrder = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.VersionSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.structs.VersionSpec.oneofGroups_);
};
goog.inherits(proto.opencannabis.structs.VersionSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.VersionSpec.displayName = 'proto.opencannabis.structs.VersionSpec';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.structs.VersionSpec.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.opencannabis.structs.VersionSpec.SpecCase = {
  SPEC_NOT_SET: 0,
  NAME: 1
};

/**
 * @return {proto.opencannabis.structs.VersionSpec.SpecCase}
 */
proto.opencannabis.structs.VersionSpec.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.structs.VersionSpec.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.structs.VersionSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.VersionSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.VersionSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.VersionSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.VersionSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.VersionSpec}
 */
proto.opencannabis.structs.VersionSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.VersionSpec;
  return proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.VersionSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.VersionSpec}
 */
proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.VersionSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.VersionSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.opencannabis.structs.VersionSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.structs.VersionSpec.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.structs.VersionSpec.oneofGroups_[0], value);
};


proto.opencannabis.structs.VersionSpec.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.structs.VersionSpec.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.VersionSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.DeviceOS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.DeviceOS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.DeviceOS.displayName = 'proto.bloombox.schema.analytics.context.DeviceOS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.DeviceOS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.DeviceOS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceOS.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: (f = msg.getVersion()) && proto.opencannabis.structs.VersionSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.DeviceOS}
 */
proto.bloombox.schema.analytics.context.DeviceOS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.DeviceOS;
  return proto.bloombox.schema.analytics.context.DeviceOS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.DeviceOS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.DeviceOS}
 */
proto.bloombox.schema.analytics.context.DeviceOS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.analytics.context.OSType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.VersionSpec;
      reader.readMessage(value,proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.DeviceOS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.DeviceOS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceOS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional OSType type = 1;
 * @return {!proto.bloombox.schema.analytics.context.OSType}
 */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.OSType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.OSType} value */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.structs.VersionSpec version = 2;
 * @return {?proto.opencannabis.structs.VersionSpec}
 */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.getVersion = function() {
  return /** @type{?proto.opencannabis.structs.VersionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.VersionSpec, 2));
};


/** @param {?proto.opencannabis.structs.VersionSpec|undefined} value */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.context.DeviceOS.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceOS.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.OSType = {
  OS_UNKNOWN: 0,
  IOS: 100,
  MACOS: 101,
  TVOS: 102,
  WATCHOS: 103,
  ANDROID: 200,
  ANDROID_WEAR: 201,
  WINDOWS: 4,
  WINDOWS_PHONE: 5,
  LINUX: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.DeviceLibrary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.DeviceLibrary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.DeviceLibrary.displayName = 'proto.bloombox.schema.analytics.context.DeviceLibrary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.DeviceLibrary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.DeviceLibrary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.toObject = function(includeInstance, msg) {
  var f, obj = {
    variant: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: (f = msg.getVersion()) && proto.opencannabis.structs.VersionSpec.toObject(includeInstance, f),
    client: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.DeviceLibrary}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.DeviceLibrary;
  return proto.bloombox.schema.analytics.context.DeviceLibrary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.DeviceLibrary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.DeviceLibrary}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariant(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.VersionSpec;
      reader.readMessage(value,proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.analytics.context.APIClient} */ (reader.readEnum());
      msg.setClient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.DeviceLibrary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.DeviceLibrary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariant();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter
    );
  }
  f = message.getClient();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string variant = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.getVariant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.setVariant = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional opencannabis.structs.VersionSpec version = 2;
 * @return {?proto.opencannabis.structs.VersionSpec}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.getVersion = function() {
  return /** @type{?proto.opencannabis.structs.VersionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.VersionSpec, 2));
};


/** @param {?proto.opencannabis.structs.VersionSpec|undefined} value */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional APIClient client = 3;
 * @return {!proto.bloombox.schema.analytics.context.APIClient}
 */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.getClient = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.APIClient} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.APIClient} value */
proto.bloombox.schema.analytics.context.DeviceLibrary.prototype.setClient = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.APIClient = {
  UNIDENTIFIED: 0,
  JAVA_SCRIPT: 1,
  SWIFT: 2,
  JAVA: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.WebApplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.WebApplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.WebApplication.displayName = 'proto.bloombox.schema.analytics.context.WebApplication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.WebApplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.WebApplication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.WebApplication.toObject = function(includeInstance, msg) {
  var f, obj = {
    origin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: jspb.Message.getFieldWithDefault(msg, 2, ""),
    anchor: jspb.Message.getFieldWithDefault(msg, 3, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    referrer: jspb.Message.getFieldWithDefault(msg, 5, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.WebApplication}
 */
proto.bloombox.schema.analytics.context.WebApplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.WebApplication;
  return proto.bloombox.schema.analytics.context.WebApplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.WebApplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.WebApplication}
 */
proto.bloombox.schema.analytics.context.WebApplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferrer(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.WebApplication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.WebApplication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.WebApplication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnchor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReferrer();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string origin = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setOrigin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string location = 2;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string anchor = 3;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getAnchor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setAnchor = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string referrer = 5;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getReferrer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setReferrer = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string protocol = 6;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.WebApplication.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.WebApplication.prototype.setProtocol = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.DeviceApplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.analytics.context.DeviceApplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.DeviceApplication.displayName = 'proto.bloombox.schema.analytics.context.DeviceApplication';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_ = [[10,20,30]];

/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.SpecCase = {
  SPEC_NOT_SET: 0,
  WEB: 10,
  BUNDLE_ID: 20,
  ANDROID_PACKAGE_ID: 30
};

/**
 * @return {proto.bloombox.schema.analytics.context.DeviceApplication.SpecCase}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getSpecCase = function() {
  return /** @type {proto.bloombox.schema.analytics.context.DeviceApplication.SpecCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.DeviceApplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.DeviceApplication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceApplication.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: (f = msg.getVersion()) && proto.opencannabis.structs.VersionSpec.toObject(includeInstance, f),
    web: (f = msg.getWeb()) && proto.bloombox.schema.analytics.context.WebApplication.toObject(includeInstance, f),
    bundleId: jspb.Message.getFieldWithDefault(msg, 20, ""),
    androidPackageId: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.DeviceApplication}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.DeviceApplication;
  return proto.bloombox.schema.analytics.context.DeviceApplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.DeviceApplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.DeviceApplication}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.analytics.context.ApplicationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.VersionSpec;
      reader.readMessage(value,proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.context.WebApplication;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.WebApplication.deserializeBinaryFromReader);
      msg.setWeb(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setBundleId(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setAndroidPackageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.DeviceApplication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.DeviceApplication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceApplication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter
    );
  }
  f = message.getWeb();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.context.WebApplication.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional ApplicationType type = 1;
 * @return {!proto.bloombox.schema.analytics.context.ApplicationType}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.ApplicationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.ApplicationType} value */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.structs.VersionSpec version = 2;
 * @return {?proto.opencannabis.structs.VersionSpec}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getVersion = function() {
  return /** @type{?proto.opencannabis.structs.VersionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.VersionSpec, 2));
};


/** @param {?proto.opencannabis.structs.VersionSpec|undefined} value */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.context.DeviceApplication.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebApplication web = 10;
 * @return {?proto.bloombox.schema.analytics.context.WebApplication}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getWeb = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.WebApplication} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.WebApplication, 10));
};


/** @param {?proto.bloombox.schema.analytics.context.WebApplication|undefined} value */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.setWeb = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0], value);
};


proto.bloombox.schema.analytics.context.DeviceApplication.prototype.clearWeb = function() {
  this.setWeb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.hasWeb = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string bundle_id = 20;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getBundleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.setBundleId = function(value) {
  jspb.Message.setOneofField(this, 20, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0], value);
};


proto.bloombox.schema.analytics.context.DeviceApplication.prototype.clearBundleId = function() {
  jspb.Message.setOneofField(this, 20, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.hasBundleId = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string android_package_id = 30;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.getAndroidPackageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.setAndroidPackageId = function(value) {
  jspb.Message.setOneofField(this, 30, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0], value);
};


proto.bloombox.schema.analytics.context.DeviceApplication.prototype.clearAndroidPackageId = function() {
  jspb.Message.setOneofField(this, 30, proto.bloombox.schema.analytics.context.DeviceApplication.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceApplication.prototype.hasAndroidPackageId = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.ApplicationType = {
  INTERNAL: 0,
  PARTNER: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.proximity.BluetoothBeacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.proximity.BluetoothBeacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.proximity.BluetoothBeacon.displayName = 'proto.opencannabis.proximity.BluetoothBeacon';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.proximity.BluetoothBeacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.proximity.BluetoothBeacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.proximity.BluetoothBeacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    major: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    seen: (f = msg.getSeen()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.opencannabis.geo.Location.toObject(includeInstance, f),
    accuracy: (f = msg.getAccuracy()) && proto.opencannabis.geo.LocationAccuracy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.proximity.BluetoothBeacon}
 */
proto.opencannabis.proximity.BluetoothBeacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.proximity.BluetoothBeacon;
  return proto.opencannabis.proximity.BluetoothBeacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.proximity.BluetoothBeacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.proximity.BluetoothBeacon}
 */
proto.opencannabis.proximity.BluetoothBeacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setSeen(value);
      break;
    case 5:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 6:
      var value = new proto.opencannabis.geo.LocationAccuracy;
      reader.readMessage(value,proto.opencannabis.geo.LocationAccuracy.deserializeBinaryFromReader);
      msg.setAccuracy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.proximity.BluetoothBeacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.proximity.BluetoothBeacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.proximity.BluetoothBeacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSeen();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
  f = message.getAccuracy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.geo.LocationAccuracy.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 major = 2;
 * @return {number}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setMajor = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 minor = 3;
 * @return {number}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setMinor = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional opencannabis.temporal.Instant seen = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getSeen = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setSeen = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.proximity.BluetoothBeacon.prototype.clearSeen = function() {
  this.setSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.hasSeen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional opencannabis.geo.Location location = 5;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getLocation = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 5));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.proximity.BluetoothBeacon.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional opencannabis.geo.LocationAccuracy accuracy = 6;
 * @return {?proto.opencannabis.geo.LocationAccuracy}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.getAccuracy = function() {
  return /** @type{?proto.opencannabis.geo.LocationAccuracy} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.LocationAccuracy, 6));
};


/** @param {?proto.opencannabis.geo.LocationAccuracy|undefined} value */
proto.opencannabis.proximity.BluetoothBeacon.prototype.setAccuracy = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.proximity.BluetoothBeacon.prototype.clearAccuracy = function() {
  this.setAccuracy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.proximity.BluetoothBeacon.prototype.hasAccuracy = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.PixelSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.PixelSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.PixelSize.displayName = 'proto.bloombox.schema.analytics.context.PixelSize';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.PixelSize.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.PixelSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.PixelSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.PixelSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.PixelSize}
 */
proto.bloombox.schema.analytics.context.PixelSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.PixelSize;
  return proto.bloombox.schema.analytics.context.PixelSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.PixelSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.PixelSize}
 */
proto.bloombox.schema.analytics.context.PixelSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.PixelSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.PixelSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.PixelSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.PixelSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.PixelSize.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.PixelSize.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.PixelSize.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.PixelSize.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.DeviceScreen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.DeviceScreen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.DeviceScreen.displayName = 'proto.bloombox.schema.analytics.context.DeviceScreen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.DeviceScreen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.DeviceScreen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceScreen.toObject = function(includeInstance, msg) {
  var f, obj = {
    screen: (f = msg.getScreen()) && proto.bloombox.schema.analytics.context.PixelSize.toObject(includeInstance, f),
    viewport: (f = msg.getViewport()) && proto.bloombox.schema.analytics.context.PixelSize.toObject(includeInstance, f),
    density: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orientation: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.DeviceScreen}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.DeviceScreen;
  return proto.bloombox.schema.analytics.context.DeviceScreen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.DeviceScreen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.DeviceScreen}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.context.PixelSize;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.PixelSize.deserializeBinaryFromReader);
      msg.setScreen(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.analytics.context.PixelSize;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.PixelSize.deserializeBinaryFromReader);
      msg.setViewport(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDensity(value);
      break;
    case 4:
      var value = /** @type {!proto.bloombox.schema.analytics.context.ScreenOrientation} */ (reader.readEnum());
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.DeviceScreen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.DeviceScreen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.DeviceScreen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.context.PixelSize.serializeBinaryToWriter
    );
  }
  f = message.getViewport();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.analytics.context.PixelSize.serializeBinaryToWriter
    );
  }
  f = message.getDensity();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOrientation();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional PixelSize screen = 1;
 * @return {?proto.bloombox.schema.analytics.context.PixelSize}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.getScreen = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.PixelSize} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.PixelSize, 1));
};


/** @param {?proto.bloombox.schema.analytics.context.PixelSize|undefined} value */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.setScreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.context.DeviceScreen.prototype.clearScreen = function() {
  this.setScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.hasScreen = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PixelSize viewport = 2;
 * @return {?proto.bloombox.schema.analytics.context.PixelSize}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.getViewport = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.PixelSize} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.PixelSize, 2));
};


/** @param {?proto.bloombox.schema.analytics.context.PixelSize|undefined} value */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.setViewport = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.context.DeviceScreen.prototype.clearViewport = function() {
  this.setViewport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.hasViewport = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 density = 3;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.getDensity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.setDensity = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ScreenOrientation orientation = 4;
 * @return {!proto.bloombox.schema.analytics.context.ScreenOrientation}
 */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.getOrientation = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.ScreenOrientation} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.ScreenOrientation} value */
proto.bloombox.schema.analytics.context.DeviceScreen.prototype.setOrientation = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.analytics.context.NativeDeviceContext.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.NativeDeviceContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.NativeDeviceContext.displayName = 'proto.bloombox.schema.analytics.context.NativeDeviceContext';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.NativeDeviceContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.NativeDeviceContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    os: (f = msg.getOs()) && proto.bloombox.schema.analytics.context.DeviceOS.toObject(includeInstance, f),
    beacon: (f = msg.getBeacon()) && proto.opencannabis.proximity.BluetoothBeacon.toObject(includeInstance, f),
    witnessedList: jspb.Message.toObjectList(msg.getWitnessedList(),
    proto.opencannabis.proximity.BluetoothBeacon.toObject, includeInstance),
    screen: (f = msg.getScreen()) && proto.bloombox.schema.analytics.context.DeviceScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.NativeDeviceContext}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.NativeDeviceContext;
  return proto.bloombox.schema.analytics.context.NativeDeviceContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.NativeDeviceContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.NativeDeviceContext}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.device.DeviceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.context.DeviceRole} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.analytics.context.DeviceOS;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.DeviceOS.deserializeBinaryFromReader);
      msg.setOs(value);
      break;
    case 6:
      var value = new proto.opencannabis.proximity.BluetoothBeacon;
      reader.readMessage(value,proto.opencannabis.proximity.BluetoothBeacon.deserializeBinaryFromReader);
      msg.setBeacon(value);
      break;
    case 7:
      var value = new proto.opencannabis.proximity.BluetoothBeacon;
      reader.readMessage(value,proto.opencannabis.proximity.BluetoothBeacon.deserializeBinaryFromReader);
      msg.addWitnessed(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.analytics.context.DeviceScreen;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.DeviceScreen.deserializeBinaryFromReader);
      msg.setScreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.NativeDeviceContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.NativeDeviceContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.analytics.context.DeviceOS.serializeBinaryToWriter
    );
  }
  f = message.getBeacon();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.proximity.BluetoothBeacon.serializeBinaryToWriter
    );
  }
  f = message.getWitnessedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.opencannabis.proximity.BluetoothBeacon.serializeBinaryToWriter
    );
  }
  f = message.getScreen();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.analytics.context.DeviceScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.device.DeviceType type = 1;
 * @return {!proto.opencannabis.device.DeviceType}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getType = function() {
  return /** @type {!proto.opencannabis.device.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.device.DeviceType} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DeviceRole role = 2;
 * @return {!proto.bloombox.schema.analytics.context.DeviceRole}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getRole = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.DeviceRole} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.DeviceRole} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DeviceOS os = 3;
 * @return {?proto.bloombox.schema.analytics.context.DeviceOS}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getOs = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.DeviceOS} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.DeviceOS, 3));
};


/** @param {?proto.bloombox.schema.analytics.context.DeviceOS|undefined} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setOs = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.clearOs = function() {
  this.setOs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.hasOs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.proximity.BluetoothBeacon beacon = 6;
 * @return {?proto.opencannabis.proximity.BluetoothBeacon}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getBeacon = function() {
  return /** @type{?proto.opencannabis.proximity.BluetoothBeacon} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.proximity.BluetoothBeacon, 6));
};


/** @param {?proto.opencannabis.proximity.BluetoothBeacon|undefined} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setBeacon = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.clearBeacon = function() {
  this.setBeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.hasBeacon = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated opencannabis.proximity.BluetoothBeacon witnessed = 7;
 * @return {!Array.<!proto.opencannabis.proximity.BluetoothBeacon>}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getWitnessedList = function() {
  return /** @type{!Array.<!proto.opencannabis.proximity.BluetoothBeacon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.proximity.BluetoothBeacon, 7));
};


/** @param {!Array.<!proto.opencannabis.proximity.BluetoothBeacon>} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setWitnessedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.opencannabis.proximity.BluetoothBeacon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.proximity.BluetoothBeacon}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.addWitnessed = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.opencannabis.proximity.BluetoothBeacon, opt_index);
};


proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.clearWitnessedList = function() {
  this.setWitnessedList([]);
};


/**
 * optional DeviceScreen screen = 4;
 * @return {?proto.bloombox.schema.analytics.context.DeviceScreen}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.getScreen = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.DeviceScreen} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.DeviceScreen, 4));
};


/** @param {?proto.bloombox.schema.analytics.context.DeviceScreen|undefined} value */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.setScreen = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.clearScreen = function() {
  this.setScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.NativeDeviceContext.prototype.hasScreen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.DeviceRole = {
  CLIENT: 0,
  SERVER: 1
};

/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.ScreenOrientation = {
  UNSPECIFIED_ORIENTATION: 0,
  PORTRAIT: 1,
  LANDSCAPE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.BrowserDeviceContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.BrowserDeviceContext.displayName = 'proto.bloombox.schema.analytics.context.BrowserDeviceContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.BrowserDeviceContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.BrowserDeviceContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    browserType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: (f = msg.getVersion()) && proto.opencannabis.structs.VersionSpec.toObject(includeInstance, f),
    language: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userAgent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    touchpoints: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hardwareConcurrency: jspb.Message.getFieldWithDefault(msg, 6, 0),
    colorDepth: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.BrowserDeviceContext}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.BrowserDeviceContext;
  return proto.bloombox.schema.analytics.context.BrowserDeviceContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.BrowserDeviceContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.BrowserDeviceContext}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.analytics.context.BrowserType} */ (reader.readEnum());
      msg.setBrowserType(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.VersionSpec;
      reader.readMessage(value,proto.opencannabis.structs.VersionSpec.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTouchpoints(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHardwareConcurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.BrowserDeviceContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.BrowserDeviceContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrowserType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.structs.VersionSpec.serializeBinaryToWriter
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTouchpoints();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getHardwareConcurrency();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getColorDepth();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional BrowserType browser_type = 1;
 * @return {!proto.bloombox.schema.analytics.context.BrowserType}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getBrowserType = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.BrowserType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.BrowserType} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setBrowserType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.structs.VersionSpec version = 2;
 * @return {?proto.opencannabis.structs.VersionSpec}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getVersion = function() {
  return /** @type{?proto.opencannabis.structs.VersionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.VersionSpec, 2));
};


/** @param {?proto.opencannabis.structs.VersionSpec|undefined} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string language = 3;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_agent = 4;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setUserAgent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 touchpoints = 5;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getTouchpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setTouchpoints = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 hardware_concurrency = 6;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getHardwareConcurrency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setHardwareConcurrency = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 color_depth = 7;
 * @return {number}
 */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.getColorDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.context.BrowserDeviceContext.prototype.setColorDepth = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.BrowserType = {
  BROWSER_UNKNOWN: 0,
  CHROME: 1,
  SAFARI: 2,
  FIREFOX: 3,
  OPERA: 4,
  IE_OR_EDGE: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.context.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.context.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.context.Collection.displayName = 'proto.bloombox.schema.analytics.context.Collection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.context.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.context.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.context.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    internal: jspb.Message.getFieldWithDefault(msg, 2, false),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.context.Collection}
 */
proto.bloombox.schema.analytics.context.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.context.Collection;
  return proto.bloombox.schema.analytics.context.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.context.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.context.Collection}
 */
proto.bloombox.schema.analytics.context.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternal(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.analytics.context.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.context.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.context.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.context.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.context.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInternal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.context.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.context.Collection.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool internal = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.context.Collection.prototype.getInternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.context.Collection.prototype.setInternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional EventType type = 3;
 * @return {!proto.bloombox.schema.analytics.context.EventType}
 */
proto.bloombox.schema.analytics.context.Collection.prototype.getType = function() {
  return /** @type {!proto.bloombox.schema.analytics.context.EventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.analytics.context.EventType} value */
proto.bloombox.schema.analytics.context.Collection.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.context.EventType = {
  GENERIC: 0,
  COMMERCIAL: 1,
  IDENTITY: 2,
  EXPERIENCE: 3,
  OPERATIONAL: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.EventPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.EventPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.EventPosition.displayName = 'proto.bloombox.schema.analytics.EventPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.EventPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.EventPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.EventPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    ingest: (f = msg.getIngest()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    processed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    enriched: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.EventPosition}
 */
proto.bloombox.schema.analytics.EventPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.EventPosition;
  return proto.bloombox.schema.analytics.EventPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.EventPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.EventPosition}
 */
proto.bloombox.schema.analytics.EventPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setIngest(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProcessed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnriched(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.EventPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.EventPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.EventPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIngest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getProcessed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getEnriched();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional opencannabis.temporal.Instant ingest = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.getIngest = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.EventPosition.prototype.setIngest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.EventPosition.prototype.clearIngest = function() {
  this.setIngest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.hasIngest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.EventPosition.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.EventPosition.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 processed = 4;
 * @return {number}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.getProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.EventPosition.prototype.setProcessed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 enriched = 5;
 * @return {number}
 */
proto.bloombox.schema.analytics.EventPosition.prototype.getEnriched = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.EventPosition.prototype.setEnriched = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.EventActors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.EventActors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.EventActors.displayName = 'proto.bloombox.schema.analytics.EventActors';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.EventActors.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.EventActors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.EventActors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.EventActors.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.bloombox.schema.identity.User.toObject(includeInstance, f),
    partner: (f = msg.getPartner()) && proto.bloombox.schema.partner.Partner.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.EventActors}
 */
proto.bloombox.schema.analytics.EventActors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.EventActors;
  return proto.bloombox.schema.analytics.EventActors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.EventActors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.EventActors}
 */
proto.bloombox.schema.analytics.EventActors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.identity.User;
      reader.readMessage(value,proto.bloombox.schema.identity.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.Partner;
      reader.readMessage(value,proto.bloombox.schema.partner.Partner.deserializeBinaryFromReader);
      msg.setPartner(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.partner.PartnerLocation;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.EventActors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.EventActors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.EventActors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.EventActors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.identity.User.serializeBinaryToWriter
    );
  }
  f = message.getPartner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.Partner.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.partner.PartnerLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.identity.User user = 1;
 * @return {?proto.bloombox.schema.identity.User}
 */
proto.bloombox.schema.analytics.EventActors.prototype.getUser = function() {
  return /** @type{?proto.bloombox.schema.identity.User} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.User, 1));
};


/** @param {?proto.bloombox.schema.identity.User|undefined} value */
proto.bloombox.schema.analytics.EventActors.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.EventActors.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.EventActors.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.partner.Partner partner = 2;
 * @return {?proto.bloombox.schema.partner.Partner}
 */
proto.bloombox.schema.analytics.EventActors.prototype.getPartner = function() {
  return /** @type{?proto.bloombox.schema.partner.Partner} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.Partner, 2));
};


/** @param {?proto.bloombox.schema.partner.Partner|undefined} value */
proto.bloombox.schema.analytics.EventActors.prototype.setPartner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.EventActors.prototype.clearPartner = function() {
  this.setPartner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.EventActors.prototype.hasPartner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bloombox.schema.partner.PartnerLocation location = 3;
 * @return {?proto.bloombox.schema.partner.PartnerLocation}
 */
proto.bloombox.schema.analytics.EventActors.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocation} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocation, 3));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocation|undefined} value */
proto.bloombox.schema.analytics.EventActors.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.EventActors.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.EventActors.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.Context = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.Context, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.Context.displayName = 'proto.bloombox.schema.analytics.Context';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.Context.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.Context.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.Context} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.Context.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.bloombox.schema.analytics.context.Collection.toObject(includeInstance, f),
    userKey: (f = msg.getUserKey()) && proto.bloombox.schema.identity.UserKey.toObject(includeInstance, f),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    group: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ipAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    scope: (f = msg.getScope()) && proto.bloombox.schema.analytics.Scope.toObject(includeInstance, f),
    app: (f = msg.getApp()) && proto.bloombox.schema.analytics.context.DeviceApplication.toObject(includeInstance, f),
    library: (f = msg.getLibrary()) && proto.bloombox.schema.analytics.context.DeviceLibrary.toObject(includeInstance, f),
    pb_native: (f = msg.getNative()) && proto.bloombox.schema.analytics.context.NativeDeviceContext.toObject(includeInstance, f),
    browser: (f = msg.getBrowser()) && proto.bloombox.schema.analytics.context.BrowserDeviceContext.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.opencannabis.geo.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.analytics.Context.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.Context;
  return proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.Context} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.context.Collection;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.identity.UserKey;
      reader.readMessage(value,proto.bloombox.schema.identity.UserKey.deserializeBinaryFromReader);
      msg.setUserKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 7:
      var value = new proto.bloombox.schema.analytics.Scope;
      reader.readMessage(value,proto.bloombox.schema.analytics.Scope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 8:
      var value = new proto.bloombox.schema.analytics.context.DeviceApplication;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.DeviceApplication.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 9:
      var value = new proto.bloombox.schema.analytics.context.DeviceLibrary;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.DeviceLibrary.deserializeBinaryFromReader);
      msg.setLibrary(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.context.NativeDeviceContext;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.NativeDeviceContext.deserializeBinaryFromReader);
      msg.setNative(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.analytics.context.BrowserDeviceContext;
      reader.readMessage(value,proto.bloombox.schema.analytics.context.BrowserDeviceContext.deserializeBinaryFromReader);
      msg.setBrowser(value);
      break;
    case 12:
      var value = new proto.opencannabis.geo.Location;
      reader.readMessage(value,proto.opencannabis.geo.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.Context.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.Context.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.Context} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.Context.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.context.Collection.serializeBinaryToWriter
    );
  }
  f = message.getUserKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.identity.UserKey.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bloombox.schema.analytics.Scope.serializeBinaryToWriter
    );
  }
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bloombox.schema.analytics.context.DeviceApplication.serializeBinaryToWriter
    );
  }
  f = message.getLibrary();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.bloombox.schema.analytics.context.DeviceLibrary.serializeBinaryToWriter
    );
  }
  f = message.getNative();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.context.NativeDeviceContext.serializeBinaryToWriter
    );
  }
  f = message.getBrowser();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.analytics.context.BrowserDeviceContext.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.opencannabis.geo.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional context.Collection collection = 1;
 * @return {?proto.bloombox.schema.analytics.context.Collection}
 */
proto.bloombox.schema.analytics.Context.prototype.getCollection = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.Collection} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.Collection, 1));
};


/** @param {?proto.bloombox.schema.analytics.context.Collection|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setCollection = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearCollection = function() {
  this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.identity.UserKey user_key = 2;
 * @return {?proto.bloombox.schema.identity.UserKey}
 */
proto.bloombox.schema.analytics.Context.prototype.getUserKey = function() {
  return /** @type{?proto.bloombox.schema.identity.UserKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.UserKey, 2));
};


/** @param {?proto.bloombox.schema.identity.UserKey|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setUserKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearUserKey = function() {
  this.setUserKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasUserKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string fingerprint = 3;
 * @return {string}
 */
proto.bloombox.schema.analytics.Context.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Context.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string group = 4;
 * @return {string}
 */
proto.bloombox.schema.analytics.Context.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Context.prototype.setGroup = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hostname = 5;
 * @return {string}
 */
proto.bloombox.schema.analytics.Context.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Context.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ip_address = 6;
 * @return {string}
 */
proto.bloombox.schema.analytics.Context.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.Context.prototype.setIpAddress = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Scope scope = 7;
 * @return {?proto.bloombox.schema.analytics.Scope}
 */
proto.bloombox.schema.analytics.Context.prototype.getScope = function() {
  return /** @type{?proto.bloombox.schema.analytics.Scope} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Scope, 7));
};


/** @param {?proto.bloombox.schema.analytics.Scope|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasScope = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional context.DeviceApplication app = 8;
 * @return {?proto.bloombox.schema.analytics.context.DeviceApplication}
 */
proto.bloombox.schema.analytics.Context.prototype.getApp = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.DeviceApplication} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.DeviceApplication, 8));
};


/** @param {?proto.bloombox.schema.analytics.context.DeviceApplication|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setApp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasApp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional context.DeviceLibrary library = 9;
 * @return {?proto.bloombox.schema.analytics.context.DeviceLibrary}
 */
proto.bloombox.schema.analytics.Context.prototype.getLibrary = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.DeviceLibrary} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.DeviceLibrary, 9));
};


/** @param {?proto.bloombox.schema.analytics.context.DeviceLibrary|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setLibrary = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearLibrary = function() {
  this.setLibrary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasLibrary = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional context.NativeDeviceContext native = 10;
 * @return {?proto.bloombox.schema.analytics.context.NativeDeviceContext}
 */
proto.bloombox.schema.analytics.Context.prototype.getNative = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.NativeDeviceContext} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.NativeDeviceContext, 10));
};


/** @param {?proto.bloombox.schema.analytics.context.NativeDeviceContext|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setNative = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearNative = function() {
  this.setNative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasNative = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional context.BrowserDeviceContext browser = 11;
 * @return {?proto.bloombox.schema.analytics.context.BrowserDeviceContext}
 */
proto.bloombox.schema.analytics.Context.prototype.getBrowser = function() {
  return /** @type{?proto.bloombox.schema.analytics.context.BrowserDeviceContext} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.context.BrowserDeviceContext, 11));
};


/** @param {?proto.bloombox.schema.analytics.context.BrowserDeviceContext|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setBrowser = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearBrowser = function() {
  this.setBrowser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasBrowser = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional opencannabis.geo.Location location = 12;
 * @return {?proto.opencannabis.geo.Location}
 */
proto.bloombox.schema.analytics.Context.prototype.getLocation = function() {
  return /** @type{?proto.opencannabis.geo.Location} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Location, 12));
};


/** @param {?proto.opencannabis.geo.Location|undefined} value */
proto.bloombox.schema.analytics.Context.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.bloombox.schema.analytics.Context.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.Context.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.product.Impression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.product.Impression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.product.Impression.displayName = 'proto.bloombox.schema.analytics.product.Impression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.product.Impression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.product.Impression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.Impression.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    filtered: jspb.Message.getFieldWithDefault(msg, 2, false),
    sorted: jspb.Message.getFieldWithDefault(msg, 3, false),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.product.Impression}
 */
proto.bloombox.schema.analytics.product.Impression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.product.Impression;
  return proto.bloombox.schema.analytics.product.Impression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.product.Impression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.product.Impression}
 */
proto.bloombox.schema.analytics.product.Impression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFiltered(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSorted(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.product.Impression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.product.Impression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.Impression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getFiltered();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSorted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.bloombox.schema.analytics.product.Impression.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.product.Impression.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool filtered = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.getFiltered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.product.Impression.prototype.setFiltered = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool sorted = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.getSorted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.product.Impression.prototype.setSorted = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.product.Impression.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.analytics.product.Impression.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.Impression.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.product.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.product.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.product.View.displayName = 'proto.bloombox.schema.analytics.product.View';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.product.View.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.product.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.product.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    interactive: jspb.Message.getFieldWithDefault(msg, 2, false),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.product.View}
 */
proto.bloombox.schema.analytics.product.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.product.View;
  return proto.bloombox.schema.analytics.product.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.product.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.product.View}
 */
proto.bloombox.schema.analytics.product.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInteractive(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.product.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.product.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.product.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getInteractive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.bloombox.schema.analytics.product.View.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.bloombox.schema.analytics.product.View.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.product.View.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.View.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool interactive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.product.View.prototype.getInteractive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.product.View.prototype.setInteractive = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.product.View.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.product.View.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.product.View.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.View.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.product.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.product.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.product.Action.displayName = 'proto.bloombox.schema.analytics.product.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.product.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.product.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.product.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.opencannabis.base.ProductKey.toObject(includeInstance, f),
    verb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.product.Action}
 */
proto.bloombox.schema.analytics.product.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.product.Action;
  return proto.bloombox.schema.analytics.product.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.product.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.product.Action}
 */
proto.bloombox.schema.analytics.product.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.product.ProductAction} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.product.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.product.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.product.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.product.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.base.ProductKey key = 1;
 * @return {?proto.opencannabis.base.ProductKey}
 */
proto.bloombox.schema.analytics.product.Action.prototype.getKey = function() {
  return /** @type{?proto.opencannabis.base.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {?proto.opencannabis.base.ProductKey|undefined} value */
proto.bloombox.schema.analytics.product.Action.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.product.Action.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.Action.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductAction verb = 2;
 * @return {!proto.bloombox.schema.analytics.product.ProductAction}
 */
proto.bloombox.schema.analytics.product.Action.prototype.getVerb = function() {
  return /** @type {!proto.bloombox.schema.analytics.product.ProductAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.product.ProductAction} value */
proto.bloombox.schema.analytics.product.Action.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.product.Action.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.product.Action.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.product.Action.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.product.Action.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.product.ProductAction = {
  VIEW: 0,
  SHARE: 1,
  FAVORITE: 2,
  COMPARE: 3,
  CART: 4,
  PURCHASE: 5,
  SUBSCRIBE: 6,
  ZOOM: 7,
  REPORTS: 8,
  SIMILAR: 9
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.DeliveryDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.DeliveryDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.DeliveryDestination.displayName = 'proto.opencannabis.commerce.DeliveryDestination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.DeliveryDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.DeliveryDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.DeliveryDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.DeliveryDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = msg.getAddress()) && proto.opencannabis.geo.Address.toObject(includeInstance, f),
    instructions: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.DeliveryDestination}
 */
proto.opencannabis.commerce.DeliveryDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.DeliveryDestination;
  return proto.opencannabis.commerce.DeliveryDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.DeliveryDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.DeliveryDestination}
 */
proto.opencannabis.commerce.DeliveryDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.geo.Address;
      reader.readMessage(value,proto.opencannabis.geo.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.DeliveryDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.DeliveryDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.DeliveryDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.DeliveryDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.geo.Address.serializeBinaryToWriter
    );
  }
  f = message.getInstructions();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional opencannabis.geo.Address address = 1;
 * @return {?proto.opencannabis.geo.Address}
 */
proto.opencannabis.commerce.DeliveryDestination.prototype.getAddress = function() {
  return /** @type{?proto.opencannabis.geo.Address} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.geo.Address, 1));
};


/** @param {?proto.opencannabis.geo.Address|undefined} value */
proto.opencannabis.commerce.DeliveryDestination.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.opencannabis.commerce.DeliveryDestination.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.DeliveryDestination.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string instructions = 2;
 * @return {string}
 */
proto.opencannabis.commerce.DeliveryDestination.prototype.getInstructions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.DeliveryDestination.prototype.setInstructions = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.OrderScheduling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.OrderScheduling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.OrderScheduling.displayName = 'proto.opencannabis.commerce.OrderScheduling';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.OrderScheduling.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.OrderScheduling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.OrderScheduling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.OrderScheduling.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduling: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desiredTime: (f = msg.getDesiredTime()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.OrderScheduling}
 */
proto.opencannabis.commerce.OrderScheduling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.OrderScheduling;
  return proto.opencannabis.commerce.OrderScheduling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.OrderScheduling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.OrderScheduling}
 */
proto.opencannabis.commerce.OrderScheduling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.commerce.SchedulingType} */ (reader.readEnum());
      msg.setScheduling(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setDesiredTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.OrderScheduling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.OrderScheduling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.OrderScheduling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.OrderScheduling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduling();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDesiredTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional SchedulingType scheduling = 1;
 * @return {!proto.opencannabis.commerce.SchedulingType}
 */
proto.opencannabis.commerce.OrderScheduling.prototype.getScheduling = function() {
  return /** @type {!proto.opencannabis.commerce.SchedulingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.commerce.SchedulingType} value */
proto.opencannabis.commerce.OrderScheduling.prototype.setScheduling = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Instant desired_time = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.commerce.OrderScheduling.prototype.getDesiredTime = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.commerce.OrderScheduling.prototype.setDesiredTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.commerce.OrderScheduling.prototype.clearDesiredTime = function() {
  this.setDesiredTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.OrderScheduling.prototype.hasDesiredTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.StatusCheckin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.StatusCheckin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.StatusCheckin.displayName = 'proto.opencannabis.commerce.StatusCheckin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.StatusCheckin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.StatusCheckin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.StatusCheckin.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instant: (f = msg.getInstant()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.StatusCheckin}
 */
proto.opencannabis.commerce.StatusCheckin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.StatusCheckin;
  return proto.opencannabis.commerce.StatusCheckin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.StatusCheckin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.StatusCheckin}
 */
proto.opencannabis.commerce.StatusCheckin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencannabis.commerce.OrderStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setInstant(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.StatusCheckin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.StatusCheckin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.StatusCheckin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInstant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional OrderStatus status = 1;
 * @return {!proto.opencannabis.commerce.OrderStatus}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.getStatus = function() {
  return /** @type {!proto.opencannabis.commerce.OrderStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.opencannabis.commerce.OrderStatus} value */
proto.opencannabis.commerce.StatusCheckin.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Instant instant = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.getInstant = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.commerce.StatusCheckin.prototype.setInstant = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.opencannabis.commerce.StatusCheckin.prototype.clearInstant = function() {
  this.setInstant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.hasInstant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.opencannabis.commerce.StatusCheckin.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.StatusCheckin.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.OrderKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.commerce.OrderKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.OrderKey.displayName = 'proto.opencannabis.commerce.OrderKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.OrderKey.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.OrderKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.OrderKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.OrderKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.OrderKey}
 */
proto.opencannabis.commerce.OrderKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.OrderKey;
  return proto.opencannabis.commerce.OrderKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.OrderKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.OrderKey}
 */
proto.opencannabis.commerce.OrderKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.OrderKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.OrderKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.OrderKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.OrderKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.commerce.OrderKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.OrderKey.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.commerce.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.commerce.Order.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.commerce.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.commerce.Order.displayName = 'proto.opencannabis.commerce.Order';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.commerce.Order.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.commerce.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.commerce.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.commerce.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    customer: (f = msg.getCustomer()) && proto.opencannabis.commerce.Customer.toObject(includeInstance, f),
    scheduling: (f = msg.getScheduling()) && proto.opencannabis.commerce.OrderScheduling.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.opencannabis.commerce.DeliveryDestination.toObject(includeInstance, f),
    notes: jspb.Message.getFieldWithDefault(msg, 7, ""),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.opencannabis.commerce.Item.toObject, includeInstance),
    actionLogList: jspb.Message.toObjectList(msg.getActionLogList(),
    proto.opencannabis.commerce.StatusCheckin.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    subtotal: +jspb.Message.getFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.commerce.Order}
 */
proto.opencannabis.commerce.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.commerce.Order;
  return proto.opencannabis.commerce.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.commerce.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.commerce.Order}
 */
proto.opencannabis.commerce.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.opencannabis.commerce.OrderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.commerce.OrderStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.opencannabis.commerce.Customer;
      reader.readMessage(value,proto.opencannabis.commerce.Customer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 5:
      var value = new proto.opencannabis.commerce.OrderScheduling;
      reader.readMessage(value,proto.opencannabis.commerce.OrderScheduling.deserializeBinaryFromReader);
      msg.setScheduling(value);
      break;
    case 6:
      var value = new proto.opencannabis.commerce.DeliveryDestination;
      reader.readMessage(value,proto.opencannabis.commerce.DeliveryDestination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 8:
      var value = new proto.opencannabis.commerce.Item;
      reader.readMessage(value,proto.opencannabis.commerce.Item.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    case 9:
      var value = new proto.opencannabis.commerce.StatusCheckin;
      reader.readMessage(value,proto.opencannabis.commerce.StatusCheckin.deserializeBinaryFromReader);
      msg.addActionLog(value);
      break;
    case 10:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSubtotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.commerce.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.commerce.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.commerce.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.commerce.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.commerce.Customer.serializeBinaryToWriter
    );
  }
  f = message.getScheduling();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencannabis.commerce.OrderScheduling.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencannabis.commerce.DeliveryDestination.serializeBinaryToWriter
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.opencannabis.commerce.Item.serializeBinaryToWriter
    );
  }
  f = message.getActionLogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.opencannabis.commerce.StatusCheckin.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getSubtotal();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.commerce.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Order.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OrderType type = 2;
 * @return {!proto.opencannabis.commerce.OrderType}
 */
proto.opencannabis.commerce.Order.prototype.getType = function() {
  return /** @type {!proto.opencannabis.commerce.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.opencannabis.commerce.OrderType} value */
proto.opencannabis.commerce.Order.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional OrderStatus status = 3;
 * @return {!proto.opencannabis.commerce.OrderStatus}
 */
proto.opencannabis.commerce.Order.prototype.getStatus = function() {
  return /** @type {!proto.opencannabis.commerce.OrderStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.commerce.OrderStatus} value */
proto.opencannabis.commerce.Order.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Customer customer = 4;
 * @return {?proto.opencannabis.commerce.Customer}
 */
proto.opencannabis.commerce.Order.prototype.getCustomer = function() {
  return /** @type{?proto.opencannabis.commerce.Customer} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Customer, 4));
};


/** @param {?proto.opencannabis.commerce.Customer|undefined} value */
proto.opencannabis.commerce.Order.prototype.setCustomer = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.opencannabis.commerce.Order.prototype.clearCustomer = function() {
  this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Order.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OrderScheduling scheduling = 5;
 * @return {?proto.opencannabis.commerce.OrderScheduling}
 */
proto.opencannabis.commerce.Order.prototype.getScheduling = function() {
  return /** @type{?proto.opencannabis.commerce.OrderScheduling} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.OrderScheduling, 5));
};


/** @param {?proto.opencannabis.commerce.OrderScheduling|undefined} value */
proto.opencannabis.commerce.Order.prototype.setScheduling = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.opencannabis.commerce.Order.prototype.clearScheduling = function() {
  this.setScheduling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Order.prototype.hasScheduling = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DeliveryDestination destination = 6;
 * @return {?proto.opencannabis.commerce.DeliveryDestination}
 */
proto.opencannabis.commerce.Order.prototype.getDestination = function() {
  return /** @type{?proto.opencannabis.commerce.DeliveryDestination} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.DeliveryDestination, 6));
};


/** @param {?proto.opencannabis.commerce.DeliveryDestination|undefined} value */
proto.opencannabis.commerce.Order.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.opencannabis.commerce.Order.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Order.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string notes = 7;
 * @return {string}
 */
proto.opencannabis.commerce.Order.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.opencannabis.commerce.Order.prototype.setNotes = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Item item = 8;
 * @return {!Array.<!proto.opencannabis.commerce.Item>}
 */
proto.opencannabis.commerce.Order.prototype.getItemList = function() {
  return /** @type{!Array.<!proto.opencannabis.commerce.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.commerce.Item, 8));
};


/** @param {!Array.<!proto.opencannabis.commerce.Item>} value */
proto.opencannabis.commerce.Order.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.opencannabis.commerce.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.commerce.Item}
 */
proto.opencannabis.commerce.Order.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.opencannabis.commerce.Item, opt_index);
};


proto.opencannabis.commerce.Order.prototype.clearItemList = function() {
  this.setItemList([]);
};


/**
 * repeated StatusCheckin action_log = 9;
 * @return {!Array.<!proto.opencannabis.commerce.StatusCheckin>}
 */
proto.opencannabis.commerce.Order.prototype.getActionLogList = function() {
  return /** @type{!Array.<!proto.opencannabis.commerce.StatusCheckin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.commerce.StatusCheckin, 9));
};


/** @param {!Array.<!proto.opencannabis.commerce.StatusCheckin>} value */
proto.opencannabis.commerce.Order.prototype.setActionLogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.opencannabis.commerce.StatusCheckin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.commerce.StatusCheckin}
 */
proto.opencannabis.commerce.Order.prototype.addActionLog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.opencannabis.commerce.StatusCheckin, opt_index);
};


proto.opencannabis.commerce.Order.prototype.clearActionLogList = function() {
  this.setActionLogList([]);
};


/**
 * optional opencannabis.temporal.Instant created_at = 10;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.commerce.Order.prototype.getCreatedAt = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 10));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.commerce.Order.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.opencannabis.commerce.Order.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.commerce.Order.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double subtotal = 11;
 * @return {number}
 */
proto.opencannabis.commerce.Order.prototype.getSubtotal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.opencannabis.commerce.Order.prototype.setSubtotal = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * @enum {number}
 */
proto.opencannabis.commerce.OrderType = {
  PICKUP: 0,
  DELIVERY: 1
};

/**
 * @enum {number}
 */
proto.opencannabis.commerce.SchedulingType = {
  ASAP: 0,
  TIMED: 1
};

/**
 * @enum {number}
 */
proto.opencannabis.commerce.OrderStatus = {
  PENDING: 0,
  APPROVED: 1,
  REJECTED: 2,
  ASSIGNED: 3,
  EN_ROUTE: 4,
  FULFILLED: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.order.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.order.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.order.Action.displayName = 'proto.bloombox.schema.analytics.order.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.order.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.order.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.order.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.order.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderKey: (f = msg.getOrderKey()) && proto.opencannabis.commerce.OrderKey.toObject(includeInstance, f),
    verb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    customer: (f = msg.getCustomer()) && proto.opencannabis.commerce.Customer.toObject(includeInstance, f),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.order.Action}
 */
proto.bloombox.schema.analytics.order.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.order.Action;
  return proto.bloombox.schema.analytics.order.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.order.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.order.Action}
 */
proto.bloombox.schema.analytics.order.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.commerce.OrderKey;
      reader.readMessage(value,proto.opencannabis.commerce.OrderKey.deserializeBinaryFromReader);
      msg.setOrderKey(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.order.OrderAction} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 3:
      var value = new proto.opencannabis.commerce.Customer;
      reader.readMessage(value,proto.opencannabis.commerce.Customer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.order.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.order.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.order.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.order.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.commerce.OrderKey.serializeBinaryToWriter
    );
  }
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.commerce.Customer.serializeBinaryToWriter
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.commerce.OrderKey order_key = 1;
 * @return {?proto.opencannabis.commerce.OrderKey}
 */
proto.bloombox.schema.analytics.order.Action.prototype.getOrderKey = function() {
  return /** @type{?proto.opencannabis.commerce.OrderKey} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.OrderKey, 1));
};


/** @param {?proto.opencannabis.commerce.OrderKey|undefined} value */
proto.bloombox.schema.analytics.order.Action.prototype.setOrderKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.order.Action.prototype.clearOrderKey = function() {
  this.setOrderKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.order.Action.prototype.hasOrderKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrderAction verb = 2;
 * @return {!proto.bloombox.schema.analytics.order.OrderAction}
 */
proto.bloombox.schema.analytics.order.Action.prototype.getVerb = function() {
  return /** @type {!proto.bloombox.schema.analytics.order.OrderAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.order.OrderAction} value */
proto.bloombox.schema.analytics.order.Action.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.commerce.Customer customer = 3;
 * @return {?proto.opencannabis.commerce.Customer}
 */
proto.bloombox.schema.analytics.order.Action.prototype.getCustomer = function() {
  return /** @type{?proto.opencannabis.commerce.Customer} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Customer, 3));
};


/** @param {?proto.opencannabis.commerce.Customer|undefined} value */
proto.bloombox.schema.analytics.order.Action.prototype.setCustomer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.order.Action.prototype.clearCustomer = function() {
  this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.order.Action.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.temporal.Instant occurred = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.order.Action.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.order.Action.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.analytics.order.Action.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.order.Action.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.order.OrderAction = {
  ADD_TO_CART: 0,
  REMOVE_FROM_CART: 1,
  RESTORE_CART: 2,
  VERIFY_MEMBER: 3,
  ORDER_SUBMIT: 4,
  ORDER_STATUS: 5,
  ORDER_CANCEL: 6,
  ORDER_ACCEPTED: 7,
  ORDER_REJECTED: 8,
  ORDER_IN_PROGERSS: 9,
  ORDER_OUT_FOR_DELIVERY: 10,
  ORDER_FULFILLED: 11
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.section.Impression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.section.Impression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.section.Impression.displayName = 'proto.bloombox.schema.analytics.section.Impression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.section.Impression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.section.Impression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.Impression.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.opencannabis.products.menu.section.SectionSpec.toObject(includeInstance, f),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.section.Impression}
 */
proto.bloombox.schema.analytics.section.Impression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.section.Impression;
  return proto.bloombox.schema.analytics.section.Impression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.section.Impression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.section.Impression}
 */
proto.bloombox.schema.analytics.section.Impression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.section.SectionSpec;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.section.Impression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.section.Impression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.Impression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.products.menu.section.SectionSpec spec = 1;
 * @return {?proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.getSpec = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionSpec, 1));
};


/** @param {?proto.opencannabis.products.menu.section.SectionSpec|undefined} value */
proto.bloombox.schema.analytics.section.Impression.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.section.Impression.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.temporal.Instant occurred = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.section.Impression.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.section.Impression.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.Impression.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.section.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.section.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.section.View.displayName = 'proto.bloombox.schema.analytics.section.View';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.section.View.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.section.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.section.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.opencannabis.products.menu.section.SectionSpec.toObject(includeInstance, f),
    interactive: jspb.Message.getFieldWithDefault(msg, 2, false),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.section.View}
 */
proto.bloombox.schema.analytics.section.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.section.View;
  return proto.bloombox.schema.analytics.section.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.section.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.section.View}
 */
proto.bloombox.schema.analytics.section.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.section.SectionSpec;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInteractive(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.section.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.section.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.section.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter
    );
  }
  f = message.getInteractive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.products.menu.section.SectionSpec spec = 1;
 * @return {?proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.bloombox.schema.analytics.section.View.prototype.getSpec = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionSpec, 1));
};


/** @param {?proto.opencannabis.products.menu.section.SectionSpec|undefined} value */
proto.bloombox.schema.analytics.section.View.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.section.View.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.View.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool interactive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.section.View.prototype.getInteractive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.section.View.prototype.setInteractive = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.section.View.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.section.View.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.section.View.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.View.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.section.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.section.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.section.Action.displayName = 'proto.bloombox.schema.analytics.section.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.section.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.section.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.section.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.opencannabis.products.menu.section.SectionSpec.toObject(includeInstance, f),
    verb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.section.Action}
 */
proto.bloombox.schema.analytics.section.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.section.Action;
  return proto.bloombox.schema.analytics.section.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.section.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.section.Action}
 */
proto.bloombox.schema.analytics.section.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.section.SectionSpec;
      reader.readMessage(value,proto.opencannabis.products.menu.section.SectionSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.section.SectionAction} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.section.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.section.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.section.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.section.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.section.SectionSpec.serializeBinaryToWriter
    );
  }
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.products.menu.section.SectionSpec spec = 1;
 * @return {?proto.opencannabis.products.menu.section.SectionSpec}
 */
proto.bloombox.schema.analytics.section.Action.prototype.getSpec = function() {
  return /** @type{?proto.opencannabis.products.menu.section.SectionSpec} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.section.SectionSpec, 1));
};


/** @param {?proto.opencannabis.products.menu.section.SectionSpec|undefined} value */
proto.bloombox.schema.analytics.section.Action.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.section.Action.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.Action.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SectionAction verb = 2;
 * @return {!proto.bloombox.schema.analytics.section.SectionAction}
 */
proto.bloombox.schema.analytics.section.Action.prototype.getVerb = function() {
  return /** @type {!proto.bloombox.schema.analytics.section.SectionAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.section.SectionAction} value */
proto.bloombox.schema.analytics.section.Action.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.section.Action.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.section.Action.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.section.Action.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.section.Action.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.section.SectionAction = {
  VIEW: 0,
  SORT: 1,
  FILTER: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.shop.Impression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.shop.Impression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.shop.Impression.displayName = 'proto.bloombox.schema.analytics.shop.Impression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.shop.Impression.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.shop.Impression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.shop.Impression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.Impression.toObject = function(includeInstance, msg) {
  var f, obj = {
    physical: jspb.Message.getFieldWithDefault(msg, 1, false),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.shop.Impression}
 */
proto.bloombox.schema.analytics.shop.Impression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.shop.Impression;
  return proto.bloombox.schema.analytics.shop.Impression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.shop.Impression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.shop.Impression}
 */
proto.bloombox.schema.analytics.shop.Impression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhysical(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.shop.Impression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.shop.Impression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.shop.Impression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.Impression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhysical();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool physical = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.shop.Impression.prototype.getPhysical = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.shop.Impression.prototype.setPhysical = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.shop.Impression.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.shop.Impression.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.shop.Impression.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.shop.Impression.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.shop.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.shop.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.shop.View.displayName = 'proto.bloombox.schema.analytics.shop.View';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.shop.View.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.shop.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.shop.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    physical: jspb.Message.getFieldWithDefault(msg, 1, false),
    interactive: jspb.Message.getFieldWithDefault(msg, 2, false),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.shop.View}
 */
proto.bloombox.schema.analytics.shop.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.shop.View;
  return proto.bloombox.schema.analytics.shop.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.shop.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.shop.View}
 */
proto.bloombox.schema.analytics.shop.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhysical(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInteractive(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.shop.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.shop.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.shop.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhysical();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInteractive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool physical = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.shop.View.prototype.getPhysical = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.shop.View.prototype.setPhysical = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool interactive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.shop.View.prototype.getInteractive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.shop.View.prototype.setInteractive = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.shop.View.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.shop.View.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.shop.View.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.shop.View.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.shop.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.shop.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.shop.Action.displayName = 'proto.bloombox.schema.analytics.shop.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.shop.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.shop.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    physical: jspb.Message.getFieldWithDefault(msg, 1, false),
    verb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.shop.Action}
 */
proto.bloombox.schema.analytics.shop.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.shop.Action;
  return proto.bloombox.schema.analytics.shop.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.shop.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.shop.Action}
 */
proto.bloombox.schema.analytics.shop.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhysical(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.shop.ShopAction} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.shop.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.shop.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.shop.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhysical();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool physical = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.getPhysical = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.analytics.shop.Action.prototype.setPhysical = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ShopAction verb = 2;
 * @return {!proto.bloombox.schema.analytics.shop.ShopAction}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.getVerb = function() {
  return /** @type {!proto.bloombox.schema.analytics.shop.ShopAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.shop.ShopAction} value */
proto.bloombox.schema.analytics.shop.Action.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.shop.Action.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.analytics.shop.Action.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.shop.Action.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.shop.ShopAction = {
  ENGAGE: 0,
  ENROLL: 10,
  ACTIVATE: 11,
  JOIN: 12,
  VERIFY: 13,
  CHECKIN: 14,
  PREFERENCES: 15,
  PURCHASE: 16,
  ORDER: 17,
  OPT_IN: 20,
  OPT_OUT: 21
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.identity.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.identity.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.identity.Action.displayName = 'proto.bloombox.schema.analytics.identity.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.identity.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.identity.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.identity.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    identity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    verb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.identity.Action}
 */
proto.bloombox.schema.analytics.identity.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.identity.Action;
  return proto.bloombox.schema.analytics.identity.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.identity.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.identity.Action}
 */
proto.bloombox.schema.analytics.identity.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.analytics.identity.UserAction} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.identity.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.identity.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.identity.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string identity = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.identity.Action.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserAction verb = 2;
 * @return {!proto.bloombox.schema.analytics.identity.UserAction}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.getVerb = function() {
  return /** @type {!proto.bloombox.schema.analytics.identity.UserAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.analytics.identity.UserAction} value */
proto.bloombox.schema.analytics.identity.Action.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional opencannabis.temporal.Instant occurred = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.identity.Action.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.identity.Action.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.identity.Action.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.identity.UserAction = {
  ENGAGE: 0,
  ENROLL: 10,
  ACTIVATE: 11,
  JOIN: 12,
  VERIFY: 13,
  CHECKIN: 14,
  PREFERENCES: 15,
  PURCHASE: 16,
  ORDER: 17,
  OPT_IN: 18,
  OPT_OUT: 19
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.generic.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.generic.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.generic.Event.displayName = 'proto.bloombox.schema.analytics.generic.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.generic.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.generic.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.google.protobuf.Struct.toObject(includeInstance, f),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.generic.Event}
 */
proto.bloombox.schema.analytics.generic.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.generic.Event;
  return proto.bloombox.schema.analytics.generic.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.generic.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.generic.Event}
 */
proto.bloombox.schema.analytics.generic.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Struct;
      reader.readMessage(value,proto.google.protobuf.Struct.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.generic.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.generic.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Struct.serializeBinaryToWriter
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct payload = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Struct, 1));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.bloombox.schema.analytics.generic.Event.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.analytics.generic.Event.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional opencannabis.temporal.Instant occurred = 2;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 2));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.generic.Event.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.analytics.generic.Event.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.Event.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.generic.SourceLineReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.generic.SourceLineReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.generic.SourceLineReference.displayName = 'proto.bloombox.schema.analytics.generic.SourceLineReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.generic.SourceLineReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.generic.SourceLineReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    line: jspb.Message.getFieldWithDefault(msg, 3, 0),
    column: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.generic.SourceLineReference}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.generic.SourceLineReference;
  return proto.bloombox.schema.analytics.generic.SourceLineReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.generic.SourceLineReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.generic.SourceLineReference}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLine(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.generic.SourceLineReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.generic.SourceLineReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 line = 3;
 * @return {number}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.setLine = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 column = 4;
 * @return {number}
 */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.generic.SourceLineReference.prototype.setColumn = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.generic.SourceLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.analytics.generic.SourceLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.generic.SourceLocation.displayName = 'proto.bloombox.schema.analytics.generic.SourceLocation';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.PinpointCase = {
  PINPOINT_NOT_SET: 0,
  LINEREF: 3,
  OFFSET: 4
};

/**
 * @return {proto.bloombox.schema.analytics.generic.SourceLocation.PinpointCase}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.getPinpointCase = function() {
  return /** @type {proto.bloombox.schema.analytics.generic.SourceLocation.PinpointCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.generic.SourceLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.generic.SourceLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.SourceLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filepath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lineref: (f = msg.getLineref()) && proto.bloombox.schema.analytics.generic.SourceLineReference.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.generic.SourceLocation}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.generic.SourceLocation;
  return proto.bloombox.schema.analytics.generic.SourceLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.generic.SourceLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.generic.SourceLocation}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilepath(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.analytics.generic.SourceLineReference;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.SourceLineReference.deserializeBinaryFromReader);
      msg.setLineref(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.generic.SourceLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.generic.SourceLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.SourceLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilepath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLineref();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.analytics.generic.SourceLineReference.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string module = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.setModule = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filepath = 2;
 * @return {string}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.getFilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.setFilepath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SourceLineReference lineref = 3;
 * @return {?proto.bloombox.schema.analytics.generic.SourceLineReference}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.getLineref = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.SourceLineReference} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.SourceLineReference, 3));
};


/** @param {?proto.bloombox.schema.analytics.generic.SourceLineReference|undefined} value */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.setLineref = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_[0], value);
};


proto.bloombox.schema.analytics.generic.SourceLocation.prototype.clearLineref = function() {
  this.setLineref(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.hasLineref = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 offset = 4;
 * @return {number}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.setOffset = function(value) {
  jspb.Message.setOneofField(this, 4, proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_[0], value);
};


proto.bloombox.schema.analytics.generic.SourceLocation.prototype.clearOffset = function() {
  jspb.Message.setOneofField(this, 4, proto.bloombox.schema.analytics.generic.SourceLocation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.SourceLocation.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.analytics.generic.Exception = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.analytics.generic.Exception, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.analytics.generic.Exception.displayName = 'proto.bloombox.schema.analytics.generic.Exception';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.analytics.generic.Exception.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.analytics.generic.Exception} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.Exception.toObject = function(includeInstance, msg) {
  var f, obj = {
    domain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    location: (f = msg.getLocation()) && proto.bloombox.schema.analytics.generic.SourceLocation.toObject(includeInstance, f),
    occurred: (f = msg.getOccurred()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.analytics.generic.Exception}
 */
proto.bloombox.schema.analytics.generic.Exception.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.analytics.generic.Exception;
  return proto.bloombox.schema.analytics.generic.Exception.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.analytics.generic.Exception} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.analytics.generic.Exception}
 */
proto.bloombox.schema.analytics.generic.Exception.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.analytics.generic.SourceLocation;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.SourceLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setOccurred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.analytics.generic.Exception.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.analytics.generic.Exception} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.analytics.generic.Exception.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.analytics.generic.SourceLocation.serializeBinaryToWriter
    );
  }
  f = message.getOccurred();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string domain = 1;
 * @return {string}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.analytics.generic.Exception.prototype.setDomain = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.analytics.generic.Exception.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SourceLocation location = 3;
 * @return {?proto.bloombox.schema.analytics.generic.SourceLocation}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.SourceLocation} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.SourceLocation, 3));
};


/** @param {?proto.bloombox.schema.analytics.generic.SourceLocation|undefined} value */
proto.bloombox.schema.analytics.generic.Exception.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.analytics.generic.Exception.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional opencannabis.temporal.Instant occurred = 4;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.getOccurred = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 4));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.bloombox.schema.analytics.generic.Exception.prototype.setOccurred = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.analytics.generic.Exception.prototype.clearOccurred = function() {
  this.setOccurred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.analytics.generic.Exception.prototype.hasOccurred = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.Ping.displayName = 'proto.bloombox.schema.services.auth.v1beta1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.Ping;
  return proto.bloombox.schema.services.auth.v1beta1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.Ping.Request.displayName = 'proto.bloombox.schema.services.auth.v1beta1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.Ping.Request;
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.Ping.Response.displayName = 'proto.bloombox.schema.services.auth.v1beta1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.Ping.Response;
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.auth.v1beta1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.displayName = 'proto.bloombox.schema.services.auth.v1beta1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.auth.v1beta1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.auth.v1beta1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.Ping.Operation;
  return proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.auth.v1beta1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.auth.v1beta1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.auth.v1beta1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.auth.v1beta1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.Ping.Request|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.Ping.Response|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.displayName = 'proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion;
  return proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.displayName = 'proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion;
  return proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.AccountAssertion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.displayName = 'proto.bloombox.schema.services.auth.v1beta1.AccountAssertion';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.AssertionCase = {
  ASSERTION_NOT_SET: 0,
  EMAIL_PASSWORD: 1,
  FIREBASE: 2
};

/**
 * @return {proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.AssertionCase}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.getAssertionCase = function() {
  return /** @type {proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.AssertionCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AccountAssertion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.toObject = function(includeInstance, msg) {
  var f, obj = {
    emailPassword: (f = msg.getEmailPassword()) && proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.toObject(includeInstance, f),
    firebase: (f = msg.getFirebase()) && proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AccountAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.AccountAssertion;
  return proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AccountAssertion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AccountAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.deserializeBinaryFromReader);
      msg.setEmailPassword(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.deserializeBinaryFromReader);
      msg.setFirebase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AccountAssertion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmailPassword();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion.serializeBinaryToWriter
    );
  }
  f = message.getFirebase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion.serializeBinaryToWriter
    );
  }
};


/**
 * optional EmailPasswordAssertion email_password = 1;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.getEmailPassword = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion, 1));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.EmailPasswordAssertion|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.setEmailPassword = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.oneofGroups_[0], value);
};


proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.clearEmailPassword = function() {
  this.setEmailPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.hasEmailPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FirebaseTokenAssertion firebase = 2;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.getFirebase = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion, 2));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.FirebaseTokenAssertion|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.setFirebase = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.oneofGroups_[0], value);
};


proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.clearFirebase = function() {
  this.setFirebase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.prototype.hasFirebase = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.displayName = 'proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser;
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.displayName = 'proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assertion: (f = msg.getAssertion()) && proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request;
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.identity.IdentityProvider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.auth.v1beta1.AccountAssertion;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.deserializeBinaryFromReader);
      msg.setAssertion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAssertion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.auth.v1beta1.AccountAssertion.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.identity.IdentityProvider provider = 1;
 * @return {!proto.bloombox.schema.identity.IdentityProvider}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.getProvider = function() {
  return /** @type {!proto.bloombox.schema.identity.IdentityProvider} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.identity.IdentityProvider} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.setProvider = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AccountAssertion assertion = 2;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.AccountAssertion}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.getAssertion = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.AccountAssertion} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.AccountAssertion, 2));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.AccountAssertion|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.setAssertion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.clearAssertion = function() {
  this.setAssertion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.prototype.hasAssertion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.displayName = 'proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response;
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.auth.v1beta1.AuthStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional AuthStatus status = 1;
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthStatus}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.auth.v1beta1.AuthStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.auth.v1beta1.AuthStatus} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.displayName = 'proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation;
  return proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response;
      reader.readMessage(value,proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request, 1));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Request|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response, 2));
};


/** @param {?proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Response|undefined} value */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthenticateUser.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthError = {
  NO_ERROR: 0
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.auth.v1beta1.AuthStatus = {
  UNKNOWN: 0,
  ACCESS_GRANTED: 1,
  ACCESS_DENIED: 2,
  ACCOUNT_SUSPENDED: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.Ping.displayName = 'proto.bloombox.schema.services.shop.v1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping}
 */
proto.bloombox.schema.services.shop.v1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.Ping;
  return proto.bloombox.schema.services.shop.v1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping}
 */
proto.bloombox.schema.services.shop.v1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.Ping.Request.displayName = 'proto.bloombox.schema.services.shop.v1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Request}
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.Ping.Request;
  return proto.bloombox.schema.services.shop.v1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Request}
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.Ping.Response.displayName = 'proto.bloombox.schema.services.shop.v1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Response}
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.Ping.Response;
  return proto.bloombox.schema.services.shop.v1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Response}
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.shop.v1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.shop.v1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.Ping.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Operation}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.Ping.Operation;
  return proto.bloombox.schema.services.shop.v1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.Ping.Operation}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.Ping.Request}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.Ping.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.Ping.Response}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.Ping.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.ShopInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.ShopInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.ShopInfo.displayName = 'proto.bloombox.schema.services.shop.v1.ShopInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.ShopInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.ShopInfo;
  return proto.bloombox.schema.services.shop.v1.ShopInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.ShopInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.ShopInfo.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.ShopInfo.Request.displayName = 'proto.bloombox.schema.services.shop.v1.ShopInfo.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Request}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.ShopInfo.Request;
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Request}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.ShopInfo.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 1;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 1));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.ShopInfo.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.ShopInfo.Response.displayName = 'proto.bloombox.schema.services.shop.v1.ShopInfo.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    shopStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Response}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.ShopInfo.Response;
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Response}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (reader.readEnum());
      msg.setShopStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.ShopInfo.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShopStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.partner.settings.ShopStatus shop_status = 1;
 * @return {!proto.bloombox.schema.partner.settings.ShopStatus}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.prototype.getShopStatus = function() {
  return /** @type {!proto.bloombox.schema.partner.settings.ShopStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.partner.settings.ShopStatus} value */
proto.bloombox.schema.services.shop.v1.ShopInfo.Response.prototype.setShopStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.ShopInfo.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.ShopInfo.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.ShopInfo.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.ShopInfo.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Operation}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.ShopInfo.Operation;
  return proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.ShopInfo.Operation}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.ShopInfo.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.ShopInfo.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.ShopInfo.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.ShopInfo.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.ShopInfo.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.ShopInfo.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.ShopInfo.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.ShopInfo.Request}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.ShopInfo.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.ShopInfo.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.ShopInfo.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.ShopInfo.Response}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.ShopInfo.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.ShopInfo.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.ShopInfo.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.ShopInfo.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.EnrollMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.EnrollMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.EnrollMember.displayName = 'proto.bloombox.schema.services.shop.v1.EnrollMember';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.EnrollMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.EnrollMember;
  return proto.bloombox.schema.services.shop.v1.EnrollMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.EnrollMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.EnrollMember.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.EnrollMember.Request.displayName = 'proto.bloombox.schema.services.shop.v1.EnrollMember.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    person: (f = msg.getPerson()) && proto.opencannabis.person.Person.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    doctorRec: (f = msg.getDoctorRec()) && proto.bloombox.schema.identity.ids.UserDoctorRec.toObject(includeInstance, f),
    governmentId: (f = msg.getGovernmentId()) && proto.bloombox.schema.identity.ID.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f),
    password: jspb.Message.getFieldWithDefault(msg, 7, ""),
    dryRun: jspb.Message.getFieldWithDefault(msg, 8, false),
    consumerProfile: (f = msg.getConsumerProfile()) && proto.bloombox.schema.identity.ConsumerProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Request}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.EnrollMember.Request;
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Request}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.person.Person;
      reader.readMessage(value,proto.opencannabis.person.Person.deserializeBinaryFromReader);
      msg.setPerson(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.identity.ids.UserDoctorRec;
      reader.readMessage(value,proto.bloombox.schema.identity.ids.UserDoctorRec.deserializeBinaryFromReader);
      msg.setDoctorRec(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.identity.ID;
      reader.readMessage(value,proto.bloombox.schema.identity.ID.deserializeBinaryFromReader);
      msg.setGovernmentId(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDryRun(value);
      break;
    case 9:
      var value = new proto.bloombox.schema.identity.ConsumerProfile;
      reader.readMessage(value,proto.bloombox.schema.identity.ConsumerProfile.deserializeBinaryFromReader);
      msg.setConsumerProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.EnrollMember.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerson();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.person.Person.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDoctorRec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.identity.ids.UserDoctorRec.serializeBinaryToWriter
    );
  }
  f = message.getGovernmentId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.identity.ID.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDryRun();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getConsumerProfile();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.bloombox.schema.identity.ConsumerProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.person.Person person = 1;
 * @return {?proto.opencannabis.person.Person}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getPerson = function() {
  return /** @type{?proto.opencannabis.person.Person} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Person, 1));
};


/** @param {?proto.opencannabis.person.Person|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setPerson = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.clearPerson = function() {
  this.setPerson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.hasPerson = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.identity.EnrollmentSource source = 2;
 * @return {!proto.bloombox.schema.identity.EnrollmentSource}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getSource = function() {
  return /** @type {!proto.bloombox.schema.identity.EnrollmentSource} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.identity.EnrollmentSource} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setSource = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string channel = 3;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bloombox.schema.identity.ids.UserDoctorRec doctor_rec = 4;
 * @return {?proto.bloombox.schema.identity.ids.UserDoctorRec}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getDoctorRec = function() {
  return /** @type{?proto.bloombox.schema.identity.ids.UserDoctorRec} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ids.UserDoctorRec, 4));
};


/** @param {?proto.bloombox.schema.identity.ids.UserDoctorRec|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setDoctorRec = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.clearDoctorRec = function() {
  this.setDoctorRec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.hasDoctorRec = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bloombox.schema.identity.ID government_id = 5;
 * @return {?proto.bloombox.schema.identity.ID}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getGovernmentId = function() {
  return /** @type{?proto.bloombox.schema.identity.ID} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ID, 5));
};


/** @param {?proto.bloombox.schema.identity.ID|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setGovernmentId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.clearGovernmentId = function() {
  this.setGovernmentId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.hasGovernmentId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 6;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 6));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string password = 7;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool dry_run = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getDryRun = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setDryRun = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bloombox.schema.identity.ConsumerProfile consumer_profile = 9;
 * @return {?proto.bloombox.schema.identity.ConsumerProfile}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.getConsumerProfile = function() {
  return /** @type{?proto.bloombox.schema.identity.ConsumerProfile} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.ConsumerProfile, 9));
};


/** @param {?proto.bloombox.schema.identity.ConsumerProfile|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.setConsumerProfile = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.clearConsumerProfile = function() {
  this.setConsumerProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Request.prototype.hasConsumerProfile = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.EnrollMember.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.EnrollMember.Response.displayName = 'proto.bloombox.schema.services.shop.v1.EnrollMember.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.ResultCase = {
  RESULT_NOT_SET: 0,
  FOREIGN_ID: 2,
  ERROR: 3
};

/**
 * @return {proto.bloombox.schema.services.shop.v1.EnrollMember.Response.ResultCase}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.getResultCase = function() {
  return /** @type {proto.bloombox.schema.services.shop.v1.EnrollMember.Response.ResultCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    foreignId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Response}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.EnrollMember.Response;
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Response}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeignId(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.shop.v1.EnrollmentError} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.EnrollMember.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.bloombox.schema.services.shop.v1.EnrollmentError} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string foreign_id = 2;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.getForeignId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.setForeignId = function(value) {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_[0], value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.clearForeignId = function() {
  jspb.Message.setOneofField(this, 2, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.hasForeignId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EnrollmentError error = 3;
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollmentError}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.shop.v1.EnrollmentError} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.shop.v1.EnrollmentError} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_[0], value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.services.shop.v1.EnrollMember.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.EnrollMember.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.EnrollMember.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.EnrollMember.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.EnrollMember.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Operation}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.EnrollMember.Operation;
  return proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.EnrollMember.Operation}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.EnrollMember.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.EnrollMember.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.EnrollMember.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.EnrollMember.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.EnrollMember.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.EnrollMember.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.EnrollMember.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.EnrollMember.Request}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.EnrollMember.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.EnrollMember.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.EnrollMember.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.EnrollMember.Response}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.EnrollMember.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.EnrollMember.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.EnrollMember.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.EnrollMember.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.VerifyMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.VerifyMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.VerifyMember.displayName = 'proto.bloombox.schema.services.shop.v1.VerifyMember';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.VerifyMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.VerifyMember;
  return proto.bloombox.schema.services.shop.v1.VerifyMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.VerifyMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.VerifyMember.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.VerifyMember.Request.displayName = 'proto.bloombox.schema.services.shop.v1.VerifyMember.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    emailAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Request}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.VerifyMember.Request;
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Request}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailAddress(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.VerifyMember.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmailAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string email_address = 1;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.getEmailAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.setEmailAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 2;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 2));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.VerifyMember.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.VerifyMember.Response.displayName = 'proto.bloombox.schema.services.shop.v1.VerifyMember.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.ResultCase = {
  RESULT_NOT_SET: 0,
  CUSTOMER: 2,
  ERROR: 3
};

/**
 * @return {proto.bloombox.schema.services.shop.v1.VerifyMember.Response.ResultCase}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.getResultCase = function() {
  return /** @type {proto.bloombox.schema.services.shop.v1.VerifyMember.Response.ResultCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getFieldWithDefault(msg, 1, false),
    customer: (f = msg.getCustomer()) && proto.opencannabis.commerce.Customer.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Response}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.VerifyMember.Response;
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Response}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 2:
      var value = new proto.opencannabis.commerce.Customer;
      reader.readMessage(value,proto.opencannabis.commerce.Customer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.shop.v1.VerifyError} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.VerifyMember.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.commerce.Customer.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.bloombox.schema.services.shop.v1.VerifyError} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.setVerified = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional opencannabis.commerce.Customer customer = 2;
 * @return {?proto.opencannabis.commerce.Customer}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.getCustomer = function() {
  return /** @type{?proto.opencannabis.commerce.Customer} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Customer, 2));
};


/** @param {?proto.opencannabis.commerce.Customer|undefined} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.setCustomer = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_[0], value);
};


proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.clearCustomer = function() {
  this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VerifyError error = 3;
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyError}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.shop.v1.VerifyError} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.shop.v1.VerifyError} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_[0], value);
};


proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 3, proto.bloombox.schema.services.shop.v1.VerifyMember.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.VerifyMember.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.VerifyMember.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.VerifyMember.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.VerifyMember.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Operation}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.VerifyMember.Operation;
  return proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.VerifyMember.Operation}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.VerifyMember.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.VerifyMember.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.VerifyMember.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.VerifyMember.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.VerifyMember.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.VerifyMember.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.VerifyMember.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.VerifyMember.Request}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.VerifyMember.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.VerifyMember.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.VerifyMember.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.VerifyMember.Response}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.VerifyMember.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.VerifyMember.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.VerifyMember.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.VerifyMember.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.CheckZipcode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.CheckZipcode.displayName = 'proto.bloombox.schema.services.shop.v1.CheckZipcode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.CheckZipcode;
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.CheckZipcode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.CheckZipcode.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.displayName = 'proto.bloombox.schema.services.shop.v1.CheckZipcode.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    zipcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Request}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.CheckZipcode.Request;
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Request}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipcode(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZipcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zipcode = 1;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.getZipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.setZipcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 2;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 2));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.CheckZipcode.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.displayName = 'proto.bloombox.schema.services.shop.v1.CheckZipcode.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    supported: jspb.Message.getFieldWithDefault(msg, 1, false),
    deliveryMinimum: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Response}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.CheckZipcode.Response;
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Response}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupported(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDeliveryMinimum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupported();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDeliveryMinimum();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional bool supported = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.getSupported = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.setSupported = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float delivery_minimum = 2;
 * @return {number}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.getDeliveryMinimum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.prototype.setDeliveryMinimum = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation;
  return proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.CheckZipcode.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.CheckZipcode.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.CheckZipcode.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.CheckZipcode.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.CheckZipcode.Request}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.CheckZipcode.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.CheckZipcode.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.CheckZipcode.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.CheckZipcode.Response}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.CheckZipcode.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.CheckZipcode.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.CheckZipcode.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.CheckZipcode.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.SubmitOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.SubmitOrder.displayName = 'proto.bloombox.schema.services.shop.v1.SubmitOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.SubmitOrder;
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.SubmitOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.SubmitOrder.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.displayName = 'proto.bloombox.schema.services.shop.v1.SubmitOrder.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.opencannabis.commerce.Order.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.SubmitOrder.Request;
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.commerce.Order;
      reader.readMessage(value,proto.opencannabis.commerce.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.commerce.Order.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional opencannabis.commerce.Order order = 1;
 * @return {?proto.opencannabis.commerce.Order}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.getOrder = function() {
  return /** @type{?proto.opencannabis.commerce.Order} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Order, 1));
};


/** @param {?proto.opencannabis.commerce.Order|undefined} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.setOrder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 2;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 2));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.SubmitOrder.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.displayName = 'proto.bloombox.schema.services.shop.v1.SubmitOrder.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.SubmitOrder.Response;
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.shop.v1.OrderError} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional OrderError error = 1;
 * @return {!proto.bloombox.schema.services.shop.v1.OrderError}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.shop.v1.OrderError} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.shop.v1.OrderError} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.setError = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string order_id = 2;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.prototype.setOrderId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation;
  return proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.SubmitOrder.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.SubmitOrder.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.SubmitOrder.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.SubmitOrder.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.SubmitOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.SubmitOrder.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.SubmitOrder.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.SubmitOrder.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.SubmitOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.SubmitOrder.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.SubmitOrder.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.SubmitOrder.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.SubmitOrder.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.GetOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.GetOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.GetOrder.displayName = 'proto.bloombox.schema.services.shop.v1.GetOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.GetOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.GetOrder;
  return proto.bloombox.schema.services.shop.v1.GetOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.GetOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.GetOrder.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.GetOrder.Request.displayName = 'proto.bloombox.schema.services.shop.v1.GetOrder.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.GetOrder.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.bloombox.schema.partner.PartnerLocationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.GetOrder.Request;
  return proto.bloombox.schema.services.shop.v1.GetOrder.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.partner.PartnerLocationKey;
      reader.readMessage(value,proto.bloombox.schema.partner.PartnerLocationKey.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.GetOrder.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.partner.PartnerLocationKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.setOrderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bloombox.schema.partner.PartnerLocationKey location = 2;
 * @return {?proto.bloombox.schema.partner.PartnerLocationKey}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.getLocation = function() {
  return /** @type{?proto.bloombox.schema.partner.PartnerLocationKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.partner.PartnerLocationKey, 2));
};


/** @param {?proto.bloombox.schema.partner.PartnerLocationKey|undefined} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Request.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.GetOrder.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.GetOrder.Response.displayName = 'proto.bloombox.schema.services.shop.v1.GetOrder.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.GetOrder.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    order: (f = msg.getOrder()) && proto.opencannabis.commerce.Order.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.GetOrder.Response;
  return proto.bloombox.schema.services.shop.v1.GetOrder.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.opencannabis.commerce.Order;
      reader.readMessage(value,proto.opencannabis.commerce.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.shop.v1.OrderError} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.GetOrder.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencannabis.commerce.Order.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional opencannabis.commerce.Order order = 2;
 * @return {?proto.opencannabis.commerce.Order}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.getOrder = function() {
  return /** @type{?proto.opencannabis.commerce.Order} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.commerce.Order, 2));
};


/** @param {?proto.opencannabis.commerce.Order|undefined} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.setOrder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OrderError error = 3;
 * @return {!proto.bloombox.schema.services.shop.v1.OrderError}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.shop.v1.OrderError} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.shop.v1.OrderError} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Response.prototype.setError = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.shop.v1.GetOrder.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.shop.v1.GetOrder.Operation.displayName = 'proto.bloombox.schema.services.shop.v1.GetOrder.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.shop.v1.GetOrder.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.shop.v1.GetOrder.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.shop.v1.GetOrder.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Operation}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.shop.v1.GetOrder.Operation;
  return proto.bloombox.schema.services.shop.v1.GetOrder.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.shop.v1.GetOrder.Operation}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.shop.v1.GetOrder.Request;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.GetOrder.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.shop.v1.GetOrder.Response;
      reader.readMessage(value,proto.bloombox.schema.services.shop.v1.GetOrder.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.shop.v1.GetOrder.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.shop.v1.GetOrder.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.shop.v1.GetOrder.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.shop.v1.GetOrder.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.shop.v1.GetOrder.Request}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.GetOrder.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.GetOrder.Request, 1));
};


/** @param {?proto.bloombox.schema.services.shop.v1.GetOrder.Request|undefined} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.shop.v1.GetOrder.Response}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.shop.v1.GetOrder.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.shop.v1.GetOrder.Response, 2));
};


/** @param {?proto.bloombox.schema.services.shop.v1.GetOrder.Response|undefined} value */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.shop.v1.GetOrder.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.shop.v1.VerifyError = {
  NOT_FOUND: 0,
  REC_EXPIRED: 1,
  ID_EXPIRED: 2,
  INVALID_PAYLOAD: 3,
  NOT_ELIGIBLE: 4
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.shop.v1.OrderError = {
  NO_ERROR: 0,
  INVALID_ORDER: 1,
  USER_NOT_ELIGIBLE: 2,
  ZIPCODE_NOT_ELIGIBLE: 3,
  ZIPCODE_NOT_ACTIVE: 4,
  ZIPCODE_MINIMUM_NOT_MET: 5,
  INVALID_PARTNER: 6,
  INVALID_LOCATION: 7,
  INVALID_CUSTOMER: 8,
  MISSING_DESTINATION: 9,
  SHOP_NOT_OPEN: 10,
  GLOBAL_MINIMUM_NOT_MET: 11,
  MEMBERSHIP_NOT_FOUND: 12,
  DUPLICATE_ORDER: 13
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.shop.v1.EnrollmentError = {
  NO_ENROLLMENT_ERROR: 0,
  INVALID_EMAIL: 1,
  INVALID_NAME: 2,
  INVALID_PHONE: 3,
  INVALID_DATE_OF_BIRTH: 4,
  INVALID_REC_ID: 5,
  INVALID_REC_EXPIRATION: 6,
  INVALID_REC_DOCTOR_NAME: 7,
  INVALID_REC_DOCTOR_PHONE: 8,
  INVALID_USDL_ID: 9,
  INVALID_USDL_EXPIRATION: 11,
  INVALID_USDL_JURISDICTION: 12,
  ACCOUNT_CONFLICT: 13,
  ACCOUNT_CONFLICT_EMAIL: 14,
  ACCOUNT_CONFLICT_PHONE: 15,
  INVALID_ENROLLMENT_PAYLOAD: 99
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.pos.v1beta1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.pos.v1beta1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.pos.v1beta1.Ping.displayName = 'proto.bloombox.schema.services.pos.v1beta1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.pos.v1beta1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.pos.v1beta1.Ping;
  return proto.bloombox.schema.services.pos.v1beta1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.pos.v1beta1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.pos.v1beta1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.pos.v1beta1.Ping.Request.displayName = 'proto.bloombox.schema.services.pos.v1beta1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.pos.v1beta1.Ping.Request;
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.pos.v1beta1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.pos.v1beta1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.pos.v1beta1.Ping.Response.displayName = 'proto.bloombox.schema.services.pos.v1beta1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.pos.v1beta1.Ping.Response;
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.pos.v1beta1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.pos.v1beta1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.pos.v1beta1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.displayName = 'proto.bloombox.schema.services.pos.v1beta1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.pos.v1beta1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.pos.v1beta1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.pos.v1beta1.Ping.Operation;
  return proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.pos.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.pos.v1beta1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.pos.v1beta1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.pos.v1beta1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.pos.v1beta1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.pos.v1beta1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.pos.v1beta1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.pos.v1beta1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.pos.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.pos.v1beta1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.pos.v1beta1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.pos.v1beta1.Ping.Request|undefined} value */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.pos.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.pos.v1beta1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.pos.v1beta1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.pos.v1beta1.Ping.Response|undefined} value */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.pos.v1beta1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.pos.v1beta1.POSError = {
  UNKNOWN: 0,
  INVALID_COLLECTION: 1,
  INVALID_PARTNER: 2,
  INVALID_LOCATION: 3,
  INVALID_DEVICE: 4,
  PARTNER_NOT_FOUND: 5,
  LOCATION_NOT_FOUND: 6,
  INVALID_PAYLOAD: 99
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.Ping.displayName = 'proto.bloombox.schema.services.menu.v1beta1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.Ping;
  return proto.bloombox.schema.services.menu.v1beta1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.Ping.Request.displayName = 'proto.bloombox.schema.services.menu.v1beta1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.Ping.Request;
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.Ping.Response.displayName = 'proto.bloombox.schema.services.menu.v1beta1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.Ping.Response;
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.menu.v1beta1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.displayName = 'proto.bloombox.schema.services.menu.v1beta1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.menu.v1beta1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.menu.v1beta1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.Ping.Operation;
  return proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.menu.v1beta1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.menu.v1beta1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.menu.v1beta1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.menu.v1beta1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.Ping.Request|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.Ping.Response|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetMenu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetMenu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetMenu;
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    full: jspb.Message.getFieldWithDefault(msg, 2, false),
    keysOnly: jspb.Message.getFieldWithDefault(msg, 3, false),
    snapshot: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 5, ""),
    section: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fresh: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request;
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFull(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshot(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 6:
      var value = /** @type {!proto.opencannabis.products.menu.section.Section} */ (reader.readEnum());
      msg.setSection(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFresh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFull();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSnapshot();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSection();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFresh();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool full = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getFull = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setFull = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool keys_only = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setKeysOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string snapshot = 4;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getSnapshot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setSnapshot = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string fingerprint = 5;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional opencannabis.products.menu.section.Section section = 6;
 * @return {!proto.opencannabis.products.menu.section.Section}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getSection = function() {
  return /** @type {!proto.opencannabis.products.menu.section.Section} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.opencannabis.products.menu.section.Section} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setSection = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool fresh = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.getFresh = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.prototype.setFresh = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    catalog: (f = msg.getCatalog()) && proto.opencannabis.products.menu.Menu.toObject(includeInstance, f),
    cached: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response;
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.Menu;
      reader.readMessage(value,proto.opencannabis.products.menu.Menu.deserializeBinaryFromReader);
      msg.setCatalog(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCatalog();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencannabis.products.menu.Menu.serializeBinaryToWriter
    );
  }
  f = message.getCached();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional opencannabis.products.menu.Menu catalog = 1;
 * @return {?proto.opencannabis.products.menu.Menu}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.getCatalog = function() {
  return /** @type{?proto.opencannabis.products.menu.Menu} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.products.menu.Menu, 1));
};


/** @param {?proto.opencannabis.products.menu.Menu|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.setCatalog = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.clearCatalog = function() {
  this.setCatalog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.hasCatalog = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool cached = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.getCached = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.prototype.setCached = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation;
  return proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request, 1));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Request|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response, 2));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetMenu.Response|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetMenu.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetFeatured, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetFeatured';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured;
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysOnly: jspb.Message.getFieldWithDefault(msg, 2, false),
    section: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request;
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    case 3:
      var value = /** @type {!proto.opencannabis.products.menu.section.Section} */ (reader.readEnum());
      msg.setSection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool keys_only = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.setKeysOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional opencannabis.products.menu.section.Section section = 3;
 * @return {!proto.opencannabis.products.menu.section.Section}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.getSection = function() {
  return /** @type {!proto.opencannabis.products.menu.section.Section} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.opencannabis.products.menu.section.Section} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.prototype.setSection = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuredList: jspb.Message.toObjectList(msg.getFeaturedList(),
    proto.opencannabis.products.menu.MenuProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response;
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.products.menu.MenuProduct;
      reader.readMessage(value,proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader);
      msg.addFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opencannabis.products.menu.MenuProduct featured = 1;
 * @return {!Array.<!proto.opencannabis.products.menu.MenuProduct>}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.getFeaturedList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.menu.MenuProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.menu.MenuProduct, 1));
};


/** @param {!Array.<!proto.opencannabis.products.menu.MenuProduct>} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.setFeaturedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencannabis.products.menu.MenuProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.menu.MenuProduct}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.addFeatured = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencannabis.products.menu.MenuProduct, opt_index);
};


proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.prototype.clearFeaturedList = function() {
  this.setFeaturedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation;
  return proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request, 1));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Request|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response, 2));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Response|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetFeatured.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.ProductKeyset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.displayName = 'proto.bloombox.schema.services.menu.v1beta1.ProductKeyset';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.ProductKeyset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyList: jspb.Message.toObjectList(msg.getKeyList(),
    proto.opencannabis.base.ProductKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.ProductKeyset}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.ProductKeyset;
  return proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.ProductKeyset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.ProductKeyset}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencannabis.base.ProductKey;
      reader.readMessage(value,proto.opencannabis.base.ProductKey.deserializeBinaryFromReader);
      msg.addKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.ProductKeyset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencannabis.base.ProductKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opencannabis.base.ProductKey key = 1;
 * @return {!Array.<!proto.opencannabis.base.ProductKey>}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.getKeyList = function() {
  return /** @type{!Array.<!proto.opencannabis.base.ProductKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.base.ProductKey, 1));
};


/** @param {!Array.<!proto.opencannabis.base.ProductKey>} value */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.setKeyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencannabis.base.ProductKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.base.ProductKey}
 */
proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.addKey = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencannabis.base.ProductKey, opt_index);
};


proto.bloombox.schema.services.menu.v1beta1.ProductKeyset.prototype.clearKeyList = function() {
  this.setKeyList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetProduct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetProduct;
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request;
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    productList: jspb.Message.toObjectList(msg.getProductList(),
    proto.opencannabis.products.menu.MenuProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response;
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.opencannabis.products.menu.MenuProduct;
      reader.readMessage(value,proto.opencannabis.products.menu.MenuProduct.deserializeBinaryFromReader);
      msg.addProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.products.menu.MenuProduct.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opencannabis.products.menu.MenuProduct product = 2;
 * @return {!Array.<!proto.opencannabis.products.menu.MenuProduct>}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.getProductList = function() {
  return /** @type{!Array.<!proto.opencannabis.products.menu.MenuProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.products.menu.MenuProduct, 2));
};


/** @param {!Array.<!proto.opencannabis.products.menu.MenuProduct>} value */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.setProductList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.products.menu.MenuProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.products.menu.MenuProduct}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.addProduct = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.products.menu.MenuProduct, opt_index);
};


proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.prototype.clearProductList = function() {
  this.setProductList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.displayName = 'proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation;
  return proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request, 1));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Request|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response, 2));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.GetProduct.Response|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.GetProduct.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.SearchMenu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.displayName = 'proto.bloombox.schema.services.menu.v1beta1.SearchMenu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu;
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.displayName = 'proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: (f = msg.getSearch()) && proto.bloombox.schema.search.SearchSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request;
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.search.SearchSpec;
      reader.readMessage(value,proto.bloombox.schema.search.SearchSpec.deserializeBinaryFromReader);
      msg.setSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.search.SearchSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.search.SearchSpec search = 1;
 * @return {?proto.bloombox.schema.search.SearchSpec}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.getSearch = function() {
  return /** @type{?proto.bloombox.schema.search.SearchSpec} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.SearchSpec, 1));
};


/** @param {?proto.bloombox.schema.search.SearchSpec|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.setSearch = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.clearSearch = function() {
  this.setSearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.displayName = 'proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    resulset: (f = msg.getResulset()) && proto.bloombox.schema.search.SearchResultset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response;
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.search.SearchResultset;
      reader.readMessage(value,proto.bloombox.schema.search.SearchResultset.deserializeBinaryFromReader);
      msg.setResulset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResulset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.search.SearchResultset.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.search.SearchResultset resulset = 1;
 * @return {?proto.bloombox.schema.search.SearchResultset}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.getResulset = function() {
  return /** @type{?proto.bloombox.schema.search.SearchResultset} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.search.SearchResultset, 1));
};


/** @param {?proto.bloombox.schema.search.SearchResultset|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.setResulset = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.clearResulset = function() {
  this.setResulset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.prototype.hasResulset = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.displayName = 'proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation;
  return proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response;
      reader.readMessage(value,proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request, 1));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Request|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response, 2));
};


/** @param {?proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Response|undefined} value */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.menu.v1beta1.SearchMenu.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.menu.v1beta1.MenuError = {
  NO_ERROR: 0,
  PARTNER_INVALID: 1,
  LOCATION_INVALID: 2,
  SECTION_INVALID: 3,
  SECTION_NOT_FOUND: 4,
  MENU_NOT_FOUND: 5,
  INTERNAL_ERROR: 6,
  SEARCH_UNAVAILABLE: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.Event.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.Event;
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.Event.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.Event.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.bloombox.schema.analytics.generic.Event.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Request}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.Event.Request;
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Request}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.analytics.generic.Event;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.analytics.generic.Event.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bloombox.schema.analytics.Context context = 1;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 1));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.analytics.generic.Event event = 2;
 * @return {?proto.bloombox.schema.analytics.generic.Event}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.getEvent = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.Event} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.Event, 2));
};


/** @param {?proto.bloombox.schema.analytics.generic.Event|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string uuid = 3;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Request.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventList: jspb.Message.toObjectList(msg.getEventList(),
    proto.bloombox.schema.analytics.generic.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch;
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.bloombox.schema.analytics.generic.Event;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.Event.deserializeBinaryFromReader);
      msg.addEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bloombox.schema.analytics.generic.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bloombox.schema.analytics.generic.Event event = 2;
 * @return {!Array.<!proto.bloombox.schema.analytics.generic.Event>}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.getEventList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.analytics.generic.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.analytics.generic.Event, 2));
};


/** @param {!Array.<!proto.bloombox.schema.analytics.generic.Event>} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.setEventList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bloombox.schema.analytics.generic.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.analytics.generic.Event}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.addEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bloombox.schema.analytics.generic.Event, opt_index);
};


proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.prototype.clearEventList = function() {
  this.setEventList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.repeatedFields_, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    batchList: jspb.Message.toObjectList(msg.getBatchList(),
    proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest;
  return proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.deserializeBinaryFromReader);
      msg.addBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getBatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.analytics.Context context = 1;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 1));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Batch batch = 2;
 * @return {!Array.<!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch>}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.getBatchList = function() {
  return /** @type{!Array.<!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch, 2));
};


/** @param {!Array.<!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch>} value */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.setBatchList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.addBatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bloombox.schema.services.telemetry.v1beta3.Event.Batch, opt_index);
};


proto.bloombox.schema.services.telemetry.v1beta3.Event.BatchRequest.prototype.clearBatchList = function() {
  this.setBatchList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.Exception, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.Exception.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.Exception';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.Exception.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Exception} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.bloombox.schema.analytics.generic.Exception.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Exception}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.Exception;
  return proto.bloombox.schema.services.telemetry.v1beta3.Exception.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Exception} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.Exception}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.analytics.generic.Exception;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.Exception.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.Exception.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.Exception} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.analytics.generic.Exception.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bloombox.schema.analytics.Context context = 1;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 1));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.analytics.generic.Exception error = 2;
 * @return {?proto.bloombox.schema.analytics.generic.Exception}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.getError = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.Exception} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.Exception, 2));
};


/** @param {?proto.bloombox.schema.analytics.generic.Exception|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string uuid = 3;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.Exception.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    service: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getService();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional OperationStatus status = 1;
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bloombox.schema.services.ServiceStatus service = 3;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.getService = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryResponse.prototype.setService = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request, 1));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Request|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response, 2));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Response|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryPing.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent;
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.EventCase = {
  EVENT_NOT_SET: 0,
  SECTION: 10,
  PRODUCT: 11,
  SHOP: 12
};

/**
 * @return {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.EventCase}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.getEventCase = function() {
  return /** @type {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.EventCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    section: (f = msg.getSection()) && proto.bloombox.schema.analytics.section.Impression.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.bloombox.schema.analytics.product.Impression.toObject(includeInstance, f),
    shop: (f = msg.getShop()) && proto.bloombox.schema.analytics.shop.Impression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression;
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.section.Impression;
      reader.readMessage(value,proto.bloombox.schema.analytics.section.Impression.deserializeBinaryFromReader);
      msg.setSection(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.analytics.product.Impression;
      reader.readMessage(value,proto.bloombox.schema.analytics.product.Impression.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 12:
      var value = new proto.bloombox.schema.analytics.shop.Impression;
      reader.readMessage(value,proto.bloombox.schema.analytics.shop.Impression.deserializeBinaryFromReader);
      msg.setShop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getSection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.section.Impression.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.analytics.product.Impression.serializeBinaryToWriter
    );
  }
  f = message.getShop();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bloombox.schema.analytics.shop.Impression.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.analytics.Context context = 1;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 1));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.analytics.section.Impression section = 10;
 * @return {?proto.bloombox.schema.analytics.section.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.getSection = function() {
  return /** @type{?proto.bloombox.schema.analytics.section.Impression} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.section.Impression, 10));
};


/** @param {?proto.bloombox.schema.analytics.section.Impression|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.setSection = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.clearSection = function() {
  this.setSection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.hasSection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bloombox.schema.analytics.product.Impression product = 11;
 * @return {?proto.bloombox.schema.analytics.product.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.getProduct = function() {
  return /** @type{?proto.bloombox.schema.analytics.product.Impression} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.product.Impression, 11));
};


/** @param {?proto.bloombox.schema.analytics.product.Impression|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.setProduct = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bloombox.schema.analytics.shop.Impression shop = 12;
 * @return {?proto.bloombox.schema.analytics.shop.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.getShop = function() {
  return /** @type{?proto.bloombox.schema.analytics.shop.Impression} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.shop.Impression, 12));
};


/** @param {?proto.bloombox.schema.analytics.shop.Impression|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.setShop = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.clearShop = function() {
  this.setShop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.prototype.hasShop = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.EventCase = {
  EVENT_NOT_SET: 0,
  SECTION: 10,
  PRODUCT: 11,
  SHOP: 12
};

/**
 * @return {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.EventCase}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.getEventCase = function() {
  return /** @type {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.EventCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    section: (f = msg.getSection()) && proto.bloombox.schema.analytics.section.View.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.bloombox.schema.analytics.product.View.toObject(includeInstance, f),
    shop: (f = msg.getShop()) && proto.bloombox.schema.analytics.shop.View.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View;
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.section.View;
      reader.readMessage(value,proto.bloombox.schema.analytics.section.View.deserializeBinaryFromReader);
      msg.setSection(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.analytics.product.View;
      reader.readMessage(value,proto.bloombox.schema.analytics.product.View.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 12:
      var value = new proto.bloombox.schema.analytics.shop.View;
      reader.readMessage(value,proto.bloombox.schema.analytics.shop.View.deserializeBinaryFromReader);
      msg.setShop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getSection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.section.View.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.analytics.product.View.serializeBinaryToWriter
    );
  }
  f = message.getShop();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bloombox.schema.analytics.shop.View.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.analytics.Context context = 1;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 1));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.analytics.section.View section = 10;
 * @return {?proto.bloombox.schema.analytics.section.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.getSection = function() {
  return /** @type{?proto.bloombox.schema.analytics.section.View} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.section.View, 10));
};


/** @param {?proto.bloombox.schema.analytics.section.View|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.setSection = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.clearSection = function() {
  this.setSection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.hasSection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bloombox.schema.analytics.product.View product = 11;
 * @return {?proto.bloombox.schema.analytics.product.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.getProduct = function() {
  return /** @type{?proto.bloombox.schema.analytics.product.View} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.product.View, 11));
};


/** @param {?proto.bloombox.schema.analytics.product.View|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.setProduct = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bloombox.schema.analytics.shop.View shop = 12;
 * @return {?proto.bloombox.schema.analytics.shop.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.getShop = function() {
  return /** @type{?proto.bloombox.schema.analytics.shop.View} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.shop.View, 12));
};


/** @param {?proto.bloombox.schema.analytics.shop.View|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.setShop = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.clearShop = function() {
  this.setShop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.prototype.hasShop = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.EventCase = {
  EVENT_NOT_SET: 0,
  SECTION: 10,
  PRODUCT: 11,
  SHOP: 12,
  ORDER: 13
};

/**
 * @return {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.EventCase}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getEventCase = function() {
  return /** @type {proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.EventCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    section: (f = msg.getSection()) && proto.bloombox.schema.analytics.section.Action.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.bloombox.schema.analytics.product.Action.toObject(includeInstance, f),
    shop: (f = msg.getShop()) && proto.bloombox.schema.analytics.shop.Action.toObject(includeInstance, f),
    order: (f = msg.getOrder()) && proto.bloombox.schema.analytics.order.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action;
  return proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.section.Action;
      reader.readMessage(value,proto.bloombox.schema.analytics.section.Action.deserializeBinaryFromReader);
      msg.setSection(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.analytics.product.Action;
      reader.readMessage(value,proto.bloombox.schema.analytics.product.Action.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 12:
      var value = new proto.bloombox.schema.analytics.shop.Action;
      reader.readMessage(value,proto.bloombox.schema.analytics.shop.Action.deserializeBinaryFromReader);
      msg.setShop(value);
      break;
    case 13:
      var value = new proto.bloombox.schema.analytics.order.Action;
      reader.readMessage(value,proto.bloombox.schema.analytics.order.Action.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getSection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.section.Action.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.analytics.product.Action.serializeBinaryToWriter
    );
  }
  f = message.getShop();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bloombox.schema.analytics.shop.Action.serializeBinaryToWriter
    );
  }
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.bloombox.schema.analytics.order.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bloombox.schema.analytics.Context context = 2;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 2));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bloombox.schema.analytics.section.Action section = 10;
 * @return {?proto.bloombox.schema.analytics.section.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getSection = function() {
  return /** @type{?proto.bloombox.schema.analytics.section.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.section.Action, 10));
};


/** @param {?proto.bloombox.schema.analytics.section.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setSection = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.clearSection = function() {
  this.setSection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.hasSection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bloombox.schema.analytics.product.Action product = 11;
 * @return {?proto.bloombox.schema.analytics.product.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getProduct = function() {
  return /** @type{?proto.bloombox.schema.analytics.product.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.product.Action, 11));
};


/** @param {?proto.bloombox.schema.analytics.product.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setProduct = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bloombox.schema.analytics.shop.Action shop = 12;
 * @return {?proto.bloombox.schema.analytics.shop.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getShop = function() {
  return /** @type{?proto.bloombox.schema.analytics.shop.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.shop.Action, 12));
};


/** @param {?proto.bloombox.schema.analytics.shop.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setShop = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.clearShop = function() {
  this.setShop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.hasShop = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bloombox.schema.analytics.order.Action order = 13;
 * @return {?proto.bloombox.schema.analytics.order.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.getOrder = function() {
  return /** @type{?proto.bloombox.schema.analytics.order.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.order.Action, 13));
};


/** @param {?proto.bloombox.schema.analytics.order.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.setOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent;
  return proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.EventCase = {
  EVENT_NOT_SET: 0,
  ACTION: 10
};

/**
 * @return {proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.EventCase}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.getEventCase = function() {
  return /** @type {proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.EventCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.bloombox.schema.analytics.identity.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action;
  return proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.identity.Action;
      reader.readMessage(value,proto.bloombox.schema.analytics.identity.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.identity.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bloombox.schema.analytics.Context context = 2;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 2));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bloombox.schema.analytics.identity.Action action = 10;
 * @return {?proto.bloombox.schema.analytics.identity.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.getAction = function() {
  return /** @type{?proto.bloombox.schema.analytics.identity.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.identity.Action, 10));
};


/** @param {?proto.bloombox.schema.analytics.identity.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.setAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.prototype.hasAction = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.OperationStatus = {
  OK: 0,
  ERROR: 1
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryError = {
  UNKNOWN: 0,
  INVALID_COLLECTION: 1,
  INVALID_PARTNER: 2,
  INVALID_LOCATION: 3,
  INVALID_DEVICE: 4,
  INVALID_USER: 5,
  INVALID_CLIENT: 6,
  PARTNER_NOT_FOUND: 7,
  LOCATION_NOT_FOUND: 8,
  INVALID_PAYLOAD: 99
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_);
};
goog.inherits(proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.displayName = 'proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_ = [[10,11,20,21,22,30]];

/**
 * @enum {number}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.EventCase = {
  EVENT_NOT_SET: 0,
  GENERIC: 10,
  ERROR: 11,
  IMPRESSION: 20,
  VIEW: 21,
  ACTION: 22,
  USER_ACTION: 30
};

/**
 * @return {proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.EventCase}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getEventCase = function() {
  return /** @type {proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parent: jspb.Message.getFieldWithDefault(msg, 2, ""),
    internal: jspb.Message.getFieldWithDefault(msg, 3, false),
    timing: (f = msg.getTiming()) && proto.bloombox.schema.analytics.EventPosition.toObject(includeInstance, f),
    context: (f = msg.getContext()) && proto.bloombox.schema.analytics.Context.toObject(includeInstance, f),
    actors: (f = msg.getActors()) && proto.bloombox.schema.analytics.EventActors.toObject(includeInstance, f),
    generic: (f = msg.getGeneric()) && proto.bloombox.schema.analytics.generic.Event.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.bloombox.schema.analytics.generic.Exception.toObject(includeInstance, f),
    impression: (f = msg.getImpression()) && proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.toObject(includeInstance, f),
    view: (f = msg.getView()) && proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.toObject(includeInstance, f),
    userAction: (f = msg.getUserAction()) && proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent;
  return proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternal(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.analytics.EventPosition;
      reader.readMessage(value,proto.bloombox.schema.analytics.EventPosition.deserializeBinaryFromReader);
      msg.setTiming(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.analytics.Context;
      reader.readMessage(value,proto.bloombox.schema.analytics.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 6:
      var value = new proto.bloombox.schema.analytics.EventActors;
      reader.readMessage(value,proto.bloombox.schema.analytics.EventActors.deserializeBinaryFromReader);
      msg.setActors(value);
      break;
    case 10:
      var value = new proto.bloombox.schema.analytics.generic.Event;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.Event.deserializeBinaryFromReader);
      msg.setGeneric(value);
      break;
    case 11:
      var value = new proto.bloombox.schema.analytics.generic.Exception;
      reader.readMessage(value,proto.bloombox.schema.analytics.generic.Exception.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 20:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.deserializeBinaryFromReader);
      msg.setImpression(value);
      break;
    case 21:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    case 22:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 30:
      var value = new proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action;
      reader.readMessage(value,proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.deserializeBinaryFromReader);
      msg.setUserAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInternal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTiming();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.analytics.EventPosition.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.analytics.Context.serializeBinaryToWriter
    );
  }
  f = message.getActors();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.bloombox.schema.analytics.EventActors.serializeBinaryToWriter
    );
  }
  f = message.getGeneric();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bloombox.schema.analytics.generic.Event.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bloombox.schema.analytics.generic.Exception.serializeBinaryToWriter
    );
  }
  f = message.getImpression();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action.serializeBinaryToWriter
    );
  }
  f = message.getUserAction();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string parent = 2;
 * @return {string}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setParent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool internal = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getInternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setInternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bloombox.schema.analytics.EventPosition timing = 4;
 * @return {?proto.bloombox.schema.analytics.EventPosition}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getTiming = function() {
  return /** @type{?proto.bloombox.schema.analytics.EventPosition} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.EventPosition, 4));
};


/** @param {?proto.bloombox.schema.analytics.EventPosition|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setTiming = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearTiming = function() {
  this.setTiming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasTiming = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bloombox.schema.analytics.Context context = 5;
 * @return {?proto.bloombox.schema.analytics.Context}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getContext = function() {
  return /** @type{?proto.bloombox.schema.analytics.Context} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.Context, 5));
};


/** @param {?proto.bloombox.schema.analytics.Context|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasContext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bloombox.schema.analytics.EventActors actors = 6;
 * @return {?proto.bloombox.schema.analytics.EventActors}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getActors = function() {
  return /** @type{?proto.bloombox.schema.analytics.EventActors} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.EventActors, 6));
};


/** @param {?proto.bloombox.schema.analytics.EventActors|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setActors = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearActors = function() {
  this.setActors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasActors = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bloombox.schema.analytics.generic.Event generic = 10;
 * @return {?proto.bloombox.schema.analytics.generic.Event}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getGeneric = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.Event} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.Event, 10));
};


/** @param {?proto.bloombox.schema.analytics.generic.Event|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setGeneric = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearGeneric = function() {
  this.setGeneric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasGeneric = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bloombox.schema.analytics.generic.Exception error = 11;
 * @return {?proto.bloombox.schema.analytics.generic.Exception}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getError = function() {
  return /** @type{?proto.bloombox.schema.analytics.generic.Exception} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.analytics.generic.Exception, 11));
};


/** @param {?proto.bloombox.schema.analytics.generic.Exception|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasError = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CommercialEvent.Impression impression = 20;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getImpression = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression, 20));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Impression|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setImpression = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearImpression = function() {
  this.setImpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasImpression = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CommercialEvent.View view = 21;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getView = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View, 21));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.View|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setView = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearView = function() {
  this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasView = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional CommercialEvent.Action action = 22;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getAction = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action, 22));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.CommercialEvent.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional IdentityEvent.Action user_action = 30;
 * @return {?proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.getUserAction = function() {
  return /** @type{?proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action, 30));
};


/** @param {?proto.bloombox.schema.services.telemetry.v1beta3.IdentityEvent.Action|undefined} value */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.setUserAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 30, proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.oneofGroups_[0], value);
};


proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.clearUserAction = function() {
  this.setUserAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.telemetry.v1beta3.TelemetryEvent.prototype.hasUserAction = function() {
  return jspb.Message.getField(this, 30) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.Ping.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.Ping;
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.Ping.Request;
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.Ping.Response;
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation;
  return proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.Ping.Request|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.Ping.Response|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CheckinUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CheckinUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.bloombox.schema.identity.UserKey.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && proto.bloombox.schema.identity.UserFlags.toObject(includeInstance, f),
    name: (f = msg.getName()) && proto.opencannabis.person.Name.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinUser}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CheckinUser;
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinUser}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.identity.UserKey;
      reader.readMessage(value,proto.bloombox.schema.identity.UserKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.identity.UserFlags;
      reader.readMessage(value,proto.bloombox.schema.identity.UserFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 3:
      var value = new proto.opencannabis.person.Name;
      reader.readMessage(value,proto.opencannabis.person.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.identity.UserKey.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.identity.UserFlags.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.person.Name.serializeBinaryToWriter
    );
  }
};


/**
 * optional bloombox.schema.identity.UserKey key = 1;
 * @return {?proto.bloombox.schema.identity.UserKey}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.getKey = function() {
  return /** @type{?proto.bloombox.schema.identity.UserKey} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.UserKey, 1));
};


/** @param {?proto.bloombox.schema.identity.UserKey|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bloombox.schema.identity.UserFlags flags = 2;
 * @return {?proto.bloombox.schema.identity.UserFlags}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.getFlags = function() {
  return /** @type{?proto.bloombox.schema.identity.UserFlags} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.identity.UserFlags, 2));
};


/** @param {?proto.bloombox.schema.identity.UserFlags|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional opencannabis.person.Name name = 3;
 * @return {?proto.opencannabis.person.Name}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.getName = function() {
  return /** @type{?proto.opencannabis.person.Name} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.person.Name, 3));
};


/** @param {?proto.opencannabis.person.Name|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment;
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    mustEnroll: jspb.Message.getFieldWithDefault(msg, 2, false),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0),
    user: (f = msg.getUser()) && proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.toObject(includeInstance, f),
    enrollment: (f = msg.getEnrollment()) && proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse;
  return proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMustEnroll(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.checkin.v1beta1.CheckinError} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 4:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.CheckinUser;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.deserializeBinaryFromReader);
      msg.setEnrollment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMustEnroll();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.CheckinUser.serializeBinaryToWriter
    );
  }
  f = message.getEnrollment();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool must_enroll = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.getMustEnroll = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.setMustEnroll = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional CheckinError error = 3;
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CheckinError}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.checkin.v1beta1.CheckinError} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.checkin.v1beta1.CheckinError} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.setError = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CheckinUser user = 4;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.CheckinUser}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.getUser = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.CheckinUser} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.CheckinUser, 4));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.CheckinUser|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CheckinEnrollment enrollment = 5;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.getEnrollment = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment, 5));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.CheckinEnrollment|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.setEnrollment = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.clearEnrollment = function() {
  this.setEnrollment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.prototype.hasEnrollment = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.IDCheckin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.IDCheckin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.IDCheckin;
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    raw: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serialNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request;
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaw(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRaw();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string raw = 1;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.setRaw = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string serial_number = 3;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.setSerialNumber = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fingerprint = 4;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation;
  return proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request, 1));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Request|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CheckinResponse response = 2;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse, 2));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.IDCheckin.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CardCheckin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CardCheckin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CardCheckin;
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 3, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request;
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string card_type = 1;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.getCardType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.setCardType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payload = 2;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.setPayload = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signature = 3;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.setSignature = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string agent = 4;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.setAgent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string scope = 5;
 * @return {string}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.displayName = 'proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation;
  return proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse;
      reader.readMessage(value,proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request, 1));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Request|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CheckinResponse response = 2;
 * @return {?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse, 2));
};


/** @param {?proto.bloombox.schema.services.checkin.v1beta1.CheckinResponse|undefined} value */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.checkin.v1beta1.CardCheckin.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.checkin.v1beta1.CheckinError = {
  NO_ERROR: 0,
  ID_NOT_FOUND: 1,
  ID_EXPIRED: 2,
  ID_INVALID: 3,
  ID_TYPE_UNSUPPORTED: 4,
  CARD_TYPE_INVALID: 5,
  CARD_EXPIRED: 6,
  CARD_SUSPENDED: 7,
  USER_SUSPENDED: 8,
  PARTNER_SUSPENDED: 9,
  PARTNER_INVALID: 10,
  LOCATION_INVALID: 11,
  JURISDICTION_INVALID: 12,
  JURISDICTION_UNSUPPORTED: 13,
  USER_UNDERAGE: 14
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.displayName = 'proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    partner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment;
  return proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {!proto.bloombox.schema.services.devices.v1beta1.DeviceRole} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string partner = 1;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.getPartner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.setPartner = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string location = 2;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceRole role = 3;
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceRole}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.getRole = function() {
  return /** @type {!proto.bloombox.schema.services.devices.v1beta1.DeviceRole} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceRole} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.DeviceActivation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.displayName = 'proto.bloombox.schema.services.devices.v1beta1.DeviceActivation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceActivation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assignment: (f = msg.getAssignment()) && proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceActivation}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.DeviceActivation;
  return proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceActivation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceActivation}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.deserializeBinaryFromReader);
      msg.setAssignment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceActivation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssignment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceAssignment assignment = 3;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.getAssignment = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment, 3));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.DeviceAssignment|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.setAssignment = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.clearAssignment = function() {
  this.setAssignment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.prototype.hasAssignment = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Ping.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Ping;
  return proto.bloombox.schema.services.devices.v1beta1.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Ping.Request.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Ping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Ping.Request;
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Ping.Response.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Ping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Ping.Response;
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional bloombox.schema.services.ServiceStatus status = 1;
 * @return {!proto.bloombox.schema.services.ServiceStatus}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.prototype.getStatus = function() {
  return /** @type {!proto.bloombox.schema.services.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bloombox.schema.services.ServiceStatus} value */
proto.bloombox.schema.services.devices.v1beta1.Ping.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Ping.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Ping.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.devices.v1beta1.Ping.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.devices.v1beta1.Ping.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Ping.Operation;
  return proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Ping.Operation}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.devices.v1beta1.Ping.Request;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.Ping.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.devices.v1beta1.Ping.Response;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.Ping.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Ping.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.devices.v1beta1.Ping.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.devices.v1beta1.Ping.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.Ping.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.Ping.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.Ping.Request, 1));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.Ping.Request|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.Ping.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.Ping.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.Ping.Response, 2));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.Ping.Response|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Ping.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Activation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Activation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Activation.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Activation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Activation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Activation;
  return proto.bloombox.schema.services.devices.v1beta1.Activation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Activation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Activation.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Activation.Request.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Activation.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    serial: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Activation.Request;
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Activation.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string serial = 1;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.setSerial = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fingerprint = 2;
 * @return {string}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Request.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Activation.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Activation.Response.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Activation.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0),
    manifest: (f = msg.getManifest()) && proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Activation.Response;
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {!proto.bloombox.schema.services.devices.v1beta1.DeviceError} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.bloombox.schema.services.devices.v1beta1.DeviceActivation;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.deserializeBinaryFromReader);
      msg.setManifest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Activation.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getManifest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bloombox.schema.services.devices.v1beta1.DeviceActivation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional DeviceError error = 2;
 * @return {!proto.bloombox.schema.services.devices.v1beta1.DeviceError}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.getError = function() {
  return /** @type {!proto.bloombox.schema.services.devices.v1beta1.DeviceError} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.bloombox.schema.services.devices.v1beta1.DeviceError} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.setError = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DeviceActivation manifest = 3;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.DeviceActivation}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.getManifest = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.DeviceActivation} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.DeviceActivation, 3));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.DeviceActivation|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.setManifest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.clearManifest = function() {
  this.setManifest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Response.prototype.hasManifest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bloombox.schema.services.devices.v1beta1.Activation.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.displayName = 'proto.bloombox.schema.services.devices.v1beta1.Activation.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.bloombox.schema.services.devices.v1beta1.Activation.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.bloombox.schema.services.devices.v1beta1.Activation.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Operation}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bloombox.schema.services.devices.v1beta1.Activation.Operation;
  return proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bloombox.schema.services.devices.v1beta1.Activation.Operation}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bloombox.schema.services.devices.v1beta1.Activation.Request;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.Activation.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.bloombox.schema.services.devices.v1beta1.Activation.Response;
      reader.readMessage(value,proto.bloombox.schema.services.devices.v1beta1.Activation.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bloombox.schema.services.devices.v1beta1.Activation.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bloombox.schema.services.devices.v1beta1.Activation.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bloombox.schema.services.devices.v1beta1.Activation.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.Activation.Request}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.getRequest = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.Activation.Request} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.Activation.Request, 1));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.Activation.Request|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.bloombox.schema.services.devices.v1beta1.Activation.Response}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.getResponse = function() {
  return /** @type{?proto.bloombox.schema.services.devices.v1beta1.Activation.Response} */ (
    jspb.Message.getWrapperField(this, proto.bloombox.schema.services.devices.v1beta1.Activation.Response, 2));
};


/** @param {?proto.bloombox.schema.services.devices.v1beta1.Activation.Response|undefined} value */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bloombox.schema.services.devices.v1beta1.Activation.Operation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceError = {
  NO_ERROR: 0,
  INVALID_SERIAL: 1,
  DEVICE_NOT_FOUND: 2,
  INTERNAL_ERROR: 3,
  DEVICE_UNASSIGNED: 4
};

/**
 * @enum {number}
 */
proto.bloombox.schema.services.devices.v1beta1.DeviceRole = {
  UNASSIGNED: 0,
  TV: 1,
  CHECKIN: 2,
  BEACON: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.temporal.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencannabis.temporal.Time.oneofGroups_);
};
goog.inherits(proto.opencannabis.temporal.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.temporal.Time.displayName = 'proto.opencannabis.temporal.Time';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencannabis.temporal.Time.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.opencannabis.temporal.Time.SpecCase = {
  SPEC_NOT_SET: 0,
  ISO8601: 1
};

/**
 * @return {proto.opencannabis.temporal.Time.SpecCase}
 */
proto.opencannabis.temporal.Time.prototype.getSpecCase = function() {
  return /** @type {proto.opencannabis.temporal.Time.SpecCase} */(jspb.Message.computeOneofCase(this, proto.opencannabis.temporal.Time.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.temporal.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.temporal.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.temporal.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    iso8601: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.temporal.Time}
 */
proto.opencannabis.temporal.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.temporal.Time;
  return proto.opencannabis.temporal.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.temporal.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.temporal.Time}
 */
proto.opencannabis.temporal.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIso8601(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.temporal.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.temporal.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.temporal.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.temporal.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string iso8601 = 1;
 * @return {string}
 */
proto.opencannabis.temporal.Time.prototype.getIso8601 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.temporal.Time.prototype.setIso8601 = function(value) {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Time.oneofGroups_[0], value);
};


proto.opencannabis.temporal.Time.prototype.clearIso8601 = function() {
  jspb.Message.setOneofField(this, 1, proto.opencannabis.temporal.Time.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.temporal.Time.prototype.hasIso8601 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.oauth.AuthorizationScope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.oauth.AuthorizationScope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.oauth.AuthorizationScope.displayName = 'proto.opencannabis.oauth.AuthorizationScope';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.oauth.AuthorizationScope.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.oauth.AuthorizationScope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.oauth.AuthorizationScope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.AuthorizationScope.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.oauth.AuthorizationScope}
 */
proto.opencannabis.oauth.AuthorizationScope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.oauth.AuthorizationScope;
  return proto.opencannabis.oauth.AuthorizationScope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.oauth.AuthorizationScope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.oauth.AuthorizationScope}
 */
proto.opencannabis.oauth.AuthorizationScope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.oauth.AuthorizationScope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.oauth.AuthorizationScope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.oauth.AuthorizationScope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.AuthorizationScope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.opencannabis.oauth.AuthorizationScope.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.AuthorizationScope.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.opencannabis.oauth.AuthorizationScope.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.AuthorizationScope.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.oauth.Client = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.oauth.Client, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.oauth.Client.displayName = 'proto.opencannabis.oauth.Client';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.oauth.Client.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.oauth.Client.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.oauth.Client} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.Client.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.oauth.Client}
 */
proto.opencannabis.oauth.Client.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.oauth.Client;
  return proto.opencannabis.oauth.Client.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.oauth.Client} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.oauth.Client}
 */
proto.opencannabis.oauth.Client.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.oauth.Client.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.oauth.Client.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.oauth.Client} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.Client.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.opencannabis.oauth.Client.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.Client.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.opencannabis.oauth.Client.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.Client.prototype.setClientSecret = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.oauth.ClientID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.oauth.ClientID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.oauth.ClientID.displayName = 'proto.opencannabis.oauth.ClientID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.oauth.ClientID.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.oauth.ClientID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.oauth.ClientID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.ClientID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.oauth.ClientID}
 */
proto.opencannabis.oauth.ClientID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.oauth.ClientID;
  return proto.opencannabis.oauth.ClientID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.oauth.ClientID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.oauth.ClientID}
 */
proto.opencannabis.oauth.ClientID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.oauth.ClientID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.oauth.ClientID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.oauth.ClientID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.ClientID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.opencannabis.oauth.ClientID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.ClientID.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.oauth.ClientSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencannabis.oauth.ClientSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.oauth.ClientSecret.displayName = 'proto.opencannabis.oauth.ClientSecret';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.oauth.ClientSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.oauth.ClientSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.oauth.ClientSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.ClientSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.oauth.ClientSecret}
 */
proto.opencannabis.oauth.ClientSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.oauth.ClientSecret;
  return proto.opencannabis.oauth.ClientSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.oauth.ClientSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.oauth.ClientSecret}
 */
proto.opencannabis.oauth.ClientSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.oauth.ClientSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.oauth.ClientSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.oauth.ClientSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.oauth.ClientSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secret = 1;
 * @return {string}
 */
proto.opencannabis.oauth.ClientSecret.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.opencannabis.oauth.ClientSecret.prototype.setSecret = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencannabis.structs.labtesting.BasicTestResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencannabis.structs.labtesting.BasicTestResults.repeatedFields_, null);
};
goog.inherits(proto.opencannabis.structs.labtesting.BasicTestResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.opencannabis.structs.labtesting.BasicTestResults.displayName = 'proto.opencannabis.structs.labtesting.BasicTestResults';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencannabis.structs.labtesting.BasicTestResults.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.toObject = function(opt_includeInstance) {
  return proto.opencannabis.structs.labtesting.BasicTestResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencannabis.structs.labtesting.BasicTestResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.BasicTestResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: jspb.Message.getFieldWithDefault(msg, 1, false),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.opencannabis.structs.labtesting.TestMedia.toObject, includeInstance),
    lastUpdated: (f = msg.getLastUpdated()) && proto.opencannabis.temporal.Instant.toObject(includeInstance, f),
    cannabinoids: (f = msg.getCannabinoids()) && proto.opencannabis.structs.labtesting.Cannabinoids.toObject(includeInstance, f),
    subjective: (f = msg.getSubjective()) && proto.opencannabis.structs.labtesting.Subjective.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencannabis.structs.labtesting.BasicTestResults}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencannabis.structs.labtesting.BasicTestResults;
  return proto.opencannabis.structs.labtesting.BasicTestResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencannabis.structs.labtesting.BasicTestResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencannabis.structs.labtesting.BasicTestResults}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 2:
      var value = new proto.opencannabis.structs.labtesting.TestMedia;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.TestMedia.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    case 3:
      var value = new proto.opencannabis.temporal.Instant;
      reader.readMessage(value,proto.opencannabis.temporal.Instant.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    case 20:
      var value = new proto.opencannabis.structs.labtesting.Cannabinoids;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Cannabinoids.deserializeBinaryFromReader);
      msg.setCannabinoids(value);
      break;
    case 30:
      var value = new proto.opencannabis.structs.labtesting.Subjective;
      reader.readMessage(value,proto.opencannabis.structs.labtesting.Subjective.deserializeBinaryFromReader);
      msg.setSubjective(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencannabis.structs.labtesting.BasicTestResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencannabis.structs.labtesting.BasicTestResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencannabis.structs.labtesting.BasicTestResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opencannabis.structs.labtesting.TestMedia.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencannabis.temporal.Instant.serializeBinaryToWriter
    );
  }
  f = message.getCannabinoids();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.opencannabis.structs.labtesting.Cannabinoids.serializeBinaryToWriter
    );
  }
  f = message.getSubjective();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.opencannabis.structs.labtesting.Subjective.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool available = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.setAvailable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated TestMedia media = 2;
 * @return {!Array.<!proto.opencannabis.structs.labtesting.TestMedia>}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.opencannabis.structs.labtesting.TestMedia>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencannabis.structs.labtesting.TestMedia, 2));
};


/** @param {!Array.<!proto.opencannabis.structs.labtesting.TestMedia>} value */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opencannabis.structs.labtesting.TestMedia=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencannabis.structs.labtesting.TestMedia}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opencannabis.structs.labtesting.TestMedia, opt_index);
};


proto.opencannabis.structs.labtesting.BasicTestResults.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * optional opencannabis.temporal.Instant last_updated = 3;
 * @return {?proto.opencannabis.temporal.Instant}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.getLastUpdated = function() {
  return /** @type{?proto.opencannabis.temporal.Instant} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.temporal.Instant, 3));
};


/** @param {?proto.opencannabis.temporal.Instant|undefined} value */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.setLastUpdated = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.opencannabis.structs.labtesting.BasicTestResults.prototype.clearLastUpdated = function() {
  this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Cannabinoids cannabinoids = 20;
 * @return {?proto.opencannabis.structs.labtesting.Cannabinoids}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.getCannabinoids = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Cannabinoids} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Cannabinoids, 20));
};


/** @param {?proto.opencannabis.structs.labtesting.Cannabinoids|undefined} value */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.setCannabinoids = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.opencannabis.structs.labtesting.BasicTestResults.prototype.clearCannabinoids = function() {
  this.setCannabinoids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.hasCannabinoids = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Subjective subjective = 30;
 * @return {?proto.opencannabis.structs.labtesting.Subjective}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.getSubjective = function() {
  return /** @type{?proto.opencannabis.structs.labtesting.Subjective} */ (
    jspb.Message.getWrapperField(this, proto.opencannabis.structs.labtesting.Subjective, 30));
};


/** @param {?proto.opencannabis.structs.labtesting.Subjective|undefined} value */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.setSubjective = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.opencannabis.structs.labtesting.BasicTestResults.prototype.clearSubjective = function() {
  this.setSubjective(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.opencannabis.structs.labtesting.BasicTestResults.prototype.hasSubjective = function() {
  return jspb.Message.getField(this, 30) != null;
};


