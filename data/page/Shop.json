[null,null,["Shop",[[[null,"<h2>Shop API</h2>\n<p>Bloombox Shop and the Shop API provide tools for orchestrating an online cannabis shop, complete with hours, zipcode\nchecking, ordering, user signup and verification, and more.</p>\n<h3>Store hours</h3>\n<p><code>bloombox.shop.info</code> lets you query hours for your storefront. It supplies a given callback with <code>pickup</code> and <code>delivery</code>\nstatus:</p>\n<pre><code class=\"language-javascript\">      bloombox.shop.info(function(pickup, delivery, err) {\n        if (err) {\n          console.log(&#34;%cThere was an error retrieving shop status: &#34;, &#34;color: red&#34;, err);\n          return;\n        }\n\n        // is the shop open at all?\n        if (!(pickup || delivery)) {\n          // the shop is not open\n          console.log(&#34;%cThe shop is not currently open for orders.&#34;, &#34;color: red&#34;);\n          return;\n        }\n\n        let label;\n        if (pickup &amp;&amp; delivery) {\n          label &#61; &#34;PICKUP and DELIVERY&#34;;\n        } else if (pickup) {\n          label &#61; &#34;PICKUP ONLY&#34;;\n        } else {\n          label &#61; &#34;DELIVERY ONLY&#34;;\n        }\n\n        // report the shop status\n        console.log(&#34;The shop is currently open for: &#34; &#43; label);\n    });\n</code></pre>\n<h3>Checking zipcodes</h3>\n<p>Many US cannabis retailers are permitted for delivery by zipcode. The <code>zipcheck</code> feature lets you check a zipcode\nagainst a predefined list, that you can manage from your Bloombox Dashboard. This way, you can update your eligible\nzipcodes easily and your web store will stay in sync.</p>\n<pre><code class=\"language-javascript\">      bloombox.shop.zipcheck(&#34;&lt;zipcode&gt;&#34;, function (zipcodeEligible) {\n        if (zipcodeEligible !&#61;&#61; true) {\n          console.log(&#34;%cThe zipcode was found to be ineligible. Cannot proceed.&#34;, &#34;color: red&#34;);\n        } else {\n          console.log(&#34;%cThe zipcode is eligible for delivery orders.&#34;, &#34;color: green&#34;);\n        }\n      });\n    });\n</code></pre>\n<h3>Verifying a user as a member</h3>\n<p>In order to simplify verification on <em>your</em> end as a retailer, especially in medical markets that require doctor\nverification, this method can be used to ensure that only pre-verified users can submit an order. Users enrolled via\nthis API are eligible to be verified immediately, assuming your settings allow it.</p>\n<p>If the user verifies as a member of your collective, you get back a <code>bloombox.shop.Customer</code> object that describes who\nthey are. You can re-use this object to submit an order.</p>\n<pre><code class=\"language-javascript\">    bloombox.shop.verify(&#34;&lt;email_to_verify&gt;&#34;, function(verified, err, customer) {\n      if (verified !&#61;&#61; true) {\n        // an error occurred - err is an enum and it specifies what happened\n        console.warn(&#34;The user could not be verified.&#34;, &#34;color: red&#34;, err);\n      } else {\n        // ok the user is verified, you can use &#96;customer&#96; to submit orders now\n        console.log(&#34;%cThe user is valid and eligible to submit orders.&#34;, &#34;color: green&#34;, {&#34;customer&#34;: customer});\n      }\n    });\n</code></pre>\n"]]]]]