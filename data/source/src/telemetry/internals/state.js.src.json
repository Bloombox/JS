[null,null,null,["state.js","src/telemetry/internals/state.js",[null,"/*"," * Copyright 2018, Bloombox, LLC. All rights reserved."," *"," * Source and object computer code contained herein is the private intellectual"," * property of Bloombox, a California Limited Liability Corporation. Use of this"," * code in source form requires permission in writing before use or the"," * assembly, distribution, or publishing of derivative works, for commercial"," * purposes or any other purpose, from a duly authorized officer of Momentum"," * Ideas Co."," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */",null,"/**"," * Bloombox Telemetry: State Manager"," *"," * @fileoverview Provides centralized RPC state management."," */",null,"/*global goog */",null,"goog.provide('bloombox.telemetry.internals.LocalStats');","goog.provide('bloombox.telemetry.internals.activate');","goog.provide('bloombox.telemetry.internals.active');","goog.provide('bloombox.telemetry.internals.deactivate');","goog.provide('bloombox.telemetry.internals.disable');","goog.provide('bloombox.telemetry.internals.enable');","goog.provide('bloombox.telemetry.internals.enabled');",null,"goog.provide('bloombox.telemetry.internals.state.ACTIVE_');","goog.provide('bloombox.telemetry.internals.state.ENABLED_');","goog.provide('bloombox.telemetry.internals.state.EVENT_ERROR_COUNT_');","goog.provide('bloombox.telemetry.internals.state.EVENT_SUCCESS_COUNT_');","goog.provide('bloombox.telemetry.internals.state.LAST_PING_SENT_');","goog.provide('bloombox.telemetry.internals.state.LAST_PONG_RECEIVED_');","goog.provide('bloombox.telemetry.internals.state.QUEUED_EVENT_COUNT_');","goog.provide('bloombox.telemetry.internals.state.SENT_EVENT_COUNT_');",null,"goog.provide('bloombox.telemetry.internals.statistics');",null,"goog.provide('bloombox.telemetry.internals.stats.recordPing');","goog.provide('bloombox.telemetry.internals.stats.recordPong');","goog.provide('bloombox.telemetry.internals.stats.recordRPCError');","goog.provide('bloombox.telemetry.internals.stats.recordRPCSent');","goog.provide('bloombox.telemetry.internals.stats.recordRPCSuccess');","goog.provide('bloombox.telemetry.internals.stats.updateRPCQueued');",null,null,"/**"," * Type declaration for a record that provides statistics about the local"," * telemetry subsystem."," *"," * @typedef {{"," *   queued: number,"," *   sent: number,"," *   errors: number,"," *   success: number,"," *   lastPing: number,"," *   lastPong: number"," * }}"," */","bloombox.telemetry.internals.LocalStats;",null,null,"// - Enabled State - //","/**"," * Query whether the telemetry system is enabled."," *"," * @return {boolean}"," * @public"," */","bloombox.telemetry.internals.enabled = function() {","  return bloombox.telemetry.internals.state.ENABLED_;","};",null,null,"/**"," * Disable the telemetry system."," *"," * @public"," */","bloombox.telemetry.internals.disable = function() {","  bloombox.telemetry.internals.state.ENABLED_ = false;","};",null,null,"/**"," * Enable the telemetry system."," *"," * @public"," */","bloombox.telemetry.internals.enable = function() {","  bloombox.telemetry.internals.state.ENABLED_ = true;","};",null,null,"/**"," * Record that a ping was sent."," *"," * @public"," */","bloombox.telemetry.internals.stats.recordPing = function() {","  bloombox.telemetry.internals.state.LAST_PING_SENT_ = +(new Date());","};",null,null,"/**"," * Record that a pong was received."," *"," * @public"," */","bloombox.telemetry.internals.stats.recordPong = function() {","  bloombox.telemetry.internals.state.LAST_PONG_RECEIVED_ = +(new Date());","};",null,null,"/**"," * Record that an RPC error happened."," *"," * @public"," */","bloombox.telemetry.internals.stats.recordRPCError = function() {","  bloombox.telemetry.internals.state.EVENT_ERROR_COUNT_++;","};",null,null,"/**"," * Record that an RPC success happened."," *"," * @public"," */","bloombox.telemetry.internals.stats.recordRPCSuccess = function() {","  bloombox.telemetry.internals.state.EVENT_SUCCESS_COUNT_++;","};",null,null,"/**"," * Record that an RPC was sent."," *"," * @public"," */","bloombox.telemetry.internals.stats.recordRPCSent = function() {","  bloombox.telemetry.internals.state.SENT_EVENT_COUNT_++;","};",null,null,"/**"," * Update queued RPC count."," *"," * @param {number} queued_count Current count of queued RPCs."," * @public"," */","bloombox.telemetry.internals.stats.updateRPCQueued = function(queued_count) {","  bloombox.telemetry.internals.state.QUEUED_EVENT_COUNT_ = queued_count;","};",null,null,"// - Active State - //","/**"," * Query whether the telemetry system is currently active or paused."," *"," * @return {boolean}"," * @public"," */","bloombox.telemetry.internals.active = function() {","  return (","    bloombox.telemetry.internals.state.ENABLED_ &&","    bloombox.telemetry.internals.state.ACTIVE_);","};",null,"/**"," * Activate the telemetry system."," *"," * @public"," */","bloombox.telemetry.internals.activate = function() {","  bloombox.telemetry.internals.state.ACTIVE_ = true;",null,"  // perform a tick to re-start the queue","  bloombox.telemetry.internals.tick();","};",null,"/**"," * Deactivate the telemetry system."," *"," * @public"," */","bloombox.telemetry.internals.deactivate = function() {","  bloombox.telemetry.internals.state.ACTIVE_ = false;","};",null,null,"// - Statistics - //","/**"," * Return stats about the local telemetry subsystem."," *"," * @return {bloombox.telemetry.internals.LocalStats}"," * @public"," */","bloombox.telemetry.internals.statistics = function() {","  let stats = (/** @type {bloombox.telemetry.internals.LocalStats} */ ({","    queued: bloombox.telemetry.internals.state.QUEUED_EVENT_COUNT_,","    sent: bloombox.telemetry.internals.state.SENT_EVENT_COUNT_,","    errors: bloombox.telemetry.internals.state.EVENT_ERROR_COUNT_,","    success: bloombox.telemetry.internals.state.EVENT_SUCCESS_COUNT_,","    lastPing: bloombox.telemetry.internals.state.LAST_PING_SENT_,","    lastPong: bloombox.telemetry.internals.state.LAST_PONG_RECEIVED_","  }));",null,"  if (Object.isFrozen && !Object.isFrozen(stats)) {","    Object.freeze(stats);","  }","  return stats;","};",null,null,"/**"," * Whether telemetry services are enabled at all."," *"," * @type {boolean}"," * @private"," * @nocollapse"," */","bloombox.telemetry.internals.state.ENABLED_ = true;",null,null,"/**"," * Whether telemetry services are active - i.e. currently sending events. This"," * requires an active internet connection and the page must be in one of a"," * certain set of visibility states."," *"," * @type {boolean}"," * @private"," * @nocollapse"," */","bloombox.telemetry.internals.state.ACTIVE_ = true;",null,null,"/**"," * Last time we sent a `PING` call to the Telemetry service. Null means we have"," * not yet sent one."," *"," * @type {?number}"," * @private"," */","bloombox.telemetry.internals.state.LAST_PING_SENT_ = null;",null,null,"/**"," * Last time we received a `PONG` to our `PING`. Null means we have not yet"," * received one."," *"," * @type {?number}"," * @private"," */","bloombox.telemetry.internals.state.LAST_PONG_RECEIVED_ = null;",null,null,"/**"," * Global count of queued events."," *"," * @type {number}"," * @private"," */","bloombox.telemetry.internals.state.QUEUED_EVENT_COUNT_ = 0;",null,null,"/**"," * Global count of events sent to the Telemetry Service."," *"," * @type {number}"," * @private"," */","bloombox.telemetry.internals.state.SENT_EVENT_COUNT_ = 0;",null,null,"/**"," * Global count of errors received back for events sent to the Telemetry"," * Service. Should always be less than or equal to SENT_EVENT_COUNT."," *"," * @type {number}"," * @private"," */","bloombox.telemetry.internals.state.EVENT_ERROR_COUNT_ = 0;",null,null,"/**"," * Global count of successful events submitted to the Telemetry Service. Should"," * always be less than or equal to SENT_EVENT_COUNT."," *"," * @type {number}"," * @private"," */","bloombox.telemetry.internals.state.EVENT_SUCCESS_COUNT_ = 0;"]]]